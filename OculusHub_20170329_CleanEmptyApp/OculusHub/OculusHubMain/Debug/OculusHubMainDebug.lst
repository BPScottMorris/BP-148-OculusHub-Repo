
OculusHubMainDebug.elf:     file format elf32-littlearm
OculusHubMainDebug.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00016f55

Program Header:
    LOAD off    0x00008000 vaddr 0x00010000 paddr 0x00010000 align 2**15
         filesz 0x000001e8 memsz 0x000001e8 flags r--
    LOAD off    0x00008400 vaddr 0x00010400 paddr 0x00010400 align 2**15
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00008410 vaddr 0x00010410 paddr 0x00010410 align 2**15
         filesz 0x0000a9e4 memsz 0x0000a9e4 flags rwx
    LOAD off    0x00018000 vaddr 0x1fff0000 paddr 0x0001adf4 align 2**15
         filesz 0x000000a0 memsz 0x000000a0 flags rw-
    LOAD off    0x0001834c vaddr 0x1fff034c paddr 0x0001ae94 align 2**15
         filesz 0x00000024 memsz 0x00000024 flags rw-
    LOAD off    0x000200a0 vaddr 0x1fff00a0 paddr 0x0001ae98 align 2**15
         filesz 0x00000000 memsz 0x000002ac flags rw-
    LOAD off    0x00018370 vaddr 0x1fff0370 paddr 0x0001aeb8 align 2**15
         filesz 0x00000000 memsz 0x0000b000 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000001e8  00010000  00010000  00008000  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000010  00010400  00010400  00008400  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a9d4  00010410  00010410  00008410  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM          00000008  0001ade4  0001ade4  00012de4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0001adec  0001adec  00012dec  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0001adf0  0001adf0  00012df0  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  1fff0000  0001adf4  00018000  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  1fff00a0  0001ae98  000200a0  2**3  ALLOC
  8 .romp         00000024  1fff034c  0001ae94  0001834c  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 0000b000  1fff0370  0001aeb8  00018370  2**0  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00018370  2**0  CONTENTS, READONLY
 11 .debug_info   0002ec33  00000000  00000000  000183a0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005716  00000000  00000000  00046fd3  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000610  00000000  00000000  0004c6e9  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006c0  00000000  00000000  0004ccf9  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000161bf  00000000  00000000  0004d3b9  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009d4b  00000000  00000000  00063578  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00055e9b  00000000  00000000  0006d2c3  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment      00000070  00000000  00000000  000c315e  2**0  CONTENTS, READONLY
 19 .debug_frame  00003444  00000000  00000000  000c31d0  2**2  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000462f  00000000  00000000  000c6614  2**0  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  000cac44  2**2  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000cad10  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .interrupts	00000000 .interrupts
00010400 l    d  .cfmprotect	00000000 .cfmprotect
00010410 l    d  .text	00000000 .text
0001ade4 l    d  .ARM	00000000 .ARM
0001adec l    d  .init_array	00000000 .init_array
0001adf0 l    d  .fini_array	00000000 .fini_array
1fff0000 l    d  .data	00000000 .data
1fff00a0 l    d  .bss	00000000 .bss
1fff034c l    d  .romp	00000000 .romp
1fff0370 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 crtstuff.c
0001adcc l     O .text	00000000 __EH_FRAME_BEGIN__
00010410 l     F .text	00000000 __do_global_dtors_aux
1fff00a0 l       .bss	00000000 completed.7863
0001adf0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00010434 l     F .text	00000000 frame_dummy
1fff00a4 l       .bss	00000000 object.7868
0001adec l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/../../../../arm-none-eabi/lib/armv7e-m/fpu/crt0.o
00000000 l    df *ABS*	00000000 cp-demangle.c
000104d8 l     F .text	00000096 d_make_comp
00010570 l     F .text	00000032 d_make_name
000105a4 l     F .text	000000b2 d_cv_qualifiers
00010658 l     F .text	00000038 d_ref_qualifier
00010690 l     F .text	00000086 d_clone_suffix
00010718 l     F .text	00000154 d_substitution
0001086c l     F .text	00000046 d_append_char
000108b4 l     F .text	0000004c d_number.isra.0
00010900 l     F .text	00000038 d_number_component
00010938 l     F .text	00000030 d_compact_number
00010968 l     F .text	00000044 d_template_param
000109ac l     F .text	0000001e d_discriminator
000109cc l     F .text	00000084 d_source_name
00010a50 l     F .text	00000054 d_call_offset
00010aa4 l     F .text	00000044 d_lookup_template_argument.isra.6
00010ae8 l     F .text	00000086 d_find_pack
00010b70 l     F .text	0000007c d_growable_string_callback_adapter
00010bec l     F .text	000000cc d_expr_primary
00011800 l     F .text	0000065e d_encoding
00011034 l     F .text	00000708 d_type
00010cb8 l     F .text	000000bc d_template_args
000121d8 l     F .text	000003bc d_expression
00010d74 l     F .text	000002c0 d_name
00011f5c l     F .text	0000027c d_unqualified_name
000117c4 l     F .text	0000003c d_bare_function_type
0001173c l     F .text	00000088 d_parmlist
00011e60 l     F .text	000000fc d_operator_name
00012594 l     F .text	00000064 d_exprlist
000125f8 l     F .text	00000068 d_append_string
00012660 l     F .text	0000252c d_print_comp.part.10
00014b8c l     F .text	00000016 d_print_comp
00014ba4 l     F .text	00000546 d_print_mod
00015850 l     F .text	00000074 d_print_expr_op
000158c4 l     F .text	000000aa d_print_subexpr
00015350 l     F .text	000001a0 d_print_array_type.isra.9
000154f0 l     F .text	000001d8 d_print_function_type.isra.11
000156c8 l     F .text	00000186 d_print_cast.isra.12
000150ec l     F .text	00000264 d_print_mod_list
00015970 l     F .text	0000020c d_demangle_callback.constprop.16
00019a20 l     O .text	000000c4 standard_subs
00019ae4 l     O .text	00000294 cplus_demangle_builtin_types
00019d78 l     O .text	000003e0 cplus_demangle_operators
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 oculushub_main.cpp
00000000 l    df *ABS*	00000000 oculushub.cpp
00000000 l    df *ABS*	00000000 startup.c
00016f6e l       .text	00000000 skip_sp
00000000 l    df *ABS*	00000000 com.cpp
00000000 l    df *ABS*	00000000 com_uart.cpp
00000000 l    df *ABS*	00000000 flash.cpp
00000000 l    df *ABS*	00000000 mcg.cpp
00000000 l    df *ABS*	00000000 systick.cpp
00000000 l    df *ABS*	00000000 crc16.cpp
00000000 l    df *ABS*	00000000 flash_data.cpp
00000000 l    df *ABS*	00000000 flash_prog.cpp
00000000 l    df *ABS*	00000000 ticktimer.cpp
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 vterminate.cc
1fff032c l     O .bss	00000001 __gnu_cxx::__verbose_terminate_handler()::terminating
00000000 l    df *ABS*	00000000 eh_type.cc
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
1fff0330 l     O .bss	0000000c eh_globals
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 vfprintf_i.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000195e8 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
1fff0344 l     O .bss	00000004 heap_end.4246
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 impure.c
1fff003c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/freescale/kds_v3/toolchain/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 macros.c
00000000 l    df *ABS*	00000000 app.cpp
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20000000 l       .data	00000000 ___m_data_20000000_RAMEnd
00001000 l       *ABS*	00000000 __stack_size
20000000 l       .data	00000000 ___m_data_20000000_RAMStart
00080000 l       *ABS*	00000000 text_end
1fff0000 l       .data	00000000 _sdata
0001aeb8 l       .fini_array	00000000 data_init_end
0001adf4 l       .fini_array	00000000 ___ROM_AT
0000a000 l       *ABS*	00000000 __heap_size
0001ae94 l       .fini_array	00000000 ___m_data_20000000_ROMStart
0001adf0 l       .init_array	00000000 __init_array_end
0001adec l       .init_array	00000000 __preinit_array_end
20000000 l       *ABS*	00000000 _estack
1fff00a0 l       .data	00000000 _edata
0001adec l       .init_array	00000000 __init_array_start
0001adec l       .init_array	00000000 __preinit_array_start
00019928 g     F .text	00000012 _malloc_usable_size_r
00016a50  w    F .text	00000004 ISR_Reserved13
0001806c g     F .text	0000001e CFlashData::EraseCheck()
1fff0370 g       ._user_heap_stack	00000000 __HeapBase
00016a50  w    F .text	00000004 ISR_PORTD
000198e4 g     F .text	00000020 _isatty_r
0001a158 g     O .text	00000024 vtable for COculusHubMain
000164c4 g     F .text	00000012 .hidden __aeabi_dcmple
00019980 g     F .text	00000010 _getpid
00016400 g     F .text	0000007a .hidden __cmpdf2
00016a50  w    F .text	00000004 ISR_SWI
00019904 g     F .text	00000024 _lseek_r
00016a50  w    F .text	00000004 ISR_DMA9
00016c34  w    F .text	00000014 CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()
00016a50  w    F .text	00000004 ISR_I2S1_Tx
00015b7c g     F .text	000000c4 __cxa_demangle
00016400 g     F .text	0000007a .hidden __eqdf2
0001798c  w    F .text	00000010 CFifoBuffer<unsigned char>::CFifoBuffer(unsigned int)
00018174 g     F .text	0000002a CFlashData::ReadFind()
00016a50  w    F .text	00000004 ISR_FTM3
00016a50  w    F .text	00000004 ISR_PIT1
00016a50  w    F .text	00000004 ISR_SVCall
00016a50  w    F .text	00000004 ISR_ADC1
00015f70 g     F .text	0000005a .hidden __floatdidf
00018bd0 g     F .text	00000024 _kill_r
1fff0108 g     O .bss	00000008 CSysTick::_clkTicks
00016a50  w    F .text	00000004 ISR_USBDCD
00016a50  w    F .text	00000004 ISR_TSI0
00016a50  w    F .text	00000004 ISR_PORTA
00019872 g     F .text	00000024 __sseek
0001965c g     F .text	00000060 __sinit
000192b0 g     F .text	000000a8 __swbuf_r
00017a08 g     F .text	00000030 CFlash::CFlash()
00019630 g     F .text	0000002c __sfmoreglue
00016a50  w    F .text	00000004 ISR_CAN0_Bus_Off
1fff0370 g       ._user_heap_stack	00000000 __heap_addr
00017b70 g     F .text	00000050 CFlash::FlashEraseRange(unsigned int, unsigned int)
00016a50  w    F .text	00000004 ISR_UART5_RX_TX
000184c8 g     F .text	00000012 CTickTimer::~CTickTimer()
0001729c  w    F .text	0000000e CFifoBuffer<unsigned char>::~CFifoBuffer()
00017878 g     F .text	00000020 ISR_UART0_RX_TX
1fff00bc g     O .bss	00000004 CCom::Terminal
00016d58 g     F .text	0000015c COculusHub::COculusHub()
00016a50  w    F .text	00000004 ISR_Reserved59
000189c6 g     F .text	00000036 memmove
0001adec g       .ARM	00000000 __exidx_end
00016a50  w    F .text	00000004 ISR_RNGB
00016a50  w    F .text	00000004 ISR_Reserved8
00016a50  w    F .text	00000004 ISR_SDHC
00017a4c g     F .text	000000f0 CFlash::ExecuteCmd(unsigned char, unsigned char*)
00016a50  w    F .text	00000004 ISR_USB0
000163f0 g     F .text	0000008a .hidden __gtdf2
00016a50  w    F .text	00000004 ISR_PendableSrvReq
000185ac g     F .text	00000004 CTickTimer::SetEnabled(bool)
000178d8 g     F .text	0000009c CComUart::ReadByte()
00016a50  w    F .text	00000004 ISR_DMA12
00016a50  w    F .text	00000004 ISR_DMA3
00016a60 g     F .text	0000016c COculusHub::DoInitialiseGpio()
0001665c g     F .text	0000002e .hidden __aeabi_d2lz
000198c0 g     F .text	00000024 _fstat_r
00016a50  w    F .text	00000004 ISR_SPI0
1fff0348 g     O .bss	00000004 errno
0001ade4 g       .text	00000000 _etext
00017bcc g     F .text	00000084 CFlash::FlashProgramPhrase(unsigned int, unsigned char*)
00016a50  w    F .text	00000004 ISR_Read_Collision
0001648c g     F .text	00000010 .hidden __aeabi_cdcmple
00016a50  w    F .text	00000004 ISR_Reserved9
00010000 g     O .interrupts	000001e8 __vect_table
00016a50  w    F .text	00000004 ISR_MCM
00017d30 g     F .text	00000154 CMcg::Initialise(TMcgConfig*)
00016a50  w    F .text	00000004 ISR_ENET_Error
00016a50  w    F .text	00000004 ISR_UART0_ERR
00016a54 g     F .text	0000000c COculusHub::~COculusHub()
00016630 g     F .text	0000002c .hidden __aeabi_f2lz
000189b4 g     F .text	00000012 memcpy
0001647c g     F .text	00000020 .hidden __aeabi_cdrcmple
000195b4 g     F .text	00000032 _cleanup_r
00018d38 g     F .text	000001dc _svfprintf_r
00015f00 g     F .text	00000022 .hidden __floatsidf
0001728c g     F .text	00000008 CComUart::SetBaudRate(EUartBaud)
000163f8 g     F .text	00000082 .hidden __ltdf2
0001adec g       .init_array	00000000 __DTOR_END__
00016a50 g     F .text	00000004 ISR_Default
0001a2e0 g     O .text	00000038 vtable for CComUart
00017e90 g     F .text	0000003c CSysTick::GetTicks()
00016a50  w    F .text	00000004 ISR_CMP0
0001680c g     F .text	000001d0 COculusHubMain::DoRun()
00018958 g     F .text	00000010 malloc
1fff00e0 g     O .bss	00000004 CMcg::ClkFlexBusFreq
1fff00a0 g       .bss	00000000 __START_BSS
00018b70 g     F .text	00000050 _raise_r
00019970 g     F .text	00000010 _fstat
00016a50  w    F .text	00000004 ISR_CAN0_Wake_Up
00016a54 g     F .text	0000000c COculusHub::~COculusHub()
00019290 g     F .text	00000020 vsnprintf
0001a250  w    O .text	00000014 vtable for CDelegate1<void, TFlashProgActionParams*>
000167e4 g     F .text	00000014 COculusHubMain::~COculusHubMain()
00016550 g     F .text	00000040 .hidden __fixunsdfsi
00016a50  w    F .text	00000004 ISR_UART0_LON
00017304 g     F .text	000000ec CComUart::Close()
00018bf4 g     F .text	00000004 _getpid_r
00016a50  w    F .text	00000004 ISR_LPTMR0
00017424 g     F .text	00000012 CComUart::~CComUart()
1fffa370 g       ._user_heap_stack	00000000 __HeapLimit
1fff00a0 g       .bss	00000000 __bss_start__
00015ee0 g     F .text	0000001e .hidden __aeabi_ui2d
00018020 g     F .text	00000028 CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)
0001a318 g     O .text	00000010 vtable for CFlash
0001842c  w    F .text	0000000a bool CFlashData::WriteType<TFlashProgInfo>(TFlashProgInfo*)
00015c5c g     F .text	00000000 .hidden __aeabi_drsub
00018b50 g     F .text	00000020 _sbrk_r
00016a50  w    F .text	00000004 ISR_Reserved113
00016a50  w    F .text	00000004 ISR_FTM1
000183fc g     F .text	00000004 CFlashProg::SetHardwareInfo(TFlashProgHardwareInfo*)
0001a2b8 g     O .text	00000024 vtable for COculusHub
00016bcc g     F .text	00000002 COculusHub::FlashProgActionEvent(TFlashProgActionParams*)
0001993c g     F .text	00000024 _read_r
00016a50  w    F .text	00000004 ISR_CAN1_Bus_Off
00016c48 g     F .text	00000110 COculusHub::Run()
000164b0 g     F .text	00000012 .hidden __aeabi_dcmplt
00016a50  w    F .text	00000004 ISR_DMA4
0001a268  w    O .text	00000014 vtable for CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>
00015f24 g     F .text	0000003a .hidden __extendsfdf2
00016220 g     F .text	000001d0 .hidden __aeabi_ddiv
00016f54 g     F .text	0000005c __thumb_startup
00015c68 g     F .text	00000276 .hidden __adddf3
00016a50  w    F .text	00000004 ISR_DebugMonitor
0001ade4 g       .ARM	00000000 __exidx_start
00015fcc g     F .text	00000254 .hidden __aeabi_dmul
00017b3c g     F .text	00000034 CFlash::FlashEraseSector(unsigned int)
00019990 g     F .text	00000010 _isatty
00018610 g     F .text	00000008 operator delete(void*)
0001ad34 g     O .text	00000004 _global_impure_ptr
000197cc g     F .text	0000004c _realloc_r
0001890c g     F .text	0000004c __libc_init_array
00016d58 g     F .text	0000015c COculusHub::COculusHub()
000185b0 g     F .text	00000038 CTickTimer::SetFrequency(double)
00010464 g     F .text	00000000 _mainCRTStartup
00018808 g     F .text	00000006 std::__throw_length_error(char const*)
00018818 g     F .text	0000000e abort
00015ee0 g     F .text	0000001e .hidden __floatunsidf
00016a50  w    F .text	00000004 ISR_LVD_LVW
000184fc g     F .text	00000012 CTickTimer::Reset()
000167f8 g     F .text	00000012 COculusHubMain::~COculusHubMain()
000199d0 g     F .text	00000034 _sbrk
00016a50  w    F .text	00000004 ISR_UART2_RX_TX
00017130 g     F .text	00000038 CComUart::GetTxBufferCount()
00016a50  w    F .text	00000004 ISR_CMP2
00016a50  w    F .text	00000004 ISR_CAN1_Tx_Warning
00016a50  w    F .text	00000004 ISR_I2C1
00017740  w    F .text	00000032 CFifoBuffer<unsigned char>::Pop(unsigned char*)
00016a50  w    F .text	00000004 ISR_I2C0
0001adcc g     F .text	00000000 _init
00017294 g     F .text	00000008 CComUart::SetParity(EUartParity)
00016a50  w    F .text	00000004 ISR_CAN0_Tx_Warning
00017c50 g     F .text	0000009a CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)
00017f08 g     F .text	0000007c CSysTick::Initialise(double)
00018740 g     F .text	00000010 std::terminate()
00016590 g     F .text	0000009e .hidden __aeabi_d2f
00016a50  w    F .text	00000004 ISR_PIT2
00017f84 g     F .text	00000068 CSysTick::WaitMilliseconds(float)
000166d4 g     F .text	00000044 .hidden __aeabi_d2ulz
00000000  w      *UND*	00000000 __libc_fini_array
1fff0110 g     O .bss	00000200 CCrc16::_lut
00019290 g     F .text	00000020 vsniprintf
0001808c g     F .text	00000082 CFlashData::FindActiveRecord(unsigned int*)
00016a50  w    F .text	00000004 ISR_Reserved116
00016a50  w    F .text	00000004 ISR_USBHS
00016a50  w    F .text	00000004 ISR_CAN1_Error
00016a50  w    F .text	00000004 ISR_WDOG_EWM
00016500 g     F .text	0000004e .hidden __fixdfsi
00016a50  w    F .text	00000004 ISR_NFC
0001676c g     F .text	0000001c ISR_Hard_Fault
00016a50  w    F .text	00000004 ISR_MCG
1fff0318 g     O .bss	00000004 __new_handler
00018f14 g     F .text	0000001c write
00016bd0  w    F .text	0000000c CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()
00016a50  w    F .text	00000004 ISR_FTM2
000171ec g     F .text	0000009e CComUart::CalcBaudRate(unsigned int)
00017974  w    F .text	00000016 CFifoBuffer<unsigned char>::SetCapacity(unsigned int)
00015c68 g     F .text	00000276 .hidden __aeabi_dadd
00017010 g     F .text	0000001e CCom::Print(std::string, ...)
00016fb0 g     F .text	0000002a CCom::Write(unsigned char*, unsigned int)
000163f8 g     F .text	00000082 .hidden __ledf2
0001668c g     F .text	00000048 .hidden __aeabi_f2ulz
00015f60 g     F .text	0000006a .hidden __aeabi_ul2d
00016a50  w    F .text	00000004 ISR_CAN1_Rx_Warning
0001adac g     O .text	00000020 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
00016bd0  w    F .text	0000000c CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()
00016a50  w    F .text	00000004 ISR_RTC
1fff0370 g       ._user_heap_stack	00000000 end
00017cec g     F .text	00000042 CFlash::FlashVerifySectors(unsigned int, unsigned short, EFlashReadMargin)
00016eb8 g     F .text	00000050 __copy_rom_section
00016a50  w    F .text	00000004 ISR_ENET_Receive
00016a50  w    F .text	00000004 ISR_DMA1
00016a50  w    F .text	00000004 ISR_DMA2
00016c0c g     F .text	00000012 COculusHub::~COculusHub()
00016a50  w    F .text	00000004 ISR_PIT0
00018c7e g     F .text	000000b8 __ssputs_r
000169e0 g     F .text	0000006c COculusHubMain::COculusHubMain()
0001a328 g     O .text	00000010 vtable for CTickTimer
0001adec g       .init_array	00000000 __CTOR_LIST__
1fff031c  w    O .bss	00000010 std::string::_Rep::_S_empty_rep_storage
000164ec g     F .text	00000012 .hidden __aeabi_dcmpgt
00018978 g     F .text	0000001e memchr
00000000  w      *UND*	00000000 _printf_float
0001769c g     F .text	000000a4 CComUart::WriteByte(unsigned char)
1fff0000 g     F .data	00000038 CFlash::ExecuteCmdRam(FTFE_Type*)
1fff034c g       .bss	00000000 __bss_end__
00018a0c g     F .text	00000088 _free_r
000164d8 g     F .text	00000012 .hidden __aeabi_dcmpge
00016a50  w    F .text	00000004 ISR_DMA_Error
00000000  w      *UND*	00000000 __call_exitprocs
00017438 g     F .text	00000230 CComUart::Open()
00015c64 g     F .text	0000027a .hidden __aeabi_dsub
00010464 g     F .text	00000000 _start
000179e8 g     F .text	0000000c CFlash::~CFlash()
00018400  w    F .text	00000016 int CFlashData::ReadType<TFlashProgInfo>(TFlashProgInfo*)
00018438 g     F .text	0000000a CFlashProg::WriteInfo(TFlashProgInfo*)
00015f60 g     F .text	0000006a .hidden __floatundidf
000199b0 g     F .text	00000010 _lseek
00018618 g     F .text	00000014 __cxa_pure_virtual
00017e84 g     F .text	0000000c CSysTick::GetFrequency()
00016a50  w    F .text	00000004 ISR_I2S0_Rx
00016a50  w    F .text	00000004 ISR_CAN0_Error
00016a50  w    F .text	00000004 ISR_PORTF
00010400 g     O .cfmprotect	00000010 _cfm
00016a50  w    F .text	00000004 ISR_SPI1
00016a50  w    F .text	00000004 ISR_PORTE
00018c50 g     F .text	0000002e strncmp
00016a50  w    F .text	00000004 ISR_DMA13
00016750 g     F .text	0000001c ISR_NMI
00010000 g       .interrupts	00000000 __vector_table
000172b8 g     F .text	0000004c CComUart::Clear(bool, bool)
20000000 g       *ABS*	00000000 __SP_INIT
1fff0310 g     O .bss	00000001 g_irqLockCnt
00016a50  w    F .text	00000004 ISR_CMP1
00000000  w      *UND*	00000000 software_init_hook
00018b3c g     F .text	00000014 realloc
00016a50  w    F .text	00000004 ISR_RTC_Seconds
00017a08 g     F .text	00000030 CFlash::CFlash()
1fff00e4 g     O .bss	00000014 CMcg::Config
000198a0 g     F .text	00000020 _close_r
00015f00 g     F .text	00000022 .hidden __aeabi_i2d
00017bc0 g     F .text	0000000a CFlash::FlashEraseSectors(unsigned int, unsigned short)
00016630 g     F .text	0000002c .hidden __fixsfdi
000179f4 g     F .text	00000012 CFlash::~CFlash()
000167a4 g     F .text	0000001c ISR_Bus_Fault
00016a50  w    F .text	00000004 ISR_Reserved95
00018996 g     F .text	0000001e memcmp
00016a50  w    F .text	00000004 ISR_DMA15
00018444 g     F .text	00000076 CFlashProg::UpdateFirmwareInfo()
000167dc g     F .text	00000002 COculusHubMain::DoReboot()
0001937c g     F .text	000000dc __swsetup_r
000170a0 g     F .text	00000058 CComUart::Flush()
00016220 g     F .text	000001d0 .hidden __divdf3
000196bc g     F .text	00000074 __sfp
0001923c g     F .text	00000052 _vsnprintf_r
00016f08 g     F .text	0000004c __copy_rom_sections_to_ram
0001716c g     F .text	0000007e CComUart::CalcBaudValue(EUartBaud)
00015fcc g     F .text	00000254 .hidden __muldf3
00019818 g     F .text	00000022 __sread
00018802 g     F .text	00000006 std::__throw_logic_error(char const*)
0001798c  w    F .text	00000010 CFifoBuffer<unsigned char>::CFifoBuffer(unsigned int)
00000000 g       *ABS*	00000000 ___m_data_20000000_ROMSize
00019560 g     F .text	00000054 _fflush_r
0001ad6c g     O .text	00000020 __sf_fake_stdin
00016a50  w    F .text	00000004 ISR_CAN0_ORed_Message_buffer
00016a50  w    F .text	00000004 ISR_ADC3
000189fc g     F .text	00000010 memset
00016a50  w    F .text	00000004 ISR_DMA7
0001672c g     F .text	00000024 main
000179e8 g     F .text	0000000c CFlash::~CFlash()
000183ac g     F .text	0000001c CFlashProg::ProgReset()
00016a50  w    F .text	00000004 ISR_DMA8
1fff00d8 g     O .bss	00000004 CMcg::ClkFlashFreq
00016a50  w    F .text	00000004 ISR_I2S0_Tx
00019896 g     F .text	00000008 __sclose
0001862c  w    F .text	00000014 std::string::_M_copy(char*, char const*, unsigned int)
00016a50  w    F .text	00000004 ISR_FTM0
00016bdc  w    F .text	0000000c CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()
00016590 g     F .text	0000009e .hidden __truncdfsf2
000167c0 g     F .text	0000001c ISR_Usage_Fault
00018a94 g     F .text	000000a8 _malloc_r
1fff00c0 g     O .bss	00000018 CComUart::Uart
00016a50  w    F .text	00000004 ISR_UART1_ERR
00016a50  w    F .text	00000004 ISR_ADC2
00015f70 g     F .text	0000005a .hidden __aeabi_l2d
0001729c  w    F .text	0000000e CFifoBuffer<unsigned char>::~CFifoBuffer()
00016a50  w    F .text	00000004 ISR_LLWU
00000000  w      *UND*	00000000 hardware_init_hook
00016a50  w    F .text	00000004 ISR_DMA14
00016a50  w    F .text	00000004 ISR_CMP3
0001668c g     F .text	00000048 .hidden __fixunssfdi
0001adec g       .init_array	00000000 __CTOR_END__
00018418 g     F .text	00000012 CFlashProg::ReadInfo(TFlashProgInfo*)
00016a50  w    F .text	00000004 ISR_Reserved109
00016a50  w    F .text	00000004 ISR_Reserved102
00016718 g     F .text	00000000 strcmp
00016a50  w    F .text	00000004 ISR_DAC0
00018640  w    F .text	0000000a std::string::_S_copy_chars(char*, char const*, char const*)
00016a50  w    F .text	00000004 ISR_DAC1
000169e0 g     F .text	0000006c COculusHubMain::COculusHubMain()
000181a0 g     F .text	0000004a CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)
0001adec g       .init_array	00000000 __DTOR_LIST__
00016a50  w    F .text	00000004 ISR_ENET_Transmit
1fff034c g       .bss	00000000 __END_BSS
0001870c  w    F .text	0000002a std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
000166d4 g     F .text	00000044 .hidden __fixunsdfdi
00016400 g     F .text	0000007a .hidden __nedf2
0001add8 g     F .text	00000000 _fini
00018bf8 g     F .text	00000048 sprintf
000181a0 g     F .text	0000004a CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)
0001665c g     F .text	0000002e .hidden __fixdfdi
0001ae94 g       .fini_array	00000000 _romp_at
00000000  w      *UND*	00000000 atexit
00017fec g     F .text	00000034 ISR_SysTick
1fff00f8 g     O .bss	00000004 CMcg::ClkSysFreq
00019358 g     F .text	00000024 _write_r
00017ecc g     F .text	0000003c CSysTick::SetTicks(long long)
00016be8  w    F .text	00000022 CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::Call(TFlashProgActionParams*)
00016bdc  w    F .text	0000000c CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()
00017168 g     F .text	00000004 CComUart::IsOpen()
00018f30 g     F .text	000000e4 _printf_common
1fff009c g     O .data	00000004 _impure_ptr
00016a50  w    F .text	00000004 ISR_UART2_ERR
00016fdc g     F .text	00000034 CCom::PrintArgs(char*, std::__va_list)
00019458 g     F .text	00000106 __sflush_r
00017a38 g     F .text	00000012 CFlash::CheckAddress(unsigned int&, unsigned int)
000184dc g     F .text	00000020 CTickTimer::CTickTimer(bool)
000167e4 g     F .text	00000014 COculusHubMain::~COculusHubMain()
00018d38 g     F .text	000001dc _svfiprintf_r
00016a50  w    F .text	00000004 ISR_PORTB
00017030 g     F .text	00000070 CComUart::DoTxMode(bool, bool)
00016a50  w    F .text	00000004 ISR_ENET_1588_Timer
000173f0 g     F .text	00000034 CComUart::~CComUart()
00016a50  w    F .text	00000004 ISR_UART4_ERR
000167e0 g     F .text	00000002 COculusHubMain::FlashProgActionEvent(TFlashProgActionParams*)
00016a50  w    F .text	00000004 ISR_DMA11
00017774 g     F .text	00000102 CComUart::DoISR()
0001923c g     F .text	00000052 _vsniprintf_r
00016a50  w    F .text	00000004 ISR_DMA0
00016a50  w    F .text	00000004 ISR_PORTC
00016a50  w    F .text	00000004 ISR_PIT3
00016550 g     F .text	00000040 .hidden __aeabi_d2uiz
00016a50  w    F .text	00000004 ISR_Reserved7
00016a50  w    F .text	00000004 ISR_UART5_ERR
000178b8 g     F .text	00000020 ISR_UART3_RX_TX
00017668  w    F .text	00000034 CFifoBuffer<unsigned char>::Push(unsigned char)
00017898 g     F .text	00000020 ISR_UART1_RX_TX
0001ae94 g       .fini_array	00000000 __S_romp
000170f8 g     F .text	00000038 CComUart::GetRxBufferCount()
20000000 g       *ABS*	00000000 __stack
1fff0038 g     O .data	00000004 __cxxabiv1::__terminate_handler
00015c40 g     F .text	0000001c __gcclibcxx_demangle_callback
000172ac  w    F .text	0000000a CFifoBuffer<unsigned char>::Clear()
000184bc g     F .text	0000000c CTickTimer::~CTickTimer()
0001649c g     F .text	00000012 .hidden __aeabi_dcmpeq
000184bc g     F .text	0000000c CTickTimer::~CTickTimer()
00019a04 g     F .text	00000010 _write
00016a50  w    F .text	00000004 ISR_CAN1_Wake_Up
00016a50  w    F .text	00000004 ISR_UART4_RX_TX
00018850 g     F .text	000000a8 _fputs_r
00016a50  w    F .text	00000004 ISR_Reserved10
000181ec g     F .text	000001c0 CFlashData::Write(void*, unsigned short)
00016788 g     F .text	0000001c ISR_Mem_Manage_Fault
0001983a g     F .text	00000038 __swrite
000185e8 g     F .text	00000028 operator new(unsigned int)
00016a50  w    F .text	00000004 ISR_PDB0
00018110 g     F .text	00000062 CFlashData::Read(void*, unsigned short)
000183c8 g     F .text	00000032 CFlashProg::CFlashProg(CFlash*, unsigned int, unsigned int)
00018828 g     F .text	00000028 exit
1fff00dc g     O .bss	00000004 CMcg::ClkIntBusFreq
00018510 g     F .text	0000009c CTickTimer::Poll()
00016500 g     F .text	0000004e .hidden __aeabi_d2iz
00018736 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00016a50  w    F .text	00000004 ISR_FTFE
000199a0 g     F .text	00000010 _kill
00016a50  w    F .text	00000004 ISR_I2S1_Rx
0001ad8c g     O .text	00000020 __sf_fake_stdout
00018bf8 g     F .text	00000048 siprintf
1fff0314 g     O .bss	00000004 CApp::Application
000199c0 g     F .text	00000010 _read
00016a50  w    F .text	00000004 ISR_Reserved115
00019a14 g     F .text	00000002 _exit
00018664  w    F .text	00000058 std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)
00016a50  w    F .text	00000004 ISR_CAN0_Rx_Warning
0001864c  w    F .text	00000018 std::string::_Rep::_M_set_length_and_sharable(unsigned int)
00016a50  w    F .text	00000004 ISR_CAN1_ORed_Message_buffer
1fff0100 g     O .bss	00000008 CSysTick::_clkFrequency
00018810 g     F .text	00000008 __cxa_get_globals
00016a50  w    F .text	00000004 ISR_ADC0
00019730 g     F .text	0000009c __smakebuf_r
000183c8 g     F .text	00000032 CFlashProg::CFlashProg(CFlash*, unsigned int, unsigned int)
00016c20  w    F .text	00000014 CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()
00018c40 g     F .text	00000010 strlen
00019014 g     F .text	00000228 _printf_i
00016a50  w    F .text	00000004 ISR_CMT
0001648c g     F .text	00000010 .hidden __aeabi_cdcmpeq
000163f0 g     F .text	0000008a .hidden __gedf2
1fff033c g     O .bss	00000004 __malloc_sbrk_start
000187e8 g     F .text	0000001a __cxa_current_exception_type
000186c0  w    F .text	0000004c char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)
00015f24 g     F .text	0000003a .hidden __aeabi_f2d
000188f8 g     F .text	00000014 fputs
00016a50  w    F .text	00000004 ISR_UART3_ERR
00018048 g     F .text	00000022 CFlashData::Erase()
1fff0340 g     O .bss	00000004 __malloc_free_list
00016a50  w    F .text	00000004 ISR_DMA10
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00015c64 g     F .text	0000027a .hidden __subdf3
000186bc  w    F .text	00000004 std::string::_Rep::_M_destroy(std::allocator<char> const&)
0001870c  w    F .text	0000002a std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
00016a50  w    F .text	00000004 ISR_SPI2
000000a0 g       *ABS*	00000000 ___data_size
000173f0 g     F .text	00000034 CComUart::~CComUart()
00016a50  w    F .text	00000004 ISR_DMA5
00016a50  w    F .text	00000004 ISR_DMA6
00000000  w      *UND*	00000000 __register_frame_info
0001799c g     F .text	0000004c CComUart::CComUart(unsigned char, unsigned int, unsigned int)
000184dc g     F .text	00000020 CTickTimer::CTickTimer(bool)
0001799c g     F .text	0000004c CComUart::CComUart(unsigned char, unsigned int, unsigned int)
00019960 g     F .text	00000010 _close
00018bc0 g     F .text	00000010 raise
00018968 g     F .text	00000010 free
00018750 g     F .text	00000098 __gnu_cxx::__verbose_terminate_handler()



Disassembly of section .text:

00010410 <__do_global_dtors_aux>:
$t():
   10410:	b510      	push	{r4, lr}
   10412:	4c05      	ldr	r4, [pc, #20]	; (10428 <__do_global_dtors_aux+0x18>)
   10414:	7823      	ldrb	r3, [r4, #0]
   10416:	b933      	cbnz	r3, 10426 <__do_global_dtors_aux+0x16>
   10418:	4b04      	ldr	r3, [pc, #16]	; (1042c <__do_global_dtors_aux+0x1c>)
   1041a:	b113      	cbz	r3, 10422 <__do_global_dtors_aux+0x12>
   1041c:	4804      	ldr	r0, [pc, #16]	; (10430 <__do_global_dtors_aux+0x20>)
   1041e:	f3af 8000 	nop.w
   10422:	2301      	movs	r3, #1
   10424:	7023      	strb	r3, [r4, #0]
   10426:	bd10      	pop	{r4, pc}
$d():
   10428:	1fff00a0 	.word	0x1fff00a0
   1042c:	00000000 	.word	0x00000000
   10430:	0001adcc 	.word	0x0001adcc

00010434 <frame_dummy>:
$t():
   10434:	b508      	push	{r3, lr}
   10436:	4b06      	ldr	r3, [pc, #24]	; (10450 <frame_dummy+0x1c>)
   10438:	b11b      	cbz	r3, 10442 <frame_dummy+0xe>
   1043a:	4806      	ldr	r0, [pc, #24]	; (10454 <frame_dummy+0x20>)
   1043c:	4906      	ldr	r1, [pc, #24]	; (10458 <frame_dummy+0x24>)
   1043e:	f3af 8000 	nop.w
   10442:	4806      	ldr	r0, [pc, #24]	; (1045c <frame_dummy+0x28>)
   10444:	6803      	ldr	r3, [r0, #0]
   10446:	b113      	cbz	r3, 1044e <frame_dummy+0x1a>
   10448:	4b05      	ldr	r3, [pc, #20]	; (10460 <frame_dummy+0x2c>)
   1044a:	b103      	cbz	r3, 1044e <frame_dummy+0x1a>
   1044c:	4798      	blx	r3
   1044e:	bd08      	pop	{r3, pc}
$d():
   10450:	00000000 	.word	0x00000000
   10454:	0001adcc 	.word	0x0001adcc
   10458:	1fff00a4 	.word	0x1fff00a4
   1045c:	1fff00a0 	.word	0x1fff00a0
   10460:	00000000 	.word	0x00000000

00010464 <_mainCRTStartup>:
$t():
   10464:	4b15      	ldr	r3, [pc, #84]	; (104bc <_mainCRTStartup+0x58>)
   10466:	2b00      	cmp	r3, #0
   10468:	bf08      	it	eq
   1046a:	4b13      	ldreq	r3, [pc, #76]	; (104b8 <_mainCRTStartup+0x54>)
   1046c:	469d      	mov	sp, r3
   1046e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
   10472:	2100      	movs	r1, #0
   10474:	468b      	mov	fp, r1
   10476:	460f      	mov	r7, r1
   10478:	4813      	ldr	r0, [pc, #76]	; (104c8 <_mainCRTStartup+0x64>)
   1047a:	4a14      	ldr	r2, [pc, #80]	; (104cc <_mainCRTStartup+0x68>)
   1047c:	1a12      	subs	r2, r2, r0
   1047e:	f008 fabd 	bl	189fc <memset>
   10482:	4b0f      	ldr	r3, [pc, #60]	; (104c0 <_mainCRTStartup+0x5c>)
   10484:	2b00      	cmp	r3, #0
   10486:	d000      	beq.n	1048a <_mainCRTStartup+0x26>
   10488:	4798      	blx	r3
   1048a:	4b0e      	ldr	r3, [pc, #56]	; (104c4 <_mainCRTStartup+0x60>)
   1048c:	2b00      	cmp	r3, #0
   1048e:	d000      	beq.n	10492 <_mainCRTStartup+0x2e>
   10490:	4798      	blx	r3
   10492:	2000      	movs	r0, #0
   10494:	2100      	movs	r1, #0
   10496:	0004      	movs	r4, r0
   10498:	000d      	movs	r5, r1
   1049a:	480d      	ldr	r0, [pc, #52]	; (104d0 <_mainCRTStartup+0x6c>)
   1049c:	2800      	cmp	r0, #0
   1049e:	d002      	beq.n	104a6 <_mainCRTStartup+0x42>
   104a0:	480c      	ldr	r0, [pc, #48]	; (104d4 <_mainCRTStartup+0x70>)
   104a2:	f3af 8000 	nop.w
   104a6:	f008 fa31 	bl	1890c <__libc_init_array>
   104aa:	0020      	movs	r0, r4
   104ac:	0029      	movs	r1, r5
   104ae:	f006 f93d 	bl	1672c <main>
   104b2:	f008 f9b9 	bl	18828 <exit>
   104b6:	bf00      	nop
$d():
   104b8:	00080000 	.word	0x00080000
   104bc:	20000000 	.word	0x20000000
	...
   104c8:	1fff00a0 	.word	0x1fff00a0
   104cc:	1fff034c 	.word	0x1fff034c
	...

000104d8 <d_make_comp>:
d_make_comp():
   104d8:	b470      	push	{r4, r5, r6}
   104da:	1e4c      	subs	r4, r1, #1
   104dc:	2c4a      	cmp	r4, #74	; 0x4a
   104de:	d82c      	bhi.n	1053a <d_make_comp+0x62>
   104e0:	e8df f004 	tbb	[pc, r4]
   104e4:	3c3c3c3c 	.word	0x3c3c3c3c
   104e8:	2b2b2b2b 	.word	0x2b2b2b2b
   104ec:	263c2626 	.word	0x263c2626
   104f0:	26262626 	.word	0x26262626
   104f4:	26262626 	.word	0x26262626
   104f8:	2b262626 	.word	0x2b262626
   104fc:	27272727 	.word	0x27272727
   10500:	27272727 	.word	0x27272727
   10504:	2626263c 	.word	0x2626263c
   10508:	262b2626 	.word	0x262b2626
   1050c:	2b3c3d27 	.word	0x2b3c3d27
   10510:	3d27273c 	.word	0x3d27273c
   10514:	26262b2b 	.word	0x26262b2b
   10518:	3c3c3c3c 	.word	0x3c3c3c3c
   1051c:	3c3c263c 	.word	0x3c3c263c
   10520:	2b2b3c26 	.word	0x2b2b3c26
   10524:	2b262626 	.word	0x2b262626
   10528:	26262b2b 	.word	0x26262b2b
   1052c:	3c26      	.short	0x3c26
   1052e:	3c          	.byte	0x3c
   1052f:	00          	.byte	0x00
   10530:	b1ca      	cbz	r2, 10566 <d_make_comp+0x8e>
   10532:	6944      	ldr	r4, [r0, #20]
   10534:	6985      	ldr	r5, [r0, #24]
   10536:	42ac      	cmp	r4, r5
   10538:	db02      	blt.n	10540 <d_make_comp+0x68>
   1053a:	2000      	movs	r0, #0
   1053c:	bc70      	pop	{r4, r5, r6}
   1053e:	4770      	bx	lr
   10540:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   10544:	6906      	ldr	r6, [r0, #16]
   10546:	3401      	adds	r4, #1
   10548:	00ad      	lsls	r5, r5, #2
   1054a:	6144      	str	r4, [r0, #20]
   1054c:	1974      	adds	r4, r6, r5
   1054e:	d00c      	beq.n	1056a <d_make_comp+0x92>
   10550:	5571      	strb	r1, [r6, r5]
   10552:	6062      	str	r2, [r4, #4]
   10554:	60a3      	str	r3, [r4, #8]
   10556:	4620      	mov	r0, r4
   10558:	bc70      	pop	{r4, r5, r6}
   1055a:	4770      	bx	lr
   1055c:	b11a      	cbz	r2, 10566 <d_make_comp+0x8e>
   1055e:	2b00      	cmp	r3, #0
   10560:	d1e7      	bne.n	10532 <d_make_comp+0x5a>
   10562:	4618      	mov	r0, r3
   10564:	e7ea      	b.n	1053c <d_make_comp+0x64>
   10566:	4610      	mov	r0, r2
   10568:	e7e8      	b.n	1053c <d_make_comp+0x64>
   1056a:	4620      	mov	r0, r4
   1056c:	e7e6      	b.n	1053c <d_make_comp+0x64>
$t():
   1056e:	bf00      	nop

00010570 <d_make_name>:
d_make_name():
   10570:	b430      	push	{r4, r5}
   10572:	6943      	ldr	r3, [r0, #20]
   10574:	6984      	ldr	r4, [r0, #24]
   10576:	42a3      	cmp	r3, r4
   10578:	da09      	bge.n	1058e <d_make_name+0x1e>
   1057a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1057e:	6905      	ldr	r5, [r0, #16]
   10580:	3301      	adds	r3, #1
   10582:	00a4      	lsls	r4, r4, #2
   10584:	6143      	str	r3, [r0, #20]
   10586:	192b      	adds	r3, r5, r4
   10588:	d001      	beq.n	1058e <d_make_name+0x1e>
   1058a:	b101      	cbz	r1, 1058e <d_make_name+0x1e>
   1058c:	b912      	cbnz	r2, 10594 <d_make_name+0x24>
   1058e:	2000      	movs	r0, #0
   10590:	bc30      	pop	{r4, r5}
   10592:	4770      	bx	lr
   10594:	2000      	movs	r0, #0
   10596:	5528      	strb	r0, [r5, r4]
   10598:	6059      	str	r1, [r3, #4]
   1059a:	609a      	str	r2, [r3, #8]
   1059c:	4618      	mov	r0, r3
   1059e:	bc30      	pop	{r4, r5}
   105a0:	4770      	bx	lr
   105a2:	bf00      	nop

000105a4 <d_cv_qualifiers>:
d_cv_qualifiers():
   105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105a8:	68c5      	ldr	r5, [r0, #12]
   105aa:	4604      	mov	r4, r0
   105ac:	4688      	mov	r8, r1
   105ae:	4617      	mov	r7, r2
   105b0:	782b      	ldrb	r3, [r5, #0]
   105b2:	460e      	mov	r6, r1
   105b4:	e017      	b.n	105e6 <d_cv_qualifiers+0x42>
   105b6:	2b56      	cmp	r3, #86	; 0x56
   105b8:	d022      	beq.n	10600 <d_cv_qualifiers+0x5c>
   105ba:	2b4b      	cmp	r3, #75	; 0x4b
   105bc:	d12d      	bne.n	1061a <d_cv_qualifiers+0x76>
   105be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   105c0:	3501      	adds	r5, #1
   105c2:	2f00      	cmp	r7, #0
   105c4:	f103 0306 	add.w	r3, r3, #6
   105c8:	60e5      	str	r5, [r4, #12]
   105ca:	6323      	str	r3, [r4, #48]	; 0x30
   105cc:	bf0c      	ite	eq
   105ce:	211b      	moveq	r1, #27
   105d0:	211e      	movne	r1, #30
   105d2:	2200      	movs	r2, #0
   105d4:	4613      	mov	r3, r2
   105d6:	4620      	mov	r0, r4
   105d8:	f7ff ff7e 	bl	104d8 <d_make_comp>
   105dc:	6030      	str	r0, [r6, #0]
   105de:	b1d0      	cbz	r0, 10616 <d_cv_qualifiers+0x72>
   105e0:	68e5      	ldr	r5, [r4, #12]
   105e2:	782b      	ldrb	r3, [r5, #0]
   105e4:	1d06      	adds	r6, r0, #4
   105e6:	2b72      	cmp	r3, #114	; 0x72
   105e8:	d1e5      	bne.n	105b6 <d_cv_qualifiers+0x12>
   105ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   105ec:	3501      	adds	r5, #1
   105ee:	2f00      	cmp	r7, #0
   105f0:	f103 0309 	add.w	r3, r3, #9
   105f4:	60e5      	str	r5, [r4, #12]
   105f6:	6323      	str	r3, [r4, #48]	; 0x30
   105f8:	bf0c      	ite	eq
   105fa:	2119      	moveq	r1, #25
   105fc:	211c      	movne	r1, #28
   105fe:	e7e8      	b.n	105d2 <d_cv_qualifiers+0x2e>
   10600:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10602:	3501      	adds	r5, #1
   10604:	2f00      	cmp	r7, #0
   10606:	f103 0309 	add.w	r3, r3, #9
   1060a:	60e5      	str	r5, [r4, #12]
   1060c:	6323      	str	r3, [r4, #48]	; 0x30
   1060e:	bf0c      	ite	eq
   10610:	211a      	moveq	r1, #26
   10612:	211d      	movne	r1, #29
   10614:	e7dd      	b.n	105d2 <d_cv_qualifiers+0x2e>
   10616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1061a:	b9bf      	cbnz	r7, 1064c <d_cv_qualifiers+0xa8>
   1061c:	2b46      	cmp	r3, #70	; 0x46
   1061e:	d115      	bne.n	1064c <d_cv_qualifiers+0xa8>
   10620:	4546      	cmp	r6, r8
   10622:	d013      	beq.n	1064c <d_cv_qualifiers+0xa8>
   10624:	241d      	movs	r4, #29
   10626:	201e      	movs	r0, #30
   10628:	211c      	movs	r1, #28
   1062a:	e008      	b.n	1063e <d_cv_qualifiers+0x9a>
   1062c:	2a1b      	cmp	r2, #27
   1062e:	d010      	beq.n	10652 <d_cv_qualifiers+0xae>
   10630:	2a19      	cmp	r2, #25
   10632:	d100      	bne.n	10636 <d_cv_qualifiers+0x92>
   10634:	7019      	strb	r1, [r3, #0]
   10636:	f103 0804 	add.w	r8, r3, #4
   1063a:	4546      	cmp	r6, r8
   1063c:	d006      	beq.n	1064c <d_cv_qualifiers+0xa8>
   1063e:	f8d8 3000 	ldr.w	r3, [r8]
   10642:	781a      	ldrb	r2, [r3, #0]
   10644:	2a1a      	cmp	r2, #26
   10646:	d1f1      	bne.n	1062c <d_cv_qualifiers+0x88>
   10648:	701c      	strb	r4, [r3, #0]
   1064a:	e7f4      	b.n	10636 <d_cv_qualifiers+0x92>
   1064c:	4630      	mov	r0, r6
   1064e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10652:	7018      	strb	r0, [r3, #0]
   10654:	e7ef      	b.n	10636 <d_cv_qualifiers+0x92>
   10656:	bf00      	nop

00010658 <d_ref_qualifier>:
d_ref_qualifier():
   10658:	b410      	push	{r4}
   1065a:	68c4      	ldr	r4, [r0, #12]
   1065c:	7823      	ldrb	r3, [r4, #0]
   1065e:	2b52      	cmp	r3, #82	; 0x52
   10660:	460a      	mov	r2, r1
   10662:	d010      	beq.n	10686 <d_ref_qualifier+0x2e>
   10664:	2b4f      	cmp	r3, #79	; 0x4f
   10666:	d003      	beq.n	10670 <d_ref_qualifier+0x18>
   10668:	4608      	mov	r0, r1
   1066a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1066e:	4770      	bx	lr
   10670:	6b03      	ldr	r3, [r0, #48]	; 0x30
   10672:	3303      	adds	r3, #3
   10674:	6303      	str	r3, [r0, #48]	; 0x30
   10676:	2120      	movs	r1, #32
   10678:	3401      	adds	r4, #1
   1067a:	60c4      	str	r4, [r0, #12]
   1067c:	2300      	movs	r3, #0
   1067e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10682:	f7ff bf29 	b.w	104d8 <d_make_comp>
   10686:	6b03      	ldr	r3, [r0, #48]	; 0x30
   10688:	3302      	adds	r3, #2
   1068a:	6303      	str	r3, [r0, #48]	; 0x30
   1068c:	211f      	movs	r1, #31
   1068e:	e7f3      	b.n	10678 <d_ref_qualifier+0x20>

00010690 <d_clone_suffix>:
d_clone_suffix():
   10690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10694:	460f      	mov	r7, r1
   10696:	68c1      	ldr	r1, [r0, #12]
   10698:	780c      	ldrb	r4, [r1, #0]
   1069a:	2c2e      	cmp	r4, #46	; 0x2e
   1069c:	4680      	mov	r8, r0
   1069e:	d027      	beq.n	106f0 <d_clone_suffix+0x60>
   106a0:	460b      	mov	r3, r1
   106a2:	2c2e      	cmp	r4, #46	; 0x2e
   106a4:	d114      	bne.n	106d0 <d_clone_suffix+0x40>
   106a6:	785c      	ldrb	r4, [r3, #1]
   106a8:	3c30      	subs	r4, #48	; 0x30
   106aa:	2c09      	cmp	r4, #9
   106ac:	d810      	bhi.n	106d0 <d_clone_suffix+0x40>
   106ae:	789c      	ldrb	r4, [r3, #2]
   106b0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   106b4:	2a09      	cmp	r2, #9
   106b6:	f103 0002 	add.w	r0, r3, #2
   106ba:	d817      	bhi.n	106ec <d_clone_suffix+0x5c>
   106bc:	1cdd      	adds	r5, r3, #3
   106be:	462b      	mov	r3, r5
   106c0:	3501      	adds	r5, #1
   106c2:	781c      	ldrb	r4, [r3, #0]
   106c4:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   106c8:	2e09      	cmp	r6, #9
   106ca:	d9f8      	bls.n	106be <d_clone_suffix+0x2e>
   106cc:	2c2e      	cmp	r4, #46	; 0x2e
   106ce:	d0ea      	beq.n	106a6 <d_clone_suffix+0x16>
   106d0:	1a5a      	subs	r2, r3, r1
   106d2:	f8c8 300c 	str.w	r3, [r8, #12]
   106d6:	4640      	mov	r0, r8
   106d8:	f7ff ff4a 	bl	10570 <d_make_name>
   106dc:	463a      	mov	r2, r7
   106de:	4603      	mov	r3, r0
   106e0:	214b      	movs	r1, #75	; 0x4b
   106e2:	4640      	mov	r0, r8
   106e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   106e8:	f7ff bef6 	b.w	104d8 <d_make_comp>
   106ec:	4603      	mov	r3, r0
   106ee:	e7d8      	b.n	106a2 <d_clone_suffix+0x12>
   106f0:	784b      	ldrb	r3, [r1, #1]
   106f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   106f6:	2a19      	cmp	r2, #25
   106f8:	d80a      	bhi.n	10710 <d_clone_suffix+0x80>
   106fa:	1c8a      	adds	r2, r1, #2
   106fc:	4613      	mov	r3, r2
   106fe:	3201      	adds	r2, #1
   10700:	781c      	ldrb	r4, [r3, #0]
   10702:	f1a4 0061 	sub.w	r0, r4, #97	; 0x61
   10706:	2819      	cmp	r0, #25
   10708:	d9f8      	bls.n	106fc <d_clone_suffix+0x6c>
   1070a:	2c5f      	cmp	r4, #95	; 0x5f
   1070c:	d0f6      	beq.n	106fc <d_clone_suffix+0x6c>
   1070e:	e7c8      	b.n	106a2 <d_clone_suffix+0x12>
   10710:	2b5f      	cmp	r3, #95	; 0x5f
   10712:	d1c5      	bne.n	106a0 <d_clone_suffix+0x10>
   10714:	e7f1      	b.n	106fa <d_clone_suffix+0x6a>
   10716:	bf00      	nop

00010718 <d_substitution>:
d_substitution():
   10718:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   1071c:	68c2      	ldr	r2, [r0, #12]
   1071e:	7813      	ldrb	r3, [r2, #0]
   10720:	2b53      	cmp	r3, #83	; 0x53
   10722:	d003      	beq.n	1072c <d_substitution+0x14>
   10724:	2000      	movs	r0, #0
   10726:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   1072a:	4770      	bx	lr
   1072c:	1c53      	adds	r3, r2, #1
   1072e:	60c3      	str	r3, [r0, #12]
   10730:	7853      	ldrb	r3, [r2, #1]
   10732:	b1ab      	cbz	r3, 10760 <d_substitution+0x48>
   10734:	1c93      	adds	r3, r2, #2
   10736:	60c3      	str	r3, [r0, #12]
   10738:	7853      	ldrb	r3, [r2, #1]
   1073a:	2b5f      	cmp	r3, #95	; 0x5f
   1073c:	d152      	bne.n	107e4 <d_substitution+0xcc>
   1073e:	2100      	movs	r1, #0
   10740:	6a03      	ldr	r3, [r0, #32]
   10742:	4299      	cmp	r1, r3
   10744:	d2ee      	bcs.n	10724 <d_substitution+0xc>
   10746:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10748:	69c2      	ldr	r2, [r0, #28]
   1074a:	3301      	adds	r3, #1
   1074c:	6283      	str	r3, [r0, #40]	; 0x28
   1074e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   10752:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   10756:	4770      	bx	lr
   10758:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1075c:	2a19      	cmp	r2, #25
   1075e:	d946      	bls.n	107ee <d_substitution+0xd6>
   10760:	6882      	ldr	r2, [r0, #8]
   10762:	0712      	lsls	r2, r2, #28
   10764:	d46a      	bmi.n	1083c <d_substitution+0x124>
   10766:	2900      	cmp	r1, #0
   10768:	d16a      	bne.n	10840 <d_substitution+0x128>
   1076a:	4a3f      	ldr	r2, [pc, #252]	; (10868 <d_substitution+0x150>)
   1076c:	f102 05c4 	add.w	r5, r2, #196	; 0xc4
   10770:	e002      	b.n	10778 <d_substitution+0x60>
   10772:	321c      	adds	r2, #28
   10774:	42aa      	cmp	r2, r5
   10776:	d0d5      	beq.n	10724 <d_substitution+0xc>
   10778:	7814      	ldrb	r4, [r2, #0]
   1077a:	429c      	cmp	r4, r3
   1077c:	d1f9      	bne.n	10772 <d_substitution+0x5a>
   1077e:	6955      	ldr	r5, [r2, #20]
   10780:	2d00      	cmp	r5, #0
   10782:	d06a      	beq.n	1085a <d_substitution+0x142>
   10784:	6943      	ldr	r3, [r0, #20]
   10786:	6984      	ldr	r4, [r0, #24]
   10788:	f8d2 8018 	ldr.w	r8, [r2, #24]
   1078c:	42a3      	cmp	r3, r4
   1078e:	da62      	bge.n	10856 <d_substitution+0x13e>
   10790:	eb03 0743 	add.w	r7, r3, r3, lsl #1
   10794:	f8d0 c010 	ldr.w	ip, [r0, #16]
   10798:	00bf      	lsls	r7, r7, #2
   1079a:	3301      	adds	r3, #1
   1079c:	eb1c 0607 	adds.w	r6, ip, r7
   107a0:	6143      	str	r3, [r0, #20]
   107a2:	d05f      	beq.n	10864 <d_substitution+0x14c>
   107a4:	f04f 0918 	mov.w	r9, #24
   107a8:	f80c 9007 	strb.w	r9, [ip, r7]
   107ac:	4637      	mov	r7, r6
   107ae:	6075      	str	r5, [r6, #4]
   107b0:	f8c6 8008 	str.w	r8, [r6, #8]
   107b4:	62c7      	str	r7, [r0, #44]	; 0x2c
   107b6:	2900      	cmp	r1, #0
   107b8:	d04a      	beq.n	10850 <d_substitution+0x138>
   107ba:	68d5      	ldr	r5, [r2, #12]
   107bc:	6912      	ldr	r2, [r2, #16]
   107be:	6b01      	ldr	r1, [r0, #48]	; 0x30
   107c0:	42a3      	cmp	r3, r4
   107c2:	4411      	add	r1, r2
   107c4:	6301      	str	r1, [r0, #48]	; 0x30
   107c6:	daad      	bge.n	10724 <d_substitution+0xc>
   107c8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   107cc:	6904      	ldr	r4, [r0, #16]
   107ce:	3301      	adds	r3, #1
   107d0:	0089      	lsls	r1, r1, #2
   107d2:	6143      	str	r3, [r0, #20]
   107d4:	1863      	adds	r3, r4, r1
   107d6:	d043      	beq.n	10860 <d_substitution+0x148>
   107d8:	2018      	movs	r0, #24
   107da:	5460      	strb	r0, [r4, r1]
   107dc:	4618      	mov	r0, r3
   107de:	605d      	str	r5, [r3, #4]
   107e0:	609a      	str	r2, [r3, #8]
   107e2:	e7a0      	b.n	10726 <d_substitution+0xe>
   107e4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   107e8:	b2ea      	uxtb	r2, r5
   107ea:	2a09      	cmp	r2, #9
   107ec:	d8b4      	bhi.n	10758 <d_substitution+0x40>
   107ee:	2200      	movs	r2, #0
   107f0:	e012      	b.n	10818 <d_substitution+0x100>
   107f2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
   107f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   107fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   107fe:	428a      	cmp	r2, r1
   10800:	d890      	bhi.n	10724 <d_substitution+0xc>
   10802:	68c2      	ldr	r2, [r0, #12]
   10804:	7813      	ldrb	r3, [r2, #0]
   10806:	1c54      	adds	r4, r2, #1
   10808:	b11b      	cbz	r3, 10812 <d_substitution+0xfa>
   1080a:	60c4      	str	r4, [r0, #12]
   1080c:	7813      	ldrb	r3, [r2, #0]
   1080e:	2b5f      	cmp	r3, #95	; 0x5f
   10810:	d012      	beq.n	10838 <d_substitution+0x120>
   10812:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   10816:	460a      	mov	r2, r1
   10818:	b2e9      	uxtb	r1, r5
   1081a:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
   1081e:	2909      	cmp	r1, #9
   10820:	b2e4      	uxtb	r4, r4
   10822:	d9e6      	bls.n	107f2 <d_substitution+0xda>
   10824:	2c19      	cmp	r4, #25
   10826:	f63f af7d 	bhi.w	10724 <d_substitution+0xc>
   1082a:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
   1082e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10832:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
   10836:	e7e2      	b.n	107fe <d_substitution+0xe6>
   10838:	3101      	adds	r1, #1
   1083a:	e781      	b.n	10740 <d_substitution+0x28>
   1083c:	2101      	movs	r1, #1
   1083e:	e794      	b.n	1076a <d_substitution+0x52>
   10840:	68c2      	ldr	r2, [r0, #12]
   10842:	7811      	ldrb	r1, [r2, #0]
   10844:	3943      	subs	r1, #67	; 0x43
   10846:	2901      	cmp	r1, #1
   10848:	bf8c      	ite	hi
   1084a:	2100      	movhi	r1, #0
   1084c:	2101      	movls	r1, #1
   1084e:	e78c      	b.n	1076a <d_substitution+0x52>
   10850:	6855      	ldr	r5, [r2, #4]
   10852:	6892      	ldr	r2, [r2, #8]
   10854:	e7b3      	b.n	107be <d_substitution+0xa6>
   10856:	2700      	movs	r7, #0
   10858:	e7ac      	b.n	107b4 <d_substitution+0x9c>
   1085a:	6984      	ldr	r4, [r0, #24]
   1085c:	6943      	ldr	r3, [r0, #20]
   1085e:	e7aa      	b.n	107b6 <d_substitution+0x9e>
   10860:	4618      	mov	r0, r3
   10862:	e760      	b.n	10726 <d_substitution+0xe>
   10864:	4637      	mov	r7, r6
   10866:	e7a5      	b.n	107b4 <d_substitution+0x9c>
   10868:	00019a20 	.word	0x00019a20

0001086c <d_append_char>:
d_append_char():
   1086c:	b570      	push	{r4, r5, r6, lr}
   1086e:	460d      	mov	r5, r1
   10870:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   10874:	29ff      	cmp	r1, #255	; 0xff
   10876:	4604      	mov	r4, r0
   10878:	d006      	beq.n	10888 <d_append_char+0x1c>
   1087a:	1c4a      	adds	r2, r1, #1
   1087c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   10880:	5465      	strb	r5, [r4, r1]
   10882:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   10886:	bd70      	pop	{r4, r5, r6, pc}
   10888:	2600      	movs	r6, #0
   1088a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1088e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   10892:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   10896:	4798      	blx	r3
   10898:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1089c:	4631      	mov	r1, r6
   1089e:	1c5a      	adds	r2, r3, #1
   108a0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   108a4:	2201      	movs	r2, #1
   108a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   108aa:	5465      	strb	r5, [r4, r1]
   108ac:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   108b0:	bd70      	pop	{r4, r5, r6, pc}
   108b2:	bf00      	nop

000108b4 <d_number.isra.0>:
d_number.isra.0():
   108b4:	b470      	push	{r4, r5, r6}
   108b6:	6802      	ldr	r2, [r0, #0]
   108b8:	7813      	ldrb	r3, [r2, #0]
   108ba:	2b6e      	cmp	r3, #110	; 0x6e
   108bc:	4605      	mov	r5, r0
   108be:	d018      	beq.n	108f2 <d_number.isra.0+0x3e>
   108c0:	2600      	movs	r6, #0
   108c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   108c6:	2a09      	cmp	r2, #9
   108c8:	d818      	bhi.n	108fc <d_number.isra.0+0x48>
   108ca:	682a      	ldr	r2, [r5, #0]
   108cc:	2000      	movs	r0, #0
   108ce:	3201      	adds	r2, #1
   108d0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   108d4:	602a      	str	r2, [r5, #0]
   108d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   108da:	f812 3b01 	ldrb.w	r3, [r2], #1
   108de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   108e2:	2909      	cmp	r1, #9
   108e4:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   108e8:	d9f2      	bls.n	108d0 <d_number.isra.0+0x1c>
   108ea:	b106      	cbz	r6, 108ee <d_number.isra.0+0x3a>
   108ec:	4240      	negs	r0, r0
   108ee:	bc70      	pop	{r4, r5, r6}
   108f0:	4770      	bx	lr
   108f2:	1c53      	adds	r3, r2, #1
   108f4:	6003      	str	r3, [r0, #0]
   108f6:	7853      	ldrb	r3, [r2, #1]
   108f8:	2601      	movs	r6, #1
   108fa:	e7e2      	b.n	108c2 <d_number.isra.0+0xe>
   108fc:	2000      	movs	r0, #0
   108fe:	e7f4      	b.n	108ea <d_number.isra.0+0x36>

00010900 <d_number_component>:
d_number_component():
   10900:	6943      	ldr	r3, [r0, #20]
   10902:	6982      	ldr	r2, [r0, #24]
   10904:	4293      	cmp	r3, r2
   10906:	b510      	push	{r4, lr}
   10908:	da13      	bge.n	10932 <d_number_component+0x32>
   1090a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1090e:	6901      	ldr	r1, [r0, #16]
   10910:	0092      	lsls	r2, r2, #2
   10912:	3301      	adds	r3, #1
   10914:	188c      	adds	r4, r1, r2
   10916:	6143      	str	r3, [r0, #20]
   10918:	d008      	beq.n	1092c <d_number_component+0x2c>
   1091a:	2340      	movs	r3, #64	; 0x40
   1091c:	548b      	strb	r3, [r1, r2]
   1091e:	300c      	adds	r0, #12
   10920:	f7ff ffc8 	bl	108b4 <d_number.isra.0>
   10924:	4623      	mov	r3, r4
   10926:	6060      	str	r0, [r4, #4]
   10928:	4618      	mov	r0, r3
   1092a:	bd10      	pop	{r4, pc}
   1092c:	4623      	mov	r3, r4
   1092e:	4618      	mov	r0, r3
   10930:	bd10      	pop	{r4, pc}
   10932:	2300      	movs	r3, #0
   10934:	4618      	mov	r0, r3
   10936:	bd10      	pop	{r4, pc}

00010938 <d_compact_number>:
d_compact_number():
   10938:	b510      	push	{r4, lr}
   1093a:	68c3      	ldr	r3, [r0, #12]
   1093c:	781a      	ldrb	r2, [r3, #0]
   1093e:	2a5f      	cmp	r2, #95	; 0x5f
   10940:	4604      	mov	r4, r0
   10942:	d00b      	beq.n	1095c <d_compact_number+0x24>
   10944:	2a6e      	cmp	r2, #110	; 0x6e
   10946:	d006      	beq.n	10956 <d_compact_number+0x1e>
   10948:	300c      	adds	r0, #12
   1094a:	f7ff ffb3 	bl	108b4 <d_number.isra.0>
   1094e:	68e3      	ldr	r3, [r4, #12]
   10950:	781a      	ldrb	r2, [r3, #0]
   10952:	2a5f      	cmp	r2, #95	; 0x5f
   10954:	d006      	beq.n	10964 <d_compact_number+0x2c>
   10956:	f04f 30ff 	mov.w	r0, #4294967295
   1095a:	bd10      	pop	{r4, pc}
   1095c:	2000      	movs	r0, #0
   1095e:	3301      	adds	r3, #1
   10960:	60e3      	str	r3, [r4, #12]
   10962:	bd10      	pop	{r4, pc}
   10964:	3001      	adds	r0, #1
   10966:	e7fa      	b.n	1095e <d_compact_number+0x26>

00010968 <d_template_param>:
d_template_param():
   10968:	b538      	push	{r3, r4, r5, lr}
   1096a:	68c3      	ldr	r3, [r0, #12]
   1096c:	781a      	ldrb	r2, [r3, #0]
   1096e:	2a54      	cmp	r2, #84	; 0x54
   10970:	4604      	mov	r4, r0
   10972:	d001      	beq.n	10978 <d_template_param+0x10>
   10974:	2000      	movs	r0, #0
   10976:	bd38      	pop	{r3, r4, r5, pc}
   10978:	3301      	adds	r3, #1
   1097a:	60c3      	str	r3, [r0, #12]
   1097c:	f7ff ffdc 	bl	10938 <d_compact_number>
   10980:	1e05      	subs	r5, r0, #0
   10982:	dbf7      	blt.n	10974 <d_template_param+0xc>
   10984:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10986:	6963      	ldr	r3, [r4, #20]
   10988:	69a2      	ldr	r2, [r4, #24]
   1098a:	3101      	adds	r1, #1
   1098c:	4293      	cmp	r3, r2
   1098e:	62a1      	str	r1, [r4, #40]	; 0x28
   10990:	daf0      	bge.n	10974 <d_template_param+0xc>
   10992:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10996:	6921      	ldr	r1, [r4, #16]
   10998:	3301      	adds	r3, #1
   1099a:	0092      	lsls	r2, r2, #2
   1099c:	6163      	str	r3, [r4, #20]
   1099e:	188b      	adds	r3, r1, r2
   109a0:	d0e8      	beq.n	10974 <d_template_param+0xc>
   109a2:	2405      	movs	r4, #5
   109a4:	548c      	strb	r4, [r1, r2]
   109a6:	605d      	str	r5, [r3, #4]
   109a8:	4618      	mov	r0, r3
   109aa:	bd38      	pop	{r3, r4, r5, pc}

000109ac <d_discriminator>:
d_discriminator():
   109ac:	b508      	push	{r3, lr}
   109ae:	68c3      	ldr	r3, [r0, #12]
   109b0:	781a      	ldrb	r2, [r3, #0]
   109b2:	2a5f      	cmp	r2, #95	; 0x5f
   109b4:	d001      	beq.n	109ba <d_discriminator+0xe>
   109b6:	2001      	movs	r0, #1
   109b8:	bd08      	pop	{r3, pc}
   109ba:	3301      	adds	r3, #1
   109bc:	f840 3f0c 	str.w	r3, [r0, #12]!
   109c0:	f7ff ff78 	bl	108b4 <d_number.isra.0>
   109c4:	43c0      	mvns	r0, r0
   109c6:	0fc0      	lsrs	r0, r0, #31
   109c8:	bd08      	pop	{r3, pc}
   109ca:	bf00      	nop

000109cc <d_source_name>:
d_source_name():
   109cc:	b570      	push	{r4, r5, r6, lr}
   109ce:	4604      	mov	r4, r0
   109d0:	300c      	adds	r0, #12
   109d2:	f7ff ff6f 	bl	108b4 <d_number.isra.0>
   109d6:	1e06      	subs	r6, r0, #0
   109d8:	dd32      	ble.n	10a40 <d_source_name+0x74>
   109da:	68e5      	ldr	r5, [r4, #12]
   109dc:	6863      	ldr	r3, [r4, #4]
   109de:	1b5b      	subs	r3, r3, r5
   109e0:	429e      	cmp	r6, r3
   109e2:	dc2f      	bgt.n	10a44 <d_source_name+0x78>
   109e4:	68a2      	ldr	r2, [r4, #8]
   109e6:	19ab      	adds	r3, r5, r6
   109e8:	0752      	lsls	r2, r2, #29
   109ea:	60e3      	str	r3, [r4, #12]
   109ec:	d415      	bmi.n	10a1a <d_source_name+0x4e>
   109ee:	2e09      	cmp	r6, #9
   109f0:	dd0c      	ble.n	10a0c <d_source_name+0x40>
   109f2:	4628      	mov	r0, r5
   109f4:	4914      	ldr	r1, [pc, #80]	; (10a48 <d_source_name+0x7c>)
   109f6:	2208      	movs	r2, #8
   109f8:	f007 ffcd 	bl	18996 <memcmp>
   109fc:	b930      	cbnz	r0, 10a0c <d_source_name+0x40>
   109fe:	7a2b      	ldrb	r3, [r5, #8]
   10a00:	2b2e      	cmp	r3, #46	; 0x2e
   10a02:	d010      	beq.n	10a26 <d_source_name+0x5a>
   10a04:	2b5f      	cmp	r3, #95	; 0x5f
   10a06:	d00e      	beq.n	10a26 <d_source_name+0x5a>
   10a08:	2b24      	cmp	r3, #36	; 0x24
   10a0a:	d00c      	beq.n	10a26 <d_source_name+0x5a>
   10a0c:	4629      	mov	r1, r5
   10a0e:	4632      	mov	r2, r6
   10a10:	4620      	mov	r0, r4
   10a12:	f7ff fdad 	bl	10570 <d_make_name>
   10a16:	62e0      	str	r0, [r4, #44]	; 0x2c
   10a18:	bd70      	pop	{r4, r5, r6, pc}
   10a1a:	5daa      	ldrb	r2, [r5, r6]
   10a1c:	2a24      	cmp	r2, #36	; 0x24
   10a1e:	bf04      	itt	eq
   10a20:	3301      	addeq	r3, #1
   10a22:	60e3      	streq	r3, [r4, #12]
   10a24:	e7e3      	b.n	109ee <d_source_name+0x22>
   10a26:	7a6b      	ldrb	r3, [r5, #9]
   10a28:	2b4e      	cmp	r3, #78	; 0x4e
   10a2a:	d1ef      	bne.n	10a0c <d_source_name+0x40>
   10a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10a2e:	4907      	ldr	r1, [pc, #28]	; (10a4c <d_source_name+0x80>)
   10a30:	3316      	adds	r3, #22
   10a32:	1b9e      	subs	r6, r3, r6
   10a34:	6326      	str	r6, [r4, #48]	; 0x30
   10a36:	4620      	mov	r0, r4
   10a38:	2215      	movs	r2, #21
   10a3a:	f7ff fd99 	bl	10570 <d_make_name>
   10a3e:	e7ea      	b.n	10a16 <d_source_name+0x4a>
   10a40:	2000      	movs	r0, #0
   10a42:	bd70      	pop	{r4, r5, r6, pc}
   10a44:	2000      	movs	r0, #0
   10a46:	e7e6      	b.n	10a16 <d_source_name+0x4a>
   10a48:	0001a53c 	.word	0x0001a53c
   10a4c:	0001a548 	.word	0x0001a548

00010a50 <d_call_offset>:
d_call_offset():
   10a50:	b538      	push	{r3, r4, r5, lr}
   10a52:	4604      	mov	r4, r0
   10a54:	b929      	cbnz	r1, 10a62 <d_call_offset+0x12>
   10a56:	68c3      	ldr	r3, [r0, #12]
   10a58:	781a      	ldrb	r2, [r3, #0]
   10a5a:	b132      	cbz	r2, 10a6a <d_call_offset+0x1a>
   10a5c:	1c5a      	adds	r2, r3, #1
   10a5e:	60c2      	str	r2, [r0, #12]
   10a60:	7819      	ldrb	r1, [r3, #0]
   10a62:	2968      	cmp	r1, #104	; 0x68
   10a64:	d012      	beq.n	10a8c <d_call_offset+0x3c>
   10a66:	2976      	cmp	r1, #118	; 0x76
   10a68:	d001      	beq.n	10a6e <d_call_offset+0x1e>
   10a6a:	2000      	movs	r0, #0
   10a6c:	bd38      	pop	{r3, r4, r5, pc}
   10a6e:	f104 050c 	add.w	r5, r4, #12
   10a72:	4628      	mov	r0, r5
   10a74:	f7ff ff1e 	bl	108b4 <d_number.isra.0>
   10a78:	68e3      	ldr	r3, [r4, #12]
   10a7a:	781a      	ldrb	r2, [r3, #0]
   10a7c:	2a5f      	cmp	r2, #95	; 0x5f
   10a7e:	d1f4      	bne.n	10a6a <d_call_offset+0x1a>
   10a80:	3301      	adds	r3, #1
   10a82:	60e3      	str	r3, [r4, #12]
   10a84:	4628      	mov	r0, r5
   10a86:	f7ff ff15 	bl	108b4 <d_number.isra.0>
   10a8a:	e003      	b.n	10a94 <d_call_offset+0x44>
   10a8c:	f104 000c 	add.w	r0, r4, #12
   10a90:	f7ff ff10 	bl	108b4 <d_number.isra.0>
   10a94:	68e3      	ldr	r3, [r4, #12]
   10a96:	781a      	ldrb	r2, [r3, #0]
   10a98:	2a5f      	cmp	r2, #95	; 0x5f
   10a9a:	d1e6      	bne.n	10a6a <d_call_offset+0x1a>
   10a9c:	3301      	adds	r3, #1
   10a9e:	60e3      	str	r3, [r4, #12]
   10aa0:	2001      	movs	r0, #1
   10aa2:	bd38      	pop	{r3, r4, r5, pc}

00010aa4 <d_lookup_template_argument.isra.6>:
d_lookup_template_argument.isra.6():
   10aa4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   10aa8:	4602      	mov	r2, r0
   10aaa:	b1c3      	cbz	r3, 10ade <d_lookup_template_argument.isra.6+0x3a>
   10aac:	685a      	ldr	r2, [r3, #4]
   10aae:	680b      	ldr	r3, [r1, #0]
   10ab0:	6890      	ldr	r0, [r2, #8]
   10ab2:	b170      	cbz	r0, 10ad2 <d_lookup_template_argument.isra.6+0x2e>
   10ab4:	7802      	ldrb	r2, [r0, #0]
   10ab6:	2a2f      	cmp	r2, #47	; 0x2f
   10ab8:	d10d      	bne.n	10ad6 <d_lookup_template_argument.isra.6+0x32>
   10aba:	2b00      	cmp	r3, #0
   10abc:	dc04      	bgt.n	10ac8 <d_lookup_template_argument.isra.6+0x24>
   10abe:	e009      	b.n	10ad4 <d_lookup_template_argument.isra.6+0x30>
   10ac0:	7802      	ldrb	r2, [r0, #0]
   10ac2:	2a2f      	cmp	r2, #47	; 0x2f
   10ac4:	d107      	bne.n	10ad6 <d_lookup_template_argument.isra.6+0x32>
   10ac6:	b143      	cbz	r3, 10ada <d_lookup_template_argument.isra.6+0x36>
   10ac8:	6880      	ldr	r0, [r0, #8]
   10aca:	3b01      	subs	r3, #1
   10acc:	2800      	cmp	r0, #0
   10ace:	d1f7      	bne.n	10ac0 <d_lookup_template_argument.isra.6+0x1c>
   10ad0:	4770      	bx	lr
   10ad2:	4770      	bx	lr
   10ad4:	d001      	beq.n	10ada <d_lookup_template_argument.isra.6+0x36>
   10ad6:	2000      	movs	r0, #0
   10ad8:	4770      	bx	lr
   10ada:	6840      	ldr	r0, [r0, #4]
   10adc:	4770      	bx	lr
   10ade:	2101      	movs	r1, #1
   10ae0:	4618      	mov	r0, r3
   10ae2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
   10ae6:	4770      	bx	lr

00010ae8 <d_find_pack>:
d_find_pack():
   10ae8:	b538      	push	{r3, r4, r5, lr}
   10aea:	460c      	mov	r4, r1
   10aec:	4605      	mov	r5, r0
   10aee:	b391      	cbz	r1, 10b56 <d_find_pack+0x6e>
   10af0:	7823      	ldrb	r3, [r4, #0]
   10af2:	2b4a      	cmp	r3, #74	; 0x4a
   10af4:	d827      	bhi.n	10b46 <d_find_pack+0x5e>
   10af6:	e8df f003 	tbb	[pc, r3]
   10afa:	262e      	.short	0x262e
   10afc:	30262626 	.word	0x30262626
   10b00:	262b2b2e 	.word	0x262b2b2e
   10b04:	26262626 	.word	0x26262626
   10b08:	26262626 	.word	0x26262626
   10b0c:	26262626 	.word	0x26262626
   10b10:	262e2626 	.word	0x262e2626
   10b14:	26262626 	.word	0x26262626
   10b18:	26262626 	.word	0x26262626
   10b1c:	26262626 	.word	0x26262626
   10b20:	26262e26 	.word	0x26262e26
   10b24:	26262626 	.word	0x26262626
   10b28:	2e262626 	.word	0x2e262626
   10b2c:	2626262b 	.word	0x2626262b
   10b30:	26262626 	.word	0x26262626
   10b34:	26262626 	.word	0x26262626
   10b38:	26262e26 	.word	0x26262e26
   10b3c:	262e2626 	.word	0x262e2626
   10b40:	2e26262e 	.word	0x2e26262e
   10b44:	2e          	.byte	0x2e
   10b45:	00          	.byte	0x00
   10b46:	4628      	mov	r0, r5
   10b48:	6861      	ldr	r1, [r4, #4]
   10b4a:	f7ff ffcd 	bl	10ae8 <d_find_pack>
   10b4e:	b918      	cbnz	r0, 10b58 <d_find_pack+0x70>
   10b50:	68a4      	ldr	r4, [r4, #8]
   10b52:	2c00      	cmp	r4, #0
   10b54:	d1cc      	bne.n	10af0 <d_find_pack+0x8>
   10b56:	2000      	movs	r0, #0
   10b58:	bd38      	pop	{r3, r4, r5, pc}
   10b5a:	4628      	mov	r0, r5
   10b5c:	1d21      	adds	r1, r4, #4
   10b5e:	f7ff ffa1 	bl	10aa4 <d_lookup_template_argument.isra.6>
   10b62:	2800      	cmp	r0, #0
   10b64:	d0f7      	beq.n	10b56 <d_find_pack+0x6e>
   10b66:	7803      	ldrb	r3, [r0, #0]
   10b68:	2b2f      	cmp	r3, #47	; 0x2f
   10b6a:	d1f4      	bne.n	10b56 <d_find_pack+0x6e>
   10b6c:	bd38      	pop	{r3, r4, r5, pc}
$t():
   10b6e:	bf00      	nop

00010b70 <d_growable_string_callback_adapter>:
d_growable_string_callback_adapter():
   10b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b72:	6853      	ldr	r3, [r2, #4]
   10b74:	6894      	ldr	r4, [r2, #8]
   10b76:	3301      	adds	r3, #1
   10b78:	440b      	add	r3, r1
   10b7a:	42a3      	cmp	r3, r4
   10b7c:	b083      	sub	sp, #12
   10b7e:	4615      	mov	r5, r2
   10b80:	460e      	mov	r6, r1
   10b82:	4607      	mov	r7, r0
   10b84:	d813      	bhi.n	10bae <d_growable_string_callback_adapter+0x3e>
   10b86:	68ec      	ldr	r4, [r5, #12]
   10b88:	b10c      	cbz	r4, 10b8e <d_growable_string_callback_adapter+0x1e>
   10b8a:	b003      	add	sp, #12
   10b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b8e:	e895 0009 	ldmia.w	r5, {r0, r3}
   10b92:	4632      	mov	r2, r6
   10b94:	4639      	mov	r1, r7
   10b96:	4418      	add	r0, r3
   10b98:	f007 ff0c 	bl	189b4 <memcpy>
   10b9c:	e895 000c 	ldmia.w	r5, {r2, r3}
   10ba0:	4432      	add	r2, r6
   10ba2:	54d4      	strb	r4, [r2, r3]
   10ba4:	686b      	ldr	r3, [r5, #4]
   10ba6:	441e      	add	r6, r3
   10ba8:	606e      	str	r6, [r5, #4]
   10baa:	b003      	add	sp, #12
   10bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bae:	68d2      	ldr	r2, [r2, #12]
   10bb0:	2a00      	cmp	r2, #0
   10bb2:	d1ea      	bne.n	10b8a <d_growable_string_callback_adapter+0x1a>
   10bb4:	b91c      	cbnz	r4, 10bbe <d_growable_string_callback_adapter+0x4e>
   10bb6:	2b02      	cmp	r3, #2
   10bb8:	f04f 0402 	mov.w	r4, #2
   10bbc:	d902      	bls.n	10bc4 <d_growable_string_callback_adapter+0x54>
   10bbe:	0064      	lsls	r4, r4, #1
   10bc0:	42a3      	cmp	r3, r4
   10bc2:	d8fc      	bhi.n	10bbe <d_growable_string_callback_adapter+0x4e>
   10bc4:	6828      	ldr	r0, [r5, #0]
   10bc6:	4621      	mov	r1, r4
   10bc8:	f007 ffb8 	bl	18b3c <realloc>
   10bcc:	4603      	mov	r3, r0
   10bce:	b110      	cbz	r0, 10bd6 <d_growable_string_callback_adapter+0x66>
   10bd0:	6028      	str	r0, [r5, #0]
   10bd2:	60ac      	str	r4, [r5, #8]
   10bd4:	e7d7      	b.n	10b86 <d_growable_string_callback_adapter+0x16>
   10bd6:	6828      	ldr	r0, [r5, #0]
   10bd8:	9301      	str	r3, [sp, #4]
   10bda:	f007 fec5 	bl	18968 <free>
   10bde:	9b01      	ldr	r3, [sp, #4]
   10be0:	602b      	str	r3, [r5, #0]
   10be2:	2201      	movs	r2, #1
   10be4:	606b      	str	r3, [r5, #4]
   10be6:	60ab      	str	r3, [r5, #8]
   10be8:	60ea      	str	r2, [r5, #12]
   10bea:	e7ce      	b.n	10b8a <d_growable_string_callback_adapter+0x1a>

00010bec <d_expr_primary>:
d_expr_primary():
   10bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bf0:	68c3      	ldr	r3, [r0, #12]
   10bf2:	781a      	ldrb	r2, [r3, #0]
   10bf4:	2a4c      	cmp	r2, #76	; 0x4c
   10bf6:	4605      	mov	r5, r0
   10bf8:	d002      	beq.n	10c00 <d_expr_primary+0x14>
   10bfa:	2000      	movs	r0, #0
   10bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c00:	1c5a      	adds	r2, r3, #1
   10c02:	60c2      	str	r2, [r0, #12]
   10c04:	7859      	ldrb	r1, [r3, #1]
   10c06:	295f      	cmp	r1, #95	; 0x5f
   10c08:	d03a      	beq.n	10c80 <d_expr_primary+0x94>
   10c0a:	295a      	cmp	r1, #90	; 0x5a
   10c0c:	d10d      	bne.n	10c2a <d_expr_primary+0x3e>
   10c0e:	3201      	adds	r2, #1
   10c10:	60ea      	str	r2, [r5, #12]
   10c12:	4628      	mov	r0, r5
   10c14:	2100      	movs	r1, #0
   10c16:	f000 fdf3 	bl	11800 <d_encoding>
   10c1a:	68ea      	ldr	r2, [r5, #12]
   10c1c:	7813      	ldrb	r3, [r2, #0]
   10c1e:	2b45      	cmp	r3, #69	; 0x45
   10c20:	d1eb      	bne.n	10bfa <d_expr_primary+0xe>
   10c22:	3201      	adds	r2, #1
   10c24:	60ea      	str	r2, [r5, #12]
   10c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c2a:	f000 fa03 	bl	11034 <d_type>
   10c2e:	4607      	mov	r7, r0
   10c30:	2800      	cmp	r0, #0
   10c32:	d0e2      	beq.n	10bfa <d_expr_primary+0xe>
   10c34:	7803      	ldrb	r3, [r0, #0]
   10c36:	2b27      	cmp	r3, #39	; 0x27
   10c38:	d033      	beq.n	10ca2 <d_expr_primary+0xb6>
   10c3a:	68e9      	ldr	r1, [r5, #12]
   10c3c:	780b      	ldrb	r3, [r1, #0]
   10c3e:	2b6e      	cmp	r3, #110	; 0x6e
   10c40:	d028      	beq.n	10c94 <d_expr_primary+0xa8>
   10c42:	f04f 083b 	mov.w	r8, #59	; 0x3b
   10c46:	2b45      	cmp	r3, #69	; 0x45
   10c48:	d034      	beq.n	10cb4 <d_expr_primary+0xc8>
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	d0d5      	beq.n	10bfa <d_expr_primary+0xe>
   10c4e:	1c4b      	adds	r3, r1, #1
   10c50:	e001      	b.n	10c56 <d_expr_primary+0x6a>
   10c52:	2c00      	cmp	r4, #0
   10c54:	d0d1      	beq.n	10bfa <d_expr_primary+0xe>
   10c56:	60eb      	str	r3, [r5, #12]
   10c58:	461e      	mov	r6, r3
   10c5a:	f813 4b01 	ldrb.w	r4, [r3], #1
   10c5e:	2c45      	cmp	r4, #69	; 0x45
   10c60:	d1f7      	bne.n	10c52 <d_expr_primary+0x66>
   10c62:	1a72      	subs	r2, r6, r1
   10c64:	4628      	mov	r0, r5
   10c66:	f7ff fc83 	bl	10570 <d_make_name>
   10c6a:	463a      	mov	r2, r7
   10c6c:	4603      	mov	r3, r0
   10c6e:	4641      	mov	r1, r8
   10c70:	4628      	mov	r0, r5
   10c72:	f7ff fc31 	bl	104d8 <d_make_comp>
   10c76:	68ea      	ldr	r2, [r5, #12]
   10c78:	7813      	ldrb	r3, [r2, #0]
   10c7a:	2b45      	cmp	r3, #69	; 0x45
   10c7c:	d1bd      	bne.n	10bfa <d_expr_primary+0xe>
   10c7e:	e7d0      	b.n	10c22 <d_expr_primary+0x36>
   10c80:	1c9a      	adds	r2, r3, #2
   10c82:	60c2      	str	r2, [r0, #12]
   10c84:	789b      	ldrb	r3, [r3, #2]
   10c86:	2b5a      	cmp	r3, #90	; 0x5a
   10c88:	d0c1      	beq.n	10c0e <d_expr_primary+0x22>
   10c8a:	2b45      	cmp	r3, #69	; 0x45
   10c8c:	f04f 0000 	mov.w	r0, #0
   10c90:	d1b3      	bne.n	10bfa <d_expr_primary+0xe>
   10c92:	e7c6      	b.n	10c22 <d_expr_primary+0x36>
   10c94:	1c4a      	adds	r2, r1, #1
   10c96:	60ea      	str	r2, [r5, #12]
   10c98:	784b      	ldrb	r3, [r1, #1]
   10c9a:	f04f 083c 	mov.w	r8, #60	; 0x3c
   10c9e:	4611      	mov	r1, r2
   10ca0:	e7d1      	b.n	10c46 <d_expr_primary+0x5a>
   10ca2:	6843      	ldr	r3, [r0, #4]
   10ca4:	7c1a      	ldrb	r2, [r3, #16]
   10ca6:	2a00      	cmp	r2, #0
   10ca8:	d0c7      	beq.n	10c3a <d_expr_primary+0x4e>
   10caa:	685a      	ldr	r2, [r3, #4]
   10cac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   10cae:	1a9b      	subs	r3, r3, r2
   10cb0:	632b      	str	r3, [r5, #48]	; 0x30
   10cb2:	e7c2      	b.n	10c3a <d_expr_primary+0x4e>
   10cb4:	2200      	movs	r2, #0
   10cb6:	e7d5      	b.n	10c64 <d_expr_primary+0x78>

00010cb8 <d_template_args>:
d_template_args():
   10cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cba:	68c1      	ldr	r1, [r0, #12]
   10cbc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   10cbe:	780b      	ldrb	r3, [r1, #0]
   10cc0:	3b49      	subs	r3, #73	; 0x49
   10cc2:	2b01      	cmp	r3, #1
   10cc4:	b083      	sub	sp, #12
   10cc6:	4604      	mov	r4, r0
   10cc8:	d81e      	bhi.n	10d08 <d_template_args+0x50>
   10cca:	1c4a      	adds	r2, r1, #1
   10ccc:	60c2      	str	r2, [r0, #12]
   10cce:	784b      	ldrb	r3, [r1, #1]
   10cd0:	2b45      	cmp	r3, #69	; 0x45
   10cd2:	d045      	beq.n	10d60 <d_template_args+0xa8>
   10cd4:	ae02      	add	r6, sp, #8
   10cd6:	2100      	movs	r1, #0
   10cd8:	f846 1d04 	str.w	r1, [r6, #-4]!
   10cdc:	3b49      	subs	r3, #73	; 0x49
   10cde:	2b0f      	cmp	r3, #15
   10ce0:	d835      	bhi.n	10d4e <d_template_args+0x96>
   10ce2:	e8df f003 	tbb	[pc, r3]
   10ce6:	2f2f      	.short	0x2f2f
   10ce8:	34341434 	.word	0x34341434
   10cec:	34343434 	.word	0x34343434
   10cf0:	34343434 	.word	0x34343434
   10cf4:	0834      	.short	0x0834
   10cf6:	3201      	adds	r2, #1
   10cf8:	60e2      	str	r2, [r4, #12]
   10cfa:	4620      	mov	r0, r4
   10cfc:	f001 fa6c 	bl	121d8 <d_expression>
   10d00:	68e3      	ldr	r3, [r4, #12]
   10d02:	781a      	ldrb	r2, [r3, #0]
   10d04:	2a45      	cmp	r2, #69	; 0x45
   10d06:	d027      	beq.n	10d58 <d_template_args+0xa0>
   10d08:	2000      	movs	r0, #0
   10d0a:	b003      	add	sp, #12
   10d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d0e:	4620      	mov	r0, r4
   10d10:	f7ff ff6c 	bl	10bec <d_expr_primary>
   10d14:	4605      	mov	r5, r0
   10d16:	4620      	mov	r0, r4
   10d18:	212f      	movs	r1, #47	; 0x2f
   10d1a:	462a      	mov	r2, r5
   10d1c:	2300      	movs	r3, #0
   10d1e:	2d00      	cmp	r5, #0
   10d20:	d0f2      	beq.n	10d08 <d_template_args+0x50>
   10d22:	f7ff fbd9 	bl	104d8 <d_make_comp>
   10d26:	6030      	str	r0, [r6, #0]
   10d28:	f100 0608 	add.w	r6, r0, #8
   10d2c:	2800      	cmp	r0, #0
   10d2e:	d0eb      	beq.n	10d08 <d_template_args+0x50>
   10d30:	68e2      	ldr	r2, [r4, #12]
   10d32:	7813      	ldrb	r3, [r2, #0]
   10d34:	2b45      	cmp	r3, #69	; 0x45
   10d36:	d1d1      	bne.n	10cdc <d_template_args+0x24>
   10d38:	9801      	ldr	r0, [sp, #4]
   10d3a:	62e7      	str	r7, [r4, #44]	; 0x2c
   10d3c:	3201      	adds	r2, #1
   10d3e:	60e2      	str	r2, [r4, #12]
   10d40:	b003      	add	sp, #12
   10d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d44:	4620      	mov	r0, r4
   10d46:	f7ff ffb7 	bl	10cb8 <d_template_args>
   10d4a:	4605      	mov	r5, r0
   10d4c:	e7e3      	b.n	10d16 <d_template_args+0x5e>
   10d4e:	4620      	mov	r0, r4
   10d50:	f000 f970 	bl	11034 <d_type>
   10d54:	4605      	mov	r5, r0
   10d56:	e7de      	b.n	10d16 <d_template_args+0x5e>
   10d58:	3301      	adds	r3, #1
   10d5a:	60e3      	str	r3, [r4, #12]
   10d5c:	4605      	mov	r5, r0
   10d5e:	e7da      	b.n	10d16 <d_template_args+0x5e>
   10d60:	3102      	adds	r1, #2
   10d62:	2200      	movs	r2, #0
   10d64:	60c1      	str	r1, [r0, #12]
   10d66:	4613      	mov	r3, r2
   10d68:	212f      	movs	r1, #47	; 0x2f
   10d6a:	b003      	add	sp, #12
   10d6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10d70:	f7ff bbb2 	b.w	104d8 <d_make_comp>

00010d74 <d_name>:
d_name():
   10d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d78:	68c2      	ldr	r2, [r0, #12]
   10d7a:	7813      	ldrb	r3, [r2, #0]
   10d7c:	3b4c      	subs	r3, #76	; 0x4c
   10d7e:	b082      	sub	sp, #8
   10d80:	4605      	mov	r5, r0
   10d82:	2b0e      	cmp	r3, #14
   10d84:	d86d      	bhi.n	10e62 <d_name+0xee>
   10d86:	e8df f003 	tbb	[pc, r3]
   10d8a:	6c2c      	.short	0x6c2c
   10d8c:	6c6c6c31 	.word	0x6c6c6c31
   10d90:	2c6c176c 	.word	0x2c6c176c
   10d94:	6c6c6c6c 	.word	0x6c6c6c6c
   10d98:	08          	.byte	0x08
   10d99:	00          	.byte	0x00
   10d9a:	3201      	adds	r2, #1
   10d9c:	2100      	movs	r1, #0
   10d9e:	60c2      	str	r2, [r0, #12]
   10da0:	f000 fd2e 	bl	11800 <d_encoding>
   10da4:	68eb      	ldr	r3, [r5, #12]
   10da6:	7819      	ldrb	r1, [r3, #0]
   10da8:	2945      	cmp	r1, #69	; 0x45
   10daa:	4606      	mov	r6, r0
   10dac:	f000 80d1 	beq.w	10f52 <d_name+0x1de>
   10db0:	2000      	movs	r0, #0
   10db2:	b002      	add	sp, #8
   10db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10db8:	7853      	ldrb	r3, [r2, #1]
   10dba:	2b74      	cmp	r3, #116	; 0x74
   10dbc:	d069      	beq.n	10e92 <d_name+0x11e>
   10dbe:	2100      	movs	r1, #0
   10dc0:	f7ff fcaa 	bl	10718 <d_substitution>
   10dc4:	68eb      	ldr	r3, [r5, #12]
   10dc6:	781b      	ldrb	r3, [r3, #0]
   10dc8:	2b49      	cmp	r3, #73	; 0x49
   10dca:	4604      	mov	r4, r0
   10dcc:	d150      	bne.n	10e70 <d_name+0xfc>
   10dce:	4628      	mov	r0, r5
   10dd0:	f7ff ff72 	bl	10cb8 <d_template_args>
   10dd4:	4622      	mov	r2, r4
   10dd6:	4603      	mov	r3, r0
   10dd8:	2104      	movs	r1, #4
   10dda:	4628      	mov	r0, r5
   10ddc:	f7ff fb7c 	bl	104d8 <d_make_comp>
   10de0:	e001      	b.n	10de6 <d_name+0x72>
   10de2:	f001 f8bb 	bl	11f5c <d_unqualified_name>
   10de6:	b002      	add	sp, #8
   10de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dec:	3201      	adds	r2, #1
   10dee:	60c2      	str	r2, [r0, #12]
   10df0:	a901      	add	r1, sp, #4
   10df2:	2201      	movs	r2, #1
   10df4:	f7ff fbd6 	bl	105a4 <d_cv_qualifiers>
   10df8:	4607      	mov	r7, r0
   10dfa:	2800      	cmp	r0, #0
   10dfc:	d0d8      	beq.n	10db0 <d_name+0x3c>
   10dfe:	4628      	mov	r0, r5
   10e00:	2100      	movs	r1, #0
   10e02:	f7ff fc29 	bl	10658 <d_ref_qualifier>
   10e06:	68eb      	ldr	r3, [r5, #12]
   10e08:	781c      	ldrb	r4, [r3, #0]
   10e0a:	4680      	mov	r8, r0
   10e0c:	2600      	movs	r6, #0
   10e0e:	2c00      	cmp	r4, #0
   10e10:	f000 808e 	beq.w	10f30 <d_name+0x1bc>
   10e14:	2c44      	cmp	r4, #68	; 0x44
   10e16:	f000 8082 	beq.w	10f1e <d_name+0x1aa>
   10e1a:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   10e1e:	b2d2      	uxtb	r2, r2
   10e20:	2a09      	cmp	r2, #9
   10e22:	d95c      	bls.n	10ede <d_name+0x16a>
   10e24:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
   10e28:	b2d2      	uxtb	r2, r2
   10e2a:	2a19      	cmp	r2, #25
   10e2c:	d957      	bls.n	10ede <d_name+0x16a>
   10e2e:	2c43      	cmp	r4, #67	; 0x43
   10e30:	d055      	beq.n	10ede <d_name+0x16a>
   10e32:	2c55      	cmp	r4, #85	; 0x55
   10e34:	d053      	beq.n	10ede <d_name+0x16a>
   10e36:	2c4c      	cmp	r4, #76	; 0x4c
   10e38:	d051      	beq.n	10ede <d_name+0x16a>
   10e3a:	2c53      	cmp	r4, #83	; 0x53
   10e3c:	f000 8084 	beq.w	10f48 <d_name+0x1d4>
   10e40:	2c49      	cmp	r4, #73	; 0x49
   10e42:	d07a      	beq.n	10f3a <d_name+0x1c6>
   10e44:	2c54      	cmp	r4, #84	; 0x54
   10e46:	f000 80b3 	beq.w	10fb0 <d_name+0x23c>
   10e4a:	2c45      	cmp	r4, #69	; 0x45
   10e4c:	f000 80d8 	beq.w	11000 <d_name+0x28c>
   10e50:	2c4d      	cmp	r4, #77	; 0x4d
   10e52:	d16d      	bne.n	10f30 <d_name+0x1bc>
   10e54:	2e00      	cmp	r6, #0
   10e56:	d06b      	beq.n	10f30 <d_name+0x1bc>
   10e58:	1c5a      	adds	r2, r3, #1
   10e5a:	60ea      	str	r2, [r5, #12]
   10e5c:	785c      	ldrb	r4, [r3, #1]
   10e5e:	4613      	mov	r3, r2
   10e60:	e7d5      	b.n	10e0e <d_name+0x9a>
   10e62:	f001 f87b 	bl	11f5c <d_unqualified_name>
   10e66:	68eb      	ldr	r3, [r5, #12]
   10e68:	781b      	ldrb	r3, [r3, #0]
   10e6a:	2b49      	cmp	r3, #73	; 0x49
   10e6c:	4604      	mov	r4, r0
   10e6e:	d003      	beq.n	10e78 <d_name+0x104>
   10e70:	4620      	mov	r0, r4
   10e72:	b002      	add	sp, #8
   10e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e78:	2800      	cmp	r0, #0
   10e7a:	d099      	beq.n	10db0 <d_name+0x3c>
   10e7c:	6a2b      	ldr	r3, [r5, #32]
   10e7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10e80:	4293      	cmp	r3, r2
   10e82:	da95      	bge.n	10db0 <d_name+0x3c>
   10e84:	69ea      	ldr	r2, [r5, #28]
   10e86:	1c59      	adds	r1, r3, #1
   10e88:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   10e8c:	4628      	mov	r0, r5
   10e8e:	6229      	str	r1, [r5, #32]
   10e90:	e79e      	b.n	10dd0 <d_name+0x5c>
   10e92:	3202      	adds	r2, #2
   10e94:	4965      	ldr	r1, [pc, #404]	; (1102c <d_name+0x2b8>)
   10e96:	60c2      	str	r2, [r0, #12]
   10e98:	2203      	movs	r2, #3
   10e9a:	f7ff fb69 	bl	10570 <d_make_name>
   10e9e:	4604      	mov	r4, r0
   10ea0:	4628      	mov	r0, r5
   10ea2:	f001 f85b 	bl	11f5c <d_unqualified_name>
   10ea6:	4622      	mov	r2, r4
   10ea8:	4603      	mov	r3, r0
   10eaa:	2101      	movs	r1, #1
   10eac:	4628      	mov	r0, r5
   10eae:	f7ff fb13 	bl	104d8 <d_make_comp>
   10eb2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   10eb4:	68eb      	ldr	r3, [r5, #12]
   10eb6:	3203      	adds	r2, #3
   10eb8:	632a      	str	r2, [r5, #48]	; 0x30
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	2b49      	cmp	r3, #73	; 0x49
   10ebe:	4604      	mov	r4, r0
   10ec0:	d1d6      	bne.n	10e70 <d_name+0xfc>
   10ec2:	2800      	cmp	r0, #0
   10ec4:	f43f af74 	beq.w	10db0 <d_name+0x3c>
   10ec8:	6a2b      	ldr	r3, [r5, #32]
   10eca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10ecc:	4293      	cmp	r3, r2
   10ece:	f6bf af6f 	bge.w	10db0 <d_name+0x3c>
   10ed2:	69ea      	ldr	r2, [r5, #28]
   10ed4:	1c59      	adds	r1, r3, #1
   10ed6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   10eda:	6229      	str	r1, [r5, #32]
   10edc:	e777      	b.n	10dce <d_name+0x5a>
   10ede:	4628      	mov	r0, r5
   10ee0:	f001 f83c 	bl	11f5c <d_unqualified_name>
   10ee4:	b1ce      	cbz	r6, 10f1a <d_name+0x1a6>
   10ee6:	2101      	movs	r1, #1
   10ee8:	4632      	mov	r2, r6
   10eea:	4603      	mov	r3, r0
   10eec:	4628      	mov	r0, r5
   10eee:	f7ff faf3 	bl	104d8 <d_make_comp>
   10ef2:	4606      	mov	r6, r0
   10ef4:	68eb      	ldr	r3, [r5, #12]
   10ef6:	2c53      	cmp	r4, #83	; 0x53
   10ef8:	781c      	ldrb	r4, [r3, #0]
   10efa:	d088      	beq.n	10e0e <d_name+0x9a>
   10efc:	2c45      	cmp	r4, #69	; 0x45
   10efe:	d08c      	beq.n	10e1a <d_name+0xa6>
   10f00:	b1b6      	cbz	r6, 10f30 <d_name+0x1bc>
   10f02:	6a2b      	ldr	r3, [r5, #32]
   10f04:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10f06:	4293      	cmp	r3, r2
   10f08:	da12      	bge.n	10f30 <d_name+0x1bc>
   10f0a:	69ea      	ldr	r2, [r5, #28]
   10f0c:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
   10f10:	1c5a      	adds	r2, r3, #1
   10f12:	68eb      	ldr	r3, [r5, #12]
   10f14:	622a      	str	r2, [r5, #32]
   10f16:	781c      	ldrb	r4, [r3, #0]
   10f18:	e779      	b.n	10e0e <d_name+0x9a>
   10f1a:	4606      	mov	r6, r0
   10f1c:	e7ea      	b.n	10ef4 <d_name+0x180>
   10f1e:	785b      	ldrb	r3, [r3, #1]
   10f20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10f24:	2b54      	cmp	r3, #84	; 0x54
   10f26:	d1da      	bne.n	10ede <d_name+0x16a>
   10f28:	4628      	mov	r0, r5
   10f2a:	f000 f883 	bl	11034 <d_type>
   10f2e:	e7d9      	b.n	10ee4 <d_name+0x170>
   10f30:	2000      	movs	r0, #0
   10f32:	6038      	str	r0, [r7, #0]
   10f34:	b002      	add	sp, #8
   10f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f3a:	2e00      	cmp	r6, #0
   10f3c:	d0f8      	beq.n	10f30 <d_name+0x1bc>
   10f3e:	4628      	mov	r0, r5
   10f40:	f7ff feba 	bl	10cb8 <d_template_args>
   10f44:	2104      	movs	r1, #4
   10f46:	e7cf      	b.n	10ee8 <d_name+0x174>
   10f48:	4628      	mov	r0, r5
   10f4a:	2101      	movs	r1, #1
   10f4c:	f7ff fbe4 	bl	10718 <d_substitution>
   10f50:	e7c8      	b.n	10ee4 <d_name+0x170>
   10f52:	1c5a      	adds	r2, r3, #1
   10f54:	60ea      	str	r2, [r5, #12]
   10f56:	785a      	ldrb	r2, [r3, #1]
   10f58:	2a73      	cmp	r2, #115	; 0x73
   10f5a:	d03d      	beq.n	10fd8 <d_name+0x264>
   10f5c:	2a64      	cmp	r2, #100	; 0x64
   10f5e:	d02b      	beq.n	10fb8 <d_name+0x244>
   10f60:	f04f 37ff 	mov.w	r7, #4294967295
   10f64:	4628      	mov	r0, r5
   10f66:	f7ff ff05 	bl	10d74 <d_name>
   10f6a:	4604      	mov	r4, r0
   10f6c:	b120      	cbz	r0, 10f78 <d_name+0x204>
   10f6e:	7803      	ldrb	r3, [r0, #0]
   10f70:	2b44      	cmp	r3, #68	; 0x44
   10f72:	d001      	beq.n	10f78 <d_name+0x204>
   10f74:	2b46      	cmp	r3, #70	; 0x46
   10f76:	d129      	bne.n	10fcc <d_name+0x258>
   10f78:	1c7b      	adds	r3, r7, #1
   10f7a:	d025      	beq.n	10fc8 <d_name+0x254>
   10f7c:	696b      	ldr	r3, [r5, #20]
   10f7e:	69aa      	ldr	r2, [r5, #24]
   10f80:	4293      	cmp	r3, r2
   10f82:	da13      	bge.n	10fac <d_name+0x238>
   10f84:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   10f88:	6929      	ldr	r1, [r5, #16]
   10f8a:	3301      	adds	r3, #1
   10f8c:	0092      	lsls	r2, r2, #2
   10f8e:	616b      	str	r3, [r5, #20]
   10f90:	188b      	adds	r3, r1, r2
   10f92:	d003      	beq.n	10f9c <d_name+0x228>
   10f94:	2045      	movs	r0, #69	; 0x45
   10f96:	5488      	strb	r0, [r1, r2]
   10f98:	609f      	str	r7, [r3, #8]
   10f9a:	605c      	str	r4, [r3, #4]
   10f9c:	4628      	mov	r0, r5
   10f9e:	4632      	mov	r2, r6
   10fa0:	2102      	movs	r1, #2
   10fa2:	f7ff fa99 	bl	104d8 <d_make_comp>
   10fa6:	b002      	add	sp, #8
   10fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fac:	2300      	movs	r3, #0
   10fae:	e7f5      	b.n	10f9c <d_name+0x228>
   10fb0:	4628      	mov	r0, r5
   10fb2:	f7ff fcd9 	bl	10968 <d_template_param>
   10fb6:	e795      	b.n	10ee4 <d_name+0x170>
   10fb8:	3302      	adds	r3, #2
   10fba:	60eb      	str	r3, [r5, #12]
   10fbc:	4628      	mov	r0, r5
   10fbe:	f7ff fcbb 	bl	10938 <d_compact_number>
   10fc2:	1e07      	subs	r7, r0, #0
   10fc4:	dace      	bge.n	10f64 <d_name+0x1f0>
   10fc6:	e6f3      	b.n	10db0 <d_name+0x3c>
   10fc8:	4623      	mov	r3, r4
   10fca:	e7e7      	b.n	10f9c <d_name+0x228>
   10fcc:	4628      	mov	r0, r5
   10fce:	f7ff fced 	bl	109ac <d_discriminator>
   10fd2:	2800      	cmp	r0, #0
   10fd4:	d1d0      	bne.n	10f78 <d_name+0x204>
   10fd6:	e6eb      	b.n	10db0 <d_name+0x3c>
   10fd8:	3302      	adds	r3, #2
   10fda:	60eb      	str	r3, [r5, #12]
   10fdc:	4628      	mov	r0, r5
   10fde:	f7ff fce5 	bl	109ac <d_discriminator>
   10fe2:	2800      	cmp	r0, #0
   10fe4:	f43f aee4 	beq.w	10db0 <d_name+0x3c>
   10fe8:	4628      	mov	r0, r5
   10fea:	4911      	ldr	r1, [pc, #68]	; (11030 <d_name+0x2bc>)
   10fec:	220e      	movs	r2, #14
   10fee:	f7ff fabf 	bl	10570 <d_make_name>
   10ff2:	4632      	mov	r2, r6
   10ff4:	4603      	mov	r3, r0
   10ff6:	2102      	movs	r1, #2
   10ff8:	4628      	mov	r0, r5
   10ffa:	f7ff fa6d 	bl	104d8 <d_make_comp>
   10ffe:	e6f2      	b.n	10de6 <d_name+0x72>
   11000:	603e      	str	r6, [r7, #0]
   11002:	2e00      	cmp	r6, #0
   11004:	f43f aed4 	beq.w	10db0 <d_name+0x3c>
   11008:	f1b8 0f00 	cmp.w	r8, #0
   1100c:	d004      	beq.n	11018 <d_name+0x2a4>
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	f8c8 3004 	str.w	r3, [r8, #4]
   11014:	f8cd 8004 	str.w	r8, [sp, #4]
   11018:	68eb      	ldr	r3, [r5, #12]
   1101a:	781a      	ldrb	r2, [r3, #0]
   1101c:	2a45      	cmp	r2, #69	; 0x45
   1101e:	f47f aec7 	bne.w	10db0 <d_name+0x3c>
   11022:	3301      	adds	r3, #1
   11024:	60eb      	str	r3, [r5, #12]
   11026:	9801      	ldr	r0, [sp, #4]
   11028:	e6dd      	b.n	10de6 <d_name+0x72>
   1102a:	bf00      	nop
   1102c:	0001a570 	.word	0x0001a570
   11030:	0001a560 	.word	0x0001a560

00011034 <d_type>:
d_type():
   11034:	b5f0      	push	{r4, r5, r6, r7, lr}
   11036:	68c2      	ldr	r2, [r0, #12]
   11038:	7813      	ldrb	r3, [r2, #0]
   1103a:	2b72      	cmp	r3, #114	; 0x72
   1103c:	b083      	sub	sp, #12
   1103e:	4604      	mov	r4, r0
   11040:	d054      	beq.n	110ec <d_type+0xb8>
   11042:	2b56      	cmp	r3, #86	; 0x56
   11044:	d052      	beq.n	110ec <d_type+0xb8>
   11046:	2b4b      	cmp	r3, #75	; 0x4b
   11048:	d050      	beq.n	110ec <d_type+0xb8>
   1104a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1104e:	294a      	cmp	r1, #74	; 0x4a
   11050:	d87d      	bhi.n	1114e <d_type+0x11a>
   11052:	e8df f011 	tbh	[pc, r1, lsl #1]
   11056:	00a2      	.short	0x00a2
   11058:	00a200a2 	.word	0x00a200a2
   1105c:	00a200a2 	.word	0x00a200a2
   11060:	00a200a2 	.word	0x00a200a2
   11064:	00a200a2 	.word	0x00a200a2
   11068:	007c00a2 	.word	0x007c00a2
   1106c:	007c007c 	.word	0x007c007c
   11070:	007c007c 	.word	0x007c007c
   11074:	007c007c 	.word	0x007c007c
   11078:	007c00a7 	.word	0x007c00a7
   1107c:	00ff00cf 	.word	0x00ff00cf
   11080:	00dc007c 	.word	0x00dc007c
   11084:	007c00f2 	.word	0x007c00f2
   11088:	007c007c 	.word	0x007c007c
   1108c:	007c007c 	.word	0x007c007c
   11090:	00a20171 	.word	0x00a20171
   11094:	01a701c1 	.word	0x01a701c1
   11098:	01b4007c 	.word	0x01b4007c
   1109c:	01ef01ce 	.word	0x01ef01ce
   110a0:	007c0207 	.word	0x007c0207
   110a4:	007c007c 	.word	0x007c007c
   110a8:	00a2007c 	.word	0x00a2007c
   110ac:	007c007c 	.word	0x007c007c
   110b0:	007c007c 	.word	0x007c007c
   110b4:	007c007c 	.word	0x007c007c
   110b8:	02180218 	.word	0x02180218
   110bc:	02180218 	.word	0x02180218
   110c0:	02180218 	.word	0x02180218
   110c4:	02180218 	.word	0x02180218
   110c8:	02180218 	.word	0x02180218
   110cc:	0218007c 	.word	0x0218007c
   110d0:	02180218 	.word	0x02180218
   110d4:	007c0218 	.word	0x007c0218
   110d8:	007c007c 	.word	0x007c007c
   110dc:	02180218 	.word	0x02180218
   110e0:	02180089 	.word	0x02180089
   110e4:	02180218 	.word	0x02180218
   110e8:	02180218 	.word	0x02180218
   110ec:	4620      	mov	r0, r4
   110ee:	a901      	add	r1, sp, #4
   110f0:	2200      	movs	r2, #0
   110f2:	f7ff fa57 	bl	105a4 <d_cv_qualifiers>
   110f6:	4605      	mov	r5, r0
   110f8:	b348      	cbz	r0, 1114e <d_type+0x11a>
   110fa:	4620      	mov	r0, r4
   110fc:	f7ff ff9a 	bl	11034 <d_type>
   11100:	6028      	str	r0, [r5, #0]
   11102:	b320      	cbz	r0, 1114e <d_type+0x11a>
   11104:	7802      	ldrb	r2, [r0, #0]
   11106:	3a1f      	subs	r2, #31
   11108:	2a01      	cmp	r2, #1
   1110a:	d923      	bls.n	11154 <d_type+0x120>
   1110c:	9a01      	ldr	r2, [sp, #4]
   1110e:	b1f2      	cbz	r2, 1114e <d_type+0x11a>
   11110:	6a23      	ldr	r3, [r4, #32]
   11112:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11114:	428b      	cmp	r3, r1
   11116:	da1a      	bge.n	1114e <d_type+0x11a>
   11118:	69e1      	ldr	r1, [r4, #28]
   1111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1111e:	9801      	ldr	r0, [sp, #4]
   11120:	1c5d      	adds	r5, r3, #1
   11122:	6225      	str	r5, [r4, #32]
   11124:	b003      	add	sp, #12
   11126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11128:	4620      	mov	r0, r4
   1112a:	f001 f855 	bl	121d8 <d_expression>
   1112e:	2141      	movs	r1, #65	; 0x41
   11130:	4602      	mov	r2, r0
   11132:	2300      	movs	r3, #0
   11134:	4620      	mov	r0, r4
   11136:	f7ff f9cf 	bl	104d8 <d_make_comp>
   1113a:	9001      	str	r0, [sp, #4]
   1113c:	b138      	cbz	r0, 1114e <d_type+0x11a>
   1113e:	68e3      	ldr	r3, [r4, #12]
   11140:	781a      	ldrb	r2, [r3, #0]
   11142:	b122      	cbz	r2, 1114e <d_type+0x11a>
   11144:	1c5a      	adds	r2, r3, #1
   11146:	60e2      	str	r2, [r4, #12]
   11148:	781b      	ldrb	r3, [r3, #0]
   1114a:	2b45      	cmp	r3, #69	; 0x45
   1114c:	d01a      	beq.n	11184 <d_type+0x150>
   1114e:	2000      	movs	r0, #0
   11150:	b003      	add	sp, #12
   11152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11154:	9a01      	ldr	r2, [sp, #4]
   11156:	6841      	ldr	r1, [r0, #4]
   11158:	6042      	str	r2, [r0, #4]
   1115a:	682b      	ldr	r3, [r5, #0]
   1115c:	9301      	str	r3, [sp, #4]
   1115e:	6029      	str	r1, [r5, #0]
   11160:	9a01      	ldr	r2, [sp, #4]
   11162:	2a00      	cmp	r2, #0
   11164:	d1d4      	bne.n	11110 <d_type+0xdc>
   11166:	e7f2      	b.n	1114e <d_type+0x11a>
   11168:	3201      	adds	r2, #1
   1116a:	60e2      	str	r2, [r4, #12]
   1116c:	4620      	mov	r0, r4
   1116e:	f7ff fc2d 	bl	109cc <d_source_name>
   11172:	2128      	movs	r1, #40	; 0x28
   11174:	4602      	mov	r2, r0
   11176:	2300      	movs	r3, #0
   11178:	4620      	mov	r0, r4
   1117a:	f7ff f9ad 	bl	104d8 <d_make_comp>
   1117e:	9001      	str	r0, [sp, #4]
   11180:	2800      	cmp	r0, #0
   11182:	d0e4      	beq.n	1114e <d_type+0x11a>
   11184:	6a23      	ldr	r3, [r4, #32]
   11186:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11188:	4293      	cmp	r3, r2
   1118a:	dae0      	bge.n	1114e <d_type+0x11a>
   1118c:	69e2      	ldr	r2, [r4, #28]
   1118e:	1c59      	adds	r1, r3, #1
   11190:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   11194:	9801      	ldr	r0, [sp, #4]
   11196:	6221      	str	r1, [r4, #32]
   11198:	e7da      	b.n	11150 <d_type+0x11c>
   1119a:	4620      	mov	r0, r4
   1119c:	f7ff fdea 	bl	10d74 <d_name>
   111a0:	9001      	str	r0, [sp, #4]
   111a2:	e7ed      	b.n	11180 <d_type+0x14c>
   111a4:	1c51      	adds	r1, r2, #1
   111a6:	60e1      	str	r1, [r4, #12]
   111a8:	7853      	ldrb	r3, [r2, #1]
   111aa:	2b5f      	cmp	r3, #95	; 0x5f
   111ac:	f000 8279 	beq.w	116a2 <d_type+0x66e>
   111b0:	3b30      	subs	r3, #48	; 0x30
   111b2:	2b09      	cmp	r3, #9
   111b4:	f200 827e 	bhi.w	116b4 <d_type+0x680>
   111b8:	460a      	mov	r2, r1
   111ba:	3201      	adds	r2, #1
   111bc:	60e2      	str	r2, [r4, #12]
   111be:	7813      	ldrb	r3, [r2, #0]
   111c0:	3b30      	subs	r3, #48	; 0x30
   111c2:	2b09      	cmp	r3, #9
   111c4:	d9f9      	bls.n	111ba <d_type+0x186>
   111c6:	1a52      	subs	r2, r2, r1
   111c8:	4620      	mov	r0, r4
   111ca:	f7ff f9d1 	bl	10570 <d_make_name>
   111ce:	4605      	mov	r5, r0
   111d0:	2800      	cmp	r0, #0
   111d2:	d030      	beq.n	11236 <d_type+0x202>
   111d4:	68e1      	ldr	r1, [r4, #12]
   111d6:	780b      	ldrb	r3, [r1, #0]
   111d8:	2b5f      	cmp	r3, #95	; 0x5f
   111da:	d12c      	bne.n	11236 <d_type+0x202>
   111dc:	3101      	adds	r1, #1
   111de:	60e1      	str	r1, [r4, #12]
   111e0:	4620      	mov	r0, r4
   111e2:	f7ff ff27 	bl	11034 <d_type>
   111e6:	462a      	mov	r2, r5
   111e8:	4603      	mov	r3, r0
   111ea:	212a      	movs	r1, #42	; 0x2a
   111ec:	4620      	mov	r0, r4
   111ee:	f7ff f973 	bl	104d8 <d_make_comp>
   111f2:	e7d5      	b.n	111a0 <d_type+0x16c>
   111f4:	3201      	adds	r2, #1
   111f6:	60e2      	str	r2, [r4, #12]
   111f8:	4620      	mov	r0, r4
   111fa:	f7ff ff1b 	bl	11034 <d_type>
   111fe:	2125      	movs	r1, #37	; 0x25
   11200:	4602      	mov	r2, r0
   11202:	2300      	movs	r3, #0
   11204:	4620      	mov	r0, r4
   11206:	f7ff f967 	bl	104d8 <d_make_comp>
   1120a:	9001      	str	r0, [sp, #4]
   1120c:	e7b8      	b.n	11180 <d_type+0x14c>
   1120e:	1c53      	adds	r3, r2, #1
   11210:	60e3      	str	r3, [r4, #12]
   11212:	7853      	ldrb	r3, [r2, #1]
   11214:	2b59      	cmp	r3, #89	; 0x59
   11216:	bf04      	itt	eq
   11218:	3202      	addeq	r2, #2
   1121a:	60e2      	streq	r2, [r4, #12]
   1121c:	2101      	movs	r1, #1
   1121e:	4620      	mov	r0, r4
   11220:	f000 fad0 	bl	117c4 <d_bare_function_type>
   11224:	4601      	mov	r1, r0
   11226:	4620      	mov	r0, r4
   11228:	f7ff fa16 	bl	10658 <d_ref_qualifier>
   1122c:	68e3      	ldr	r3, [r4, #12]
   1122e:	781a      	ldrb	r2, [r3, #0]
   11230:	2a45      	cmp	r2, #69	; 0x45
   11232:	f000 823c 	beq.w	116ae <d_type+0x67a>
   11236:	2000      	movs	r0, #0
   11238:	e7b2      	b.n	111a0 <d_type+0x16c>
   1123a:	3201      	adds	r2, #1
   1123c:	60e2      	str	r2, [r4, #12]
   1123e:	4620      	mov	r0, r4
   11240:	f7ff fef8 	bl	11034 <d_type>
   11244:	2126      	movs	r1, #38	; 0x26
   11246:	4602      	mov	r2, r0
   11248:	2300      	movs	r3, #0
   1124a:	4620      	mov	r0, r4
   1124c:	f7ff f944 	bl	104d8 <d_make_comp>
   11250:	9001      	str	r0, [sp, #4]
   11252:	e795      	b.n	11180 <d_type+0x14c>
   11254:	1c53      	adds	r3, r2, #1
   11256:	60e3      	str	r3, [r4, #12]
   11258:	7853      	ldrb	r3, [r2, #1]
   1125a:	2b00      	cmp	r3, #0
   1125c:	f43f af77 	beq.w	1114e <d_type+0x11a>
   11260:	1c93      	adds	r3, r2, #2
   11262:	60e3      	str	r3, [r4, #12]
   11264:	7853      	ldrb	r3, [r2, #1]
   11266:	3b46      	subs	r3, #70	; 0x46
   11268:	2b30      	cmp	r3, #48	; 0x30
   1126a:	f63f af70 	bhi.w	1114e <d_type+0x11a>
   1126e:	a101      	add	r1, pc, #4	; (adr r1, 11274 <d_type+0x240>)
   11270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11274:	0001158d 	.word	0x0001158d
   11278:	0001114f 	.word	0x0001114f
   1127c:	0001114f 	.word	0x0001114f
   11280:	0001114f 	.word	0x0001114f
   11284:	0001114f 	.word	0x0001114f
   11288:	0001114f 	.word	0x0001114f
   1128c:	0001114f 	.word	0x0001114f
   11290:	0001114f 	.word	0x0001114f
   11294:	0001114f 	.word	0x0001114f
   11298:	0001114f 	.word	0x0001114f
   1129c:	0001114f 	.word	0x0001114f
   112a0:	0001114f 	.word	0x0001114f
   112a4:	0001114f 	.word	0x0001114f
   112a8:	0001114f 	.word	0x0001114f
   112ac:	00011129 	.word	0x00011129
   112b0:	0001114f 	.word	0x0001114f
   112b4:	0001114f 	.word	0x0001114f
   112b8:	0001114f 	.word	0x0001114f
   112bc:	0001114f 	.word	0x0001114f
   112c0:	0001114f 	.word	0x0001114f
   112c4:	0001114f 	.word	0x0001114f
   112c8:	0001114f 	.word	0x0001114f
   112cc:	0001114f 	.word	0x0001114f
   112d0:	0001114f 	.word	0x0001114f
   112d4:	0001114f 	.word	0x0001114f
   112d8:	0001114f 	.word	0x0001114f
   112dc:	0001114f 	.word	0x0001114f
   112e0:	00011581 	.word	0x00011581
   112e4:	0001114f 	.word	0x0001114f
   112e8:	0001114f 	.word	0x0001114f
   112ec:	00011559 	.word	0x00011559
   112f0:	00011531 	.word	0x00011531
   112f4:	00011509 	.word	0x00011509
   112f8:	0001114f 	.word	0x0001114f
   112fc:	000114e1 	.word	0x000114e1
   11300:	000114b1 	.word	0x000114b1
   11304:	0001114f 	.word	0x0001114f
   11308:	0001114f 	.word	0x0001114f
   1130c:	0001114f 	.word	0x0001114f
   11310:	0001114f 	.word	0x0001114f
   11314:	00011665 	.word	0x00011665
   11318:	0001114f 	.word	0x0001114f
   1131c:	0001164f 	.word	0x0001164f
   11320:	0001114f 	.word	0x0001114f
   11324:	0001114f 	.word	0x0001114f
   11328:	0001162b 	.word	0x0001162b
   1132c:	00011129 	.word	0x00011129
   11330:	0001114f 	.word	0x0001114f
   11334:	000115f3 	.word	0x000115f3
   11338:	3201      	adds	r2, #1
   1133a:	60e2      	str	r2, [r4, #12]
   1133c:	4620      	mov	r0, r4
   1133e:	f7ff fe79 	bl	11034 <d_type>
   11342:	ae01      	add	r6, sp, #4
   11344:	4607      	mov	r7, r0
   11346:	4631      	mov	r1, r6
   11348:	4620      	mov	r0, r4
   1134a:	2201      	movs	r2, #1
   1134c:	f7ff f92a 	bl	105a4 <d_cv_qualifiers>
   11350:	4605      	mov	r5, r0
   11352:	2800      	cmp	r0, #0
   11354:	f43f af6f 	beq.w	11236 <d_type+0x202>
   11358:	4620      	mov	r0, r4
   1135a:	f7ff fe6b 	bl	11034 <d_type>
   1135e:	6028      	str	r0, [r5, #0]
   11360:	2800      	cmp	r0, #0
   11362:	f43f af68 	beq.w	11236 <d_type+0x202>
   11366:	42b5      	cmp	r5, r6
   11368:	d015      	beq.n	11396 <d_type+0x362>
   1136a:	7801      	ldrb	r1, [r0, #0]
   1136c:	f1a1 021f 	sub.w	r2, r1, #31
   11370:	2a01      	cmp	r2, #1
   11372:	f240 81a7 	bls.w	116c4 <d_type+0x690>
   11376:	2929      	cmp	r1, #41	; 0x29
   11378:	d00d      	beq.n	11396 <d_type+0x362>
   1137a:	9a01      	ldr	r2, [sp, #4]
   1137c:	2a00      	cmp	r2, #0
   1137e:	f43f af5a 	beq.w	11236 <d_type+0x202>
   11382:	6a23      	ldr	r3, [r4, #32]
   11384:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11386:	428b      	cmp	r3, r1
   11388:	f6bf af55 	bge.w	11236 <d_type+0x202>
   1138c:	69e1      	ldr	r1, [r4, #28]
   1138e:	1c58      	adds	r0, r3, #1
   11390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   11394:	6220      	str	r0, [r4, #32]
   11396:	463a      	mov	r2, r7
   11398:	4620      	mov	r0, r4
   1139a:	212b      	movs	r1, #43	; 0x2b
   1139c:	9b01      	ldr	r3, [sp, #4]
   1139e:	f7ff f89b 	bl	104d8 <d_make_comp>
   113a2:	e6fd      	b.n	111a0 <d_type+0x16c>
   113a4:	3201      	adds	r2, #1
   113a6:	60e2      	str	r2, [r4, #12]
   113a8:	4620      	mov	r0, r4
   113aa:	f7ff fe43 	bl	11034 <d_type>
   113ae:	2122      	movs	r1, #34	; 0x22
   113b0:	4602      	mov	r2, r0
   113b2:	2300      	movs	r3, #0
   113b4:	4620      	mov	r0, r4
   113b6:	f7ff f88f 	bl	104d8 <d_make_comp>
   113ba:	9001      	str	r0, [sp, #4]
   113bc:	e6e0      	b.n	11180 <d_type+0x14c>
   113be:	3201      	adds	r2, #1
   113c0:	60e2      	str	r2, [r4, #12]
   113c2:	4620      	mov	r0, r4
   113c4:	f7ff fe36 	bl	11034 <d_type>
   113c8:	2123      	movs	r1, #35	; 0x23
   113ca:	4602      	mov	r2, r0
   113cc:	2300      	movs	r3, #0
   113ce:	4620      	mov	r0, r4
   113d0:	f7ff f882 	bl	104d8 <d_make_comp>
   113d4:	9001      	str	r0, [sp, #4]
   113d6:	e6d3      	b.n	11180 <d_type+0x14c>
   113d8:	3201      	adds	r2, #1
   113da:	60e2      	str	r2, [r4, #12]
   113dc:	4620      	mov	r0, r4
   113de:	f7ff fe29 	bl	11034 <d_type>
   113e2:	2124      	movs	r1, #36	; 0x24
   113e4:	4602      	mov	r2, r0
   113e6:	2300      	movs	r3, #0
   113e8:	4620      	mov	r0, r4
   113ea:	f7ff f875 	bl	104d8 <d_make_comp>
   113ee:	9001      	str	r0, [sp, #4]
   113f0:	e6c6      	b.n	11180 <d_type+0x14c>
   113f2:	7853      	ldrb	r3, [r2, #1]
   113f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   113f8:	2a09      	cmp	r2, #9
   113fa:	d905      	bls.n	11408 <d_type+0x3d4>
   113fc:	2b5f      	cmp	r3, #95	; 0x5f
   113fe:	d003      	beq.n	11408 <d_type+0x3d4>
   11400:	3b41      	subs	r3, #65	; 0x41
   11402:	2b19      	cmp	r3, #25
   11404:	f200 8166 	bhi.w	116d4 <d_type+0x6a0>
   11408:	4620      	mov	r0, r4
   1140a:	2100      	movs	r1, #0
   1140c:	f7ff f984 	bl	10718 <d_substitution>
   11410:	68e3      	ldr	r3, [r4, #12]
   11412:	9001      	str	r0, [sp, #4]
   11414:	781b      	ldrb	r3, [r3, #0]
   11416:	2b49      	cmp	r3, #73	; 0x49
   11418:	4605      	mov	r5, r0
   1141a:	f47f ae99 	bne.w	11150 <d_type+0x11c>
   1141e:	4620      	mov	r0, r4
   11420:	f7ff fc4a 	bl	10cb8 <d_template_args>
   11424:	462a      	mov	r2, r5
   11426:	4603      	mov	r3, r0
   11428:	2104      	movs	r1, #4
   1142a:	4620      	mov	r0, r4
   1142c:	f7ff f854 	bl	104d8 <d_make_comp>
   11430:	9001      	str	r0, [sp, #4]
   11432:	e6a5      	b.n	11180 <d_type+0x14c>
   11434:	4620      	mov	r0, r4
   11436:	f7ff fa97 	bl	10968 <d_template_param>
   1143a:	68e3      	ldr	r3, [r4, #12]
   1143c:	9001      	str	r0, [sp, #4]
   1143e:	781b      	ldrb	r3, [r3, #0]
   11440:	2b49      	cmp	r3, #73	; 0x49
   11442:	f47f ae9d 	bne.w	11180 <d_type+0x14c>
   11446:	2800      	cmp	r0, #0
   11448:	f43f ae81 	beq.w	1114e <d_type+0x11a>
   1144c:	6a23      	ldr	r3, [r4, #32]
   1144e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11450:	4293      	cmp	r3, r2
   11452:	f6bf ae7c 	bge.w	1114e <d_type+0x11a>
   11456:	69e2      	ldr	r2, [r4, #28]
   11458:	1c59      	adds	r1, r3, #1
   1145a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   1145e:	9d01      	ldr	r5, [sp, #4]
   11460:	6221      	str	r1, [r4, #32]
   11462:	e7dc      	b.n	1141e <d_type+0x3ea>
   11464:	3201      	adds	r2, #1
   11466:	60e2      	str	r2, [r4, #12]
   11468:	4620      	mov	r0, r4
   1146a:	f7ff faaf 	bl	109cc <d_source_name>
   1146e:	9001      	str	r0, [sp, #4]
   11470:	4620      	mov	r0, r4
   11472:	f7ff fddf 	bl	11034 <d_type>
   11476:	2121      	movs	r1, #33	; 0x21
   11478:	4602      	mov	r2, r0
   1147a:	9b01      	ldr	r3, [sp, #4]
   1147c:	4620      	mov	r0, r4
   1147e:	f7ff f82b 	bl	104d8 <d_make_comp>
   11482:	9001      	str	r0, [sp, #4]
   11484:	e67c      	b.n	11180 <d_type+0x14c>
   11486:	6961      	ldr	r1, [r4, #20]
   11488:	69a0      	ldr	r0, [r4, #24]
   1148a:	4da3      	ldr	r5, [pc, #652]	; (11718 <d_type+0x6e4>)
   1148c:	3b61      	subs	r3, #97	; 0x61
   1148e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   11492:	4281      	cmp	r1, r0
   11494:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11498:	f2c0 80f6 	blt.w	11688 <d_type+0x654>
   1149c:	2300      	movs	r3, #0
   1149e:	4618      	mov	r0, r3
   114a0:	685b      	ldr	r3, [r3, #4]
   114a2:	6859      	ldr	r1, [r3, #4]
   114a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   114a6:	3201      	adds	r2, #1
   114a8:	440b      	add	r3, r1
   114aa:	60e2      	str	r2, [r4, #12]
   114ac:	6323      	str	r3, [r4, #48]	; 0x30
   114ae:	e64f      	b.n	11150 <d_type+0x11c>
   114b0:	6963      	ldr	r3, [r4, #20]
   114b2:	69a2      	ldr	r2, [r4, #24]
   114b4:	4293      	cmp	r3, r2
   114b6:	f280 80f6 	bge.w	116a6 <d_type+0x672>
   114ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   114be:	6921      	ldr	r1, [r4, #16]
   114c0:	0092      	lsls	r2, r2, #2
   114c2:	3301      	adds	r3, #1
   114c4:	1888      	adds	r0, r1, r2
   114c6:	6163      	str	r3, [r4, #20]
   114c8:	f000 8121 	beq.w	1170e <d_type+0x6da>
   114cc:	4d93      	ldr	r5, [pc, #588]	; (1171c <d_type+0x6e8>)
   114ce:	2327      	movs	r3, #39	; 0x27
   114d0:	548b      	strb	r3, [r1, r2]
   114d2:	462b      	mov	r3, r5
   114d4:	6045      	str	r5, [r0, #4]
   114d6:	685a      	ldr	r2, [r3, #4]
   114d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   114da:	4413      	add	r3, r2
   114dc:	6323      	str	r3, [r4, #48]	; 0x30
   114de:	e637      	b.n	11150 <d_type+0x11c>
   114e0:	6963      	ldr	r3, [r4, #20]
   114e2:	69a2      	ldr	r2, [r4, #24]
   114e4:	4293      	cmp	r3, r2
   114e6:	f280 80de 	bge.w	116a6 <d_type+0x672>
   114ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   114ee:	6921      	ldr	r1, [r4, #16]
   114f0:	0092      	lsls	r2, r2, #2
   114f2:	3301      	adds	r3, #1
   114f4:	1888      	adds	r0, r1, r2
   114f6:	6163      	str	r3, [r4, #20]
   114f8:	f000 8109 	beq.w	1170e <d_type+0x6da>
   114fc:	4d88      	ldr	r5, [pc, #544]	; (11720 <d_type+0x6ec>)
   114fe:	2327      	movs	r3, #39	; 0x27
   11500:	548b      	strb	r3, [r1, r2]
   11502:	462b      	mov	r3, r5
   11504:	6045      	str	r5, [r0, #4]
   11506:	e7e6      	b.n	114d6 <d_type+0x4a2>
   11508:	6963      	ldr	r3, [r4, #20]
   1150a:	69a2      	ldr	r2, [r4, #24]
   1150c:	4293      	cmp	r3, r2
   1150e:	f280 80ca 	bge.w	116a6 <d_type+0x672>
   11512:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11516:	6921      	ldr	r1, [r4, #16]
   11518:	0092      	lsls	r2, r2, #2
   1151a:	3301      	adds	r3, #1
   1151c:	1888      	adds	r0, r1, r2
   1151e:	6163      	str	r3, [r4, #20]
   11520:	f000 80f5 	beq.w	1170e <d_type+0x6da>
   11524:	4d7f      	ldr	r5, [pc, #508]	; (11724 <d_type+0x6f0>)
   11526:	2327      	movs	r3, #39	; 0x27
   11528:	548b      	strb	r3, [r1, r2]
   1152a:	462b      	mov	r3, r5
   1152c:	6045      	str	r5, [r0, #4]
   1152e:	e7d2      	b.n	114d6 <d_type+0x4a2>
   11530:	6963      	ldr	r3, [r4, #20]
   11532:	69a2      	ldr	r2, [r4, #24]
   11534:	4293      	cmp	r3, r2
   11536:	f280 80b6 	bge.w	116a6 <d_type+0x672>
   1153a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1153e:	6921      	ldr	r1, [r4, #16]
   11540:	0092      	lsls	r2, r2, #2
   11542:	3301      	adds	r3, #1
   11544:	1888      	adds	r0, r1, r2
   11546:	6163      	str	r3, [r4, #20]
   11548:	f000 80e1 	beq.w	1170e <d_type+0x6da>
   1154c:	4d76      	ldr	r5, [pc, #472]	; (11728 <d_type+0x6f4>)
   1154e:	2327      	movs	r3, #39	; 0x27
   11550:	548b      	strb	r3, [r1, r2]
   11552:	462b      	mov	r3, r5
   11554:	6045      	str	r5, [r0, #4]
   11556:	e7be      	b.n	114d6 <d_type+0x4a2>
   11558:	6963      	ldr	r3, [r4, #20]
   1155a:	69a2      	ldr	r2, [r4, #24]
   1155c:	4293      	cmp	r3, r2
   1155e:	f280 80a2 	bge.w	116a6 <d_type+0x672>
   11562:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11566:	6921      	ldr	r1, [r4, #16]
   11568:	0092      	lsls	r2, r2, #2
   1156a:	3301      	adds	r3, #1
   1156c:	1888      	adds	r0, r1, r2
   1156e:	6163      	str	r3, [r4, #20]
   11570:	f000 80cd 	beq.w	1170e <d_type+0x6da>
   11574:	4d6d      	ldr	r5, [pc, #436]	; (1172c <d_type+0x6f8>)
   11576:	2327      	movs	r3, #39	; 0x27
   11578:	548b      	strb	r3, [r1, r2]
   1157a:	462b      	mov	r3, r5
   1157c:	6045      	str	r5, [r0, #4]
   1157e:	e7aa      	b.n	114d6 <d_type+0x4a2>
   11580:	4620      	mov	r0, r4
   11582:	496b      	ldr	r1, [pc, #428]	; (11730 <d_type+0x6fc>)
   11584:	2204      	movs	r2, #4
   11586:	f7fe fff3 	bl	10570 <d_make_name>
   1158a:	e5e1      	b.n	11150 <d_type+0x11c>
   1158c:	6963      	ldr	r3, [r4, #20]
   1158e:	69a1      	ldr	r1, [r4, #24]
   11590:	428b      	cmp	r3, r1
   11592:	f280 80ab 	bge.w	116ec <d_type+0x6b8>
   11596:	6921      	ldr	r1, [r4, #16]
   11598:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   1159c:	3301      	adds	r3, #1
   1159e:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   115a2:	6163      	str	r3, [r4, #20]
   115a4:	232c      	movs	r3, #44	; 0x2c
   115a6:	9501      	str	r5, [sp, #4]
   115a8:	702b      	strb	r3, [r5, #0]
   115aa:	7893      	ldrb	r3, [r2, #2]
   115ac:	3b30      	subs	r3, #48	; 0x30
   115ae:	2b09      	cmp	r3, #9
   115b0:	bf8c      	ite	hi
   115b2:	2300      	movhi	r3, #0
   115b4:	2301      	movls	r3, #1
   115b6:	812b      	strh	r3, [r5, #8]
   115b8:	2b00      	cmp	r3, #0
   115ba:	f040 8099 	bne.w	116f0 <d_type+0x6bc>
   115be:	4620      	mov	r0, r4
   115c0:	f7ff fd38 	bl	11034 <d_type>
   115c4:	6068      	str	r0, [r5, #4]
   115c6:	9b01      	ldr	r3, [sp, #4]
   115c8:	685b      	ldr	r3, [r3, #4]
   115ca:	2b00      	cmp	r3, #0
   115cc:	f43f adbf 	beq.w	1114e <d_type+0x11a>
   115d0:	f104 000c 	add.w	r0, r4, #12
   115d4:	f7ff f96e 	bl	108b4 <d_number.isra.0>
   115d8:	68e3      	ldr	r3, [r4, #12]
   115da:	781a      	ldrb	r2, [r3, #0]
   115dc:	b132      	cbz	r2, 115ec <d_type+0x5b8>
   115de:	1c5a      	adds	r2, r3, #1
   115e0:	60e2      	str	r2, [r4, #12]
   115e2:	781a      	ldrb	r2, [r3, #0]
   115e4:	f1b2 0373 	subs.w	r3, r2, #115	; 0x73
   115e8:	425a      	negs	r2, r3
   115ea:	415a      	adcs	r2, r3
   115ec:	9801      	ldr	r0, [sp, #4]
   115ee:	8142      	strh	r2, [r0, #10]
   115f0:	e5ae      	b.n	11150 <d_type+0x11c>
   115f2:	7893      	ldrb	r3, [r2, #2]
   115f4:	2b5f      	cmp	r3, #95	; 0x5f
   115f6:	f000 8081 	beq.w	116fc <d_type+0x6c8>
   115fa:	4620      	mov	r0, r4
   115fc:	f7ff f980 	bl	10900 <d_number_component>
   11600:	4605      	mov	r5, r0
   11602:	2d00      	cmp	r5, #0
   11604:	f000 8081 	beq.w	1170a <d_type+0x6d6>
   11608:	68e3      	ldr	r3, [r4, #12]
   1160a:	781a      	ldrb	r2, [r3, #0]
   1160c:	2a5f      	cmp	r2, #95	; 0x5f
   1160e:	f47f ae12 	bne.w	11236 <d_type+0x202>
   11612:	3301      	adds	r3, #1
   11614:	60e3      	str	r3, [r4, #12]
   11616:	4620      	mov	r0, r4
   11618:	f7ff fd0c 	bl	11034 <d_type>
   1161c:	462a      	mov	r2, r5
   1161e:	4603      	mov	r3, r0
   11620:	212d      	movs	r1, #45	; 0x2d
   11622:	4620      	mov	r0, r4
   11624:	f7fe ff58 	bl	104d8 <d_make_comp>
   11628:	e5ba      	b.n	111a0 <d_type+0x16c>
   1162a:	6963      	ldr	r3, [r4, #20]
   1162c:	69a2      	ldr	r2, [r4, #24]
   1162e:	4293      	cmp	r3, r2
   11630:	da39      	bge.n	116a6 <d_type+0x672>
   11632:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11636:	6921      	ldr	r1, [r4, #16]
   11638:	0092      	lsls	r2, r2, #2
   1163a:	3301      	adds	r3, #1
   1163c:	1888      	adds	r0, r1, r2
   1163e:	6163      	str	r3, [r4, #20]
   11640:	d065      	beq.n	1170e <d_type+0x6da>
   11642:	4d3c      	ldr	r5, [pc, #240]	; (11734 <d_type+0x700>)
   11644:	2327      	movs	r3, #39	; 0x27
   11646:	548b      	strb	r3, [r1, r2]
   11648:	462b      	mov	r3, r5
   1164a:	6045      	str	r5, [r0, #4]
   1164c:	e743      	b.n	114d6 <d_type+0x4a2>
   1164e:	4620      	mov	r0, r4
   11650:	f7ff fcf0 	bl	11034 <d_type>
   11654:	2149      	movs	r1, #73	; 0x49
   11656:	4602      	mov	r2, r0
   11658:	2300      	movs	r3, #0
   1165a:	4620      	mov	r0, r4
   1165c:	f7fe ff3c 	bl	104d8 <d_make_comp>
   11660:	9001      	str	r0, [sp, #4]
   11662:	e58d      	b.n	11180 <d_type+0x14c>
   11664:	6963      	ldr	r3, [r4, #20]
   11666:	69a2      	ldr	r2, [r4, #24]
   11668:	4293      	cmp	r3, r2
   1166a:	da1c      	bge.n	116a6 <d_type+0x672>
   1166c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11670:	6921      	ldr	r1, [r4, #16]
   11672:	0092      	lsls	r2, r2, #2
   11674:	3301      	adds	r3, #1
   11676:	1888      	adds	r0, r1, r2
   11678:	6163      	str	r3, [r4, #20]
   1167a:	d048      	beq.n	1170e <d_type+0x6da>
   1167c:	4d2e      	ldr	r5, [pc, #184]	; (11738 <d_type+0x704>)
   1167e:	2327      	movs	r3, #39	; 0x27
   11680:	548b      	strb	r3, [r1, r2]
   11682:	462b      	mov	r3, r5
   11684:	6045      	str	r5, [r0, #4]
   11686:	e726      	b.n	114d6 <d_type+0x4a2>
   11688:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   1168c:	6925      	ldr	r5, [r4, #16]
   1168e:	3101      	adds	r1, #1
   11690:	0080      	lsls	r0, r0, #2
   11692:	6161      	str	r1, [r4, #20]
   11694:	1829      	adds	r1, r5, r0
   11696:	d03c      	beq.n	11712 <d_type+0x6de>
   11698:	2627      	movs	r6, #39	; 0x27
   1169a:	542e      	strb	r6, [r5, r0]
   1169c:	4608      	mov	r0, r1
   1169e:	604b      	str	r3, [r1, #4]
   116a0:	e6ff      	b.n	114a2 <d_type+0x46e>
   116a2:	2500      	movs	r5, #0
   116a4:	e59a      	b.n	111dc <d_type+0x1a8>
   116a6:	2300      	movs	r3, #0
   116a8:	4618      	mov	r0, r3
   116aa:	685b      	ldr	r3, [r3, #4]
   116ac:	e713      	b.n	114d6 <d_type+0x4a2>
   116ae:	3301      	adds	r3, #1
   116b0:	60e3      	str	r3, [r4, #12]
   116b2:	e575      	b.n	111a0 <d_type+0x16c>
   116b4:	4620      	mov	r0, r4
   116b6:	f000 fd8f 	bl	121d8 <d_expression>
   116ba:	4605      	mov	r5, r0
   116bc:	2800      	cmp	r0, #0
   116be:	f47f ad89 	bne.w	111d4 <d_type+0x1a0>
   116c2:	e5b8      	b.n	11236 <d_type+0x202>
   116c4:	9901      	ldr	r1, [sp, #4]
   116c6:	6842      	ldr	r2, [r0, #4]
   116c8:	6041      	str	r1, [r0, #4]
   116ca:	682b      	ldr	r3, [r5, #0]
   116cc:	9301      	str	r3, [sp, #4]
   116ce:	7811      	ldrb	r1, [r2, #0]
   116d0:	602a      	str	r2, [r5, #0]
   116d2:	e650      	b.n	11376 <d_type+0x342>
   116d4:	4620      	mov	r0, r4
   116d6:	f7ff fb4d 	bl	10d74 <d_name>
   116da:	9001      	str	r0, [sp, #4]
   116dc:	2800      	cmp	r0, #0
   116de:	f43f ad36 	beq.w	1114e <d_type+0x11a>
   116e2:	7803      	ldrb	r3, [r0, #0]
   116e4:	2b18      	cmp	r3, #24
   116e6:	f47f ad4d 	bne.w	11184 <d_type+0x150>
   116ea:	e531      	b.n	11150 <d_type+0x11c>
   116ec:	2500      	movs	r5, #0
   116ee:	e759      	b.n	115a4 <d_type+0x570>
   116f0:	f104 000c 	add.w	r0, r4, #12
   116f4:	f7ff f8de 	bl	108b4 <d_number.isra.0>
   116f8:	9d01      	ldr	r5, [sp, #4]
   116fa:	e760      	b.n	115be <d_type+0x58a>
   116fc:	3203      	adds	r2, #3
   116fe:	60e2      	str	r2, [r4, #12]
   11700:	4620      	mov	r0, r4
   11702:	f000 fd69 	bl	121d8 <d_expression>
   11706:	4605      	mov	r5, r0
   11708:	e77b      	b.n	11602 <d_type+0x5ce>
   1170a:	4628      	mov	r0, r5
   1170c:	e548      	b.n	111a0 <d_type+0x16c>
   1170e:	6843      	ldr	r3, [r0, #4]
   11710:	e6e1      	b.n	114d6 <d_type+0x4a2>
   11712:	684b      	ldr	r3, [r1, #4]
   11714:	4608      	mov	r0, r1
   11716:	e6c4      	b.n	114a2 <d_type+0x46e>
   11718:	00019ae4 	.word	0x00019ae4
   1171c:	00019d50 	.word	0x00019d50
   11720:	00019d28 	.word	0x00019d28
   11724:	00019cec 	.word	0x00019cec
   11728:	00019d14 	.word	0x00019d14
   1172c:	00019d00 	.word	0x00019d00
   11730:	0001a574 	.word	0x0001a574
   11734:	00019d3c 	.word	0x00019d3c
   11738:	00019d64 	.word	0x00019d64

0001173c <d_parmlist>:
d_parmlist():
   1173c:	b570      	push	{r4, r5, r6, lr}
   1173e:	b082      	sub	sp, #8
   11740:	2300      	movs	r3, #0
   11742:	68c1      	ldr	r1, [r0, #12]
   11744:	9301      	str	r3, [sp, #4]
   11746:	780b      	ldrb	r3, [r1, #0]
   11748:	4604      	mov	r4, r0
   1174a:	b34b      	cbz	r3, 117a0 <d_parmlist+0x64>
   1174c:	2b45      	cmp	r3, #69	; 0x45
   1174e:	d027      	beq.n	117a0 <d_parmlist+0x64>
   11750:	2b2e      	cmp	r3, #46	; 0x2e
   11752:	d025      	beq.n	117a0 <d_parmlist+0x64>
   11754:	ae01      	add	r6, sp, #4
   11756:	e017      	b.n	11788 <d_parmlist+0x4c>
   11758:	2b4f      	cmp	r3, #79	; 0x4f
   1175a:	d017      	beq.n	1178c <d_parmlist+0x50>
   1175c:	4620      	mov	r0, r4
   1175e:	f7ff fc69 	bl	11034 <d_type>
   11762:	4605      	mov	r5, r0
   11764:	212e      	movs	r1, #46	; 0x2e
   11766:	4620      	mov	r0, r4
   11768:	462a      	mov	r2, r5
   1176a:	2300      	movs	r3, #0
   1176c:	b1c5      	cbz	r5, 117a0 <d_parmlist+0x64>
   1176e:	f7fe feb3 	bl	104d8 <d_make_comp>
   11772:	6030      	str	r0, [r6, #0]
   11774:	b1a0      	cbz	r0, 117a0 <d_parmlist+0x64>
   11776:	68e1      	ldr	r1, [r4, #12]
   11778:	780b      	ldrb	r3, [r1, #0]
   1177a:	f100 0608 	add.w	r6, r0, #8
   1177e:	b143      	cbz	r3, 11792 <d_parmlist+0x56>
   11780:	2b45      	cmp	r3, #69	; 0x45
   11782:	d006      	beq.n	11792 <d_parmlist+0x56>
   11784:	2b2e      	cmp	r3, #46	; 0x2e
   11786:	d004      	beq.n	11792 <d_parmlist+0x56>
   11788:	2b52      	cmp	r3, #82	; 0x52
   1178a:	d1e5      	bne.n	11758 <d_parmlist+0x1c>
   1178c:	784b      	ldrb	r3, [r1, #1]
   1178e:	2b45      	cmp	r3, #69	; 0x45
   11790:	d1e4      	bne.n	1175c <d_parmlist+0x20>
   11792:	9b01      	ldr	r3, [sp, #4]
   11794:	b123      	cbz	r3, 117a0 <d_parmlist+0x64>
   11796:	689a      	ldr	r2, [r3, #8]
   11798:	b12a      	cbz	r2, 117a6 <d_parmlist+0x6a>
   1179a:	4618      	mov	r0, r3
   1179c:	b002      	add	sp, #8
   1179e:	bd70      	pop	{r4, r5, r6, pc}
   117a0:	2000      	movs	r0, #0
   117a2:	b002      	add	sp, #8
   117a4:	bd70      	pop	{r4, r5, r6, pc}
   117a6:	6859      	ldr	r1, [r3, #4]
   117a8:	7808      	ldrb	r0, [r1, #0]
   117aa:	2827      	cmp	r0, #39	; 0x27
   117ac:	d1f5      	bne.n	1179a <d_parmlist+0x5e>
   117ae:	6849      	ldr	r1, [r1, #4]
   117b0:	7c08      	ldrb	r0, [r1, #16]
   117b2:	2809      	cmp	r0, #9
   117b4:	d1f1      	bne.n	1179a <d_parmlist+0x5e>
   117b6:	6848      	ldr	r0, [r1, #4]
   117b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   117ba:	1a09      	subs	r1, r1, r0
   117bc:	6321      	str	r1, [r4, #48]	; 0x30
   117be:	4618      	mov	r0, r3
   117c0:	605a      	str	r2, [r3, #4]
   117c2:	e7eb      	b.n	1179c <d_parmlist+0x60>

000117c4 <d_bare_function_type>:
d_bare_function_type():
   117c4:	b570      	push	{r4, r5, r6, lr}
   117c6:	68c3      	ldr	r3, [r0, #12]
   117c8:	781a      	ldrb	r2, [r3, #0]
   117ca:	2a4a      	cmp	r2, #74	; 0x4a
   117cc:	4604      	mov	r4, r0
   117ce:	d00d      	beq.n	117ec <d_bare_function_type+0x28>
   117d0:	b971      	cbnz	r1, 117f0 <d_bare_function_type+0x2c>
   117d2:	460d      	mov	r5, r1
   117d4:	4620      	mov	r0, r4
   117d6:	f7ff ffb1 	bl	1173c <d_parmlist>
   117da:	4603      	mov	r3, r0
   117dc:	b170      	cbz	r0, 117fc <d_bare_function_type+0x38>
   117de:	4620      	mov	r0, r4
   117e0:	462a      	mov	r2, r5
   117e2:	2129      	movs	r1, #41	; 0x29
   117e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117e8:	f7fe be76 	b.w	104d8 <d_make_comp>
   117ec:	3301      	adds	r3, #1
   117ee:	60c3      	str	r3, [r0, #12]
   117f0:	4620      	mov	r0, r4
   117f2:	f7ff fc1f 	bl	11034 <d_type>
   117f6:	4605      	mov	r5, r0
   117f8:	2800      	cmp	r0, #0
   117fa:	d1eb      	bne.n	117d4 <d_bare_function_type+0x10>
   117fc:	2000      	movs	r0, #0
   117fe:	bd70      	pop	{r4, r5, r6, pc}

00011800 <d_encoding>:
d_encoding():
   11800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11804:	68c3      	ldr	r3, [r0, #12]
   11806:	781a      	ldrb	r2, [r3, #0]
   11808:	2a47      	cmp	r2, #71	; 0x47
   1180a:	4605      	mov	r5, r0
   1180c:	460e      	mov	r6, r1
   1180e:	d034      	beq.n	1187a <d_encoding+0x7a>
   11810:	2a54      	cmp	r2, #84	; 0x54
   11812:	d032      	beq.n	1187a <d_encoding+0x7a>
   11814:	f7ff faae 	bl	10d74 <d_name>
   11818:	4604      	mov	r4, r0
   1181a:	b358      	cbz	r0, 11874 <d_encoding+0x74>
   1181c:	b116      	cbz	r6, 11824 <d_encoding+0x24>
   1181e:	68ab      	ldr	r3, [r5, #8]
   11820:	07db      	lsls	r3, r3, #31
   11822:	d51f      	bpl.n	11864 <d_encoding+0x64>
   11824:	68eb      	ldr	r3, [r5, #12]
   11826:	781b      	ldrb	r3, [r3, #0]
   11828:	b323      	cbz	r3, 11874 <d_encoding+0x74>
   1182a:	2b45      	cmp	r3, #69	; 0x45
   1182c:	d022      	beq.n	11874 <d_encoding+0x74>
   1182e:	4621      	mov	r1, r4
   11830:	780b      	ldrb	r3, [r1, #0]
   11832:	2b04      	cmp	r3, #4
   11834:	f1a3 021c 	sub.w	r2, r3, #28
   11838:	f000 80a4 	beq.w	11984 <d_encoding+0x184>
   1183c:	f0c0 80a0 	bcc.w	11980 <d_encoding+0x180>
   11840:	2a04      	cmp	r2, #4
   11842:	f200 809d 	bhi.w	11980 <d_encoding+0x180>
   11846:	6849      	ldr	r1, [r1, #4]
   11848:	2900      	cmp	r1, #0
   1184a:	d1f1      	bne.n	11830 <d_encoding+0x30>
   1184c:	4628      	mov	r0, r5
   1184e:	f7ff ffb9 	bl	117c4 <d_bare_function_type>
   11852:	4622      	mov	r2, r4
   11854:	4603      	mov	r3, r0
   11856:	2103      	movs	r1, #3
   11858:	4628      	mov	r0, r5
   1185a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1185e:	f7fe be3b 	b.w	104d8 <d_make_comp>
   11862:	6864      	ldr	r4, [r4, #4]
   11864:	7823      	ldrb	r3, [r4, #0]
   11866:	f1a3 021c 	sub.w	r2, r3, #28
   1186a:	2a04      	cmp	r2, #4
   1186c:	d9f9      	bls.n	11862 <d_encoding+0x62>
   1186e:	2b02      	cmp	r3, #2
   11870:	f000 816e 	beq.w	11b50 <d_encoding+0x350>
   11874:	4620      	mov	r0, r4
   11876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1187a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1187c:	f101 0214 	add.w	r2, r1, #20
   11880:	632a      	str	r2, [r5, #48]	; 0x30
   11882:	781a      	ldrb	r2, [r3, #0]
   11884:	2a54      	cmp	r2, #84	; 0x54
   11886:	d005      	beq.n	11894 <d_encoding+0x94>
   11888:	2a47      	cmp	r2, #71	; 0x47
   1188a:	f000 80ed 	beq.w	11a68 <d_encoding+0x268>
   1188e:	2000      	movs	r0, #0
   11890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11894:	1c5a      	adds	r2, r3, #1
   11896:	60ea      	str	r2, [r5, #12]
   11898:	785a      	ldrb	r2, [r3, #1]
   1189a:	2a00      	cmp	r2, #0
   1189c:	d0f7      	beq.n	1188e <d_encoding+0x8e>
   1189e:	1c9a      	adds	r2, r3, #2
   118a0:	60ea      	str	r2, [r5, #12]
   118a2:	785b      	ldrb	r3, [r3, #1]
   118a4:	3b43      	subs	r3, #67	; 0x43
   118a6:	2b33      	cmp	r3, #51	; 0x33
   118a8:	d8f1      	bhi.n	1188e <d_encoding+0x8e>
   118aa:	a201      	add	r2, pc, #4	; (adr r2, 118b0 <d_encoding+0xb0>)
   118ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   118b0:	00011dbd 	.word	0x00011dbd
   118b4:	0001188f 	.word	0x0001188f
   118b8:	0001188f 	.word	0x0001188f
   118bc:	00011da7 	.word	0x00011da7
   118c0:	0001188f 	.word	0x0001188f
   118c4:	00011d91 	.word	0x00011d91
   118c8:	00011d7b 	.word	0x00011d7b
   118cc:	00011d65 	.word	0x00011d65
   118d0:	0001188f 	.word	0x0001188f
   118d4:	0001188f 	.word	0x0001188f
   118d8:	0001188f 	.word	0x0001188f
   118dc:	0001188f 	.word	0x0001188f
   118e0:	0001188f 	.word	0x0001188f
   118e4:	0001188f 	.word	0x0001188f
   118e8:	0001188f 	.word	0x0001188f
   118ec:	0001188f 	.word	0x0001188f
   118f0:	00011d4f 	.word	0x00011d4f
   118f4:	00011d35 	.word	0x00011d35
   118f8:	0001188f 	.word	0x0001188f
   118fc:	00011d1b 	.word	0x00011d1b
   11900:	00011cdf 	.word	0x00011cdf
   11904:	0001188f 	.word	0x0001188f
   11908:	0001188f 	.word	0x0001188f
   1190c:	0001188f 	.word	0x0001188f
   11910:	0001188f 	.word	0x0001188f
   11914:	0001188f 	.word	0x0001188f
   11918:	0001188f 	.word	0x0001188f
   1191c:	0001188f 	.word	0x0001188f
   11920:	0001188f 	.word	0x0001188f
   11924:	0001188f 	.word	0x0001188f
   11928:	0001188f 	.word	0x0001188f
   1192c:	0001188f 	.word	0x0001188f
   11930:	00011cab 	.word	0x00011cab
   11934:	0001188f 	.word	0x0001188f
   11938:	0001188f 	.word	0x0001188f
   1193c:	0001188f 	.word	0x0001188f
   11940:	0001188f 	.word	0x0001188f
   11944:	00011cf5 	.word	0x00011cf5
   11948:	0001188f 	.word	0x0001188f
   1194c:	0001188f 	.word	0x0001188f
   11950:	0001188f 	.word	0x0001188f
   11954:	0001188f 	.word	0x0001188f
   11958:	0001188f 	.word	0x0001188f
   1195c:	0001188f 	.word	0x0001188f
   11960:	0001188f 	.word	0x0001188f
   11964:	0001188f 	.word	0x0001188f
   11968:	0001188f 	.word	0x0001188f
   1196c:	0001188f 	.word	0x0001188f
   11970:	0001188f 	.word	0x0001188f
   11974:	0001188f 	.word	0x0001188f
   11978:	0001188f 	.word	0x0001188f
   1197c:	00011c85 	.word	0x00011c85
   11980:	2100      	movs	r1, #0
   11982:	e763      	b.n	1184c <d_encoding+0x4c>
   11984:	684b      	ldr	r3, [r1, #4]
   11986:	2b00      	cmp	r3, #0
   11988:	f000 80f4 	beq.w	11b74 <d_encoding+0x374>
   1198c:	781a      	ldrb	r2, [r3, #0]
   1198e:	3a01      	subs	r2, #1
   11990:	2a32      	cmp	r2, #50	; 0x32
   11992:	f200 80ef 	bhi.w	11b74 <d_encoding+0x374>
   11996:	a101      	add	r1, pc, #4	; (adr r1, 1199c <d_encoding+0x19c>)
   11998:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1199c:	00011b6d 	.word	0x00011b6d
   119a0:	00011b6d 	.word	0x00011b6d
   119a4:	00011b75 	.word	0x00011b75
   119a8:	00011b75 	.word	0x00011b75
   119ac:	00011b75 	.word	0x00011b75
   119b0:	00011b75 	.word	0x00011b75
   119b4:	00011981 	.word	0x00011981
   119b8:	00011981 	.word	0x00011981
   119bc:	00011b75 	.word	0x00011b75
   119c0:	00011b75 	.word	0x00011b75
   119c4:	00011b75 	.word	0x00011b75
   119c8:	00011b75 	.word	0x00011b75
   119cc:	00011b75 	.word	0x00011b75
   119d0:	00011b75 	.word	0x00011b75
   119d4:	00011b75 	.word	0x00011b75
   119d8:	00011b75 	.word	0x00011b75
   119dc:	00011b75 	.word	0x00011b75
   119e0:	00011b75 	.word	0x00011b75
   119e4:	00011b75 	.word	0x00011b75
   119e8:	00011b75 	.word	0x00011b75
   119ec:	00011b75 	.word	0x00011b75
   119f0:	00011b75 	.word	0x00011b75
   119f4:	00011b75 	.word	0x00011b75
   119f8:	00011b75 	.word	0x00011b75
   119fc:	00011b75 	.word	0x00011b75
   11a00:	00011b75 	.word	0x00011b75
   11a04:	00011b75 	.word	0x00011b75
   11a08:	00011b75 	.word	0x00011b75
   11a0c:	00011b75 	.word	0x00011b75
   11a10:	00011b75 	.word	0x00011b75
   11a14:	00011b75 	.word	0x00011b75
   11a18:	00011b75 	.word	0x00011b75
   11a1c:	00011b75 	.word	0x00011b75
   11a20:	00011b75 	.word	0x00011b75
   11a24:	00011b75 	.word	0x00011b75
   11a28:	00011b75 	.word	0x00011b75
   11a2c:	00011b75 	.word	0x00011b75
   11a30:	00011b75 	.word	0x00011b75
   11a34:	00011b75 	.word	0x00011b75
   11a38:	00011b75 	.word	0x00011b75
   11a3c:	00011b75 	.word	0x00011b75
   11a40:	00011b75 	.word	0x00011b75
   11a44:	00011b75 	.word	0x00011b75
   11a48:	00011b75 	.word	0x00011b75
   11a4c:	00011b75 	.word	0x00011b75
   11a50:	00011b75 	.word	0x00011b75
   11a54:	00011b75 	.word	0x00011b75
   11a58:	00011b75 	.word	0x00011b75
   11a5c:	00011b75 	.word	0x00011b75
   11a60:	00011b75 	.word	0x00011b75
   11a64:	00011981 	.word	0x00011981
   11a68:	1c5a      	adds	r2, r3, #1
   11a6a:	60ea      	str	r2, [r5, #12]
   11a6c:	785a      	ldrb	r2, [r3, #1]
   11a6e:	2a00      	cmp	r2, #0
   11a70:	f43f af0d 	beq.w	1188e <d_encoding+0x8e>
   11a74:	1c9a      	adds	r2, r3, #2
   11a76:	60ea      	str	r2, [r5, #12]
   11a78:	785a      	ldrb	r2, [r3, #1]
   11a7a:	3a41      	subs	r2, #65	; 0x41
   11a7c:	2a31      	cmp	r2, #49	; 0x31
   11a7e:	f63f af06 	bhi.w	1188e <d_encoding+0x8e>
   11a82:	a101      	add	r1, pc, #4	; (adr r1, 11a88 <d_encoding+0x288>)
   11a84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11a88:	00011c41 	.word	0x00011c41
   11a8c:	0001188f 	.word	0x0001188f
   11a90:	0001188f 	.word	0x0001188f
   11a94:	0001188f 	.word	0x0001188f
   11a98:	0001188f 	.word	0x0001188f
   11a9c:	0001188f 	.word	0x0001188f
   11aa0:	0001188f 	.word	0x0001188f
   11aa4:	0001188f 	.word	0x0001188f
   11aa8:	0001188f 	.word	0x0001188f
   11aac:	0001188f 	.word	0x0001188f
   11ab0:	0001188f 	.word	0x0001188f
   11ab4:	0001188f 	.word	0x0001188f
   11ab8:	0001188f 	.word	0x0001188f
   11abc:	0001188f 	.word	0x0001188f
   11ac0:	0001188f 	.word	0x0001188f
   11ac4:	0001188f 	.word	0x0001188f
   11ac8:	0001188f 	.word	0x0001188f
   11acc:	00011c23 	.word	0x00011c23
   11ad0:	0001188f 	.word	0x0001188f
   11ad4:	00011c59 	.word	0x00011c59
   11ad8:	0001188f 	.word	0x0001188f
   11adc:	00011c0d 	.word	0x00011c0d
   11ae0:	0001188f 	.word	0x0001188f
   11ae4:	0001188f 	.word	0x0001188f
   11ae8:	0001188f 	.word	0x0001188f
   11aec:	0001188f 	.word	0x0001188f
   11af0:	0001188f 	.word	0x0001188f
   11af4:	0001188f 	.word	0x0001188f
   11af8:	0001188f 	.word	0x0001188f
   11afc:	0001188f 	.word	0x0001188f
   11b00:	0001188f 	.word	0x0001188f
   11b04:	0001188f 	.word	0x0001188f
   11b08:	0001188f 	.word	0x0001188f
   11b0c:	0001188f 	.word	0x0001188f
   11b10:	0001188f 	.word	0x0001188f
   11b14:	0001188f 	.word	0x0001188f
   11b18:	0001188f 	.word	0x0001188f
   11b1c:	0001188f 	.word	0x0001188f
   11b20:	0001188f 	.word	0x0001188f
   11b24:	0001188f 	.word	0x0001188f
   11b28:	0001188f 	.word	0x0001188f
   11b2c:	0001188f 	.word	0x0001188f
   11b30:	0001188f 	.word	0x0001188f
   11b34:	0001188f 	.word	0x0001188f
   11b38:	0001188f 	.word	0x0001188f
   11b3c:	0001188f 	.word	0x0001188f
   11b40:	0001188f 	.word	0x0001188f
   11b44:	0001188f 	.word	0x0001188f
   11b48:	0001188f 	.word	0x0001188f
   11b4c:	00011b79 	.word	0x00011b79
   11b50:	68a3      	ldr	r3, [r4, #8]
   11b52:	781a      	ldrb	r2, [r3, #0]
   11b54:	3a1c      	subs	r2, #28
   11b56:	2a04      	cmp	r2, #4
   11b58:	d804      	bhi.n	11b64 <d_encoding+0x364>
   11b5a:	685b      	ldr	r3, [r3, #4]
   11b5c:	781a      	ldrb	r2, [r3, #0]
   11b5e:	3a1c      	subs	r2, #28
   11b60:	2a04      	cmp	r2, #4
   11b62:	d9fa      	bls.n	11b5a <d_encoding+0x35a>
   11b64:	60a3      	str	r3, [r4, #8]
   11b66:	4620      	mov	r0, r4
   11b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b6c:	689b      	ldr	r3, [r3, #8]
   11b6e:	2b00      	cmp	r3, #0
   11b70:	f47f af0c 	bne.w	1198c <d_encoding+0x18c>
   11b74:	2101      	movs	r1, #1
   11b76:	e669      	b.n	1184c <d_encoding+0x4c>
   11b78:	f105 000c 	add.w	r0, r5, #12
   11b7c:	f7fe fe9a 	bl	108b4 <d_number.isra.0>
   11b80:	2801      	cmp	r0, #1
   11b82:	f77f ae84 	ble.w	1188e <d_encoding+0x8e>
   11b86:	68eb      	ldr	r3, [r5, #12]
   11b88:	781a      	ldrb	r2, [r3, #0]
   11b8a:	2a00      	cmp	r2, #0
   11b8c:	f43f ae7f 	beq.w	1188e <d_encoding+0x8e>
   11b90:	1c5e      	adds	r6, r3, #1
   11b92:	60ee      	str	r6, [r5, #12]
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	2b5f      	cmp	r3, #95	; 0x5f
   11b98:	f47f ae79 	bne.w	1188e <d_encoding+0x8e>
   11b9c:	1e47      	subs	r7, r0, #1
   11b9e:	f04f 0800 	mov.w	r8, #0
   11ba2:	f04f 093f 	mov.w	r9, #63	; 0x3f
   11ba6:	7833      	ldrb	r3, [r6, #0]
   11ba8:	2b00      	cmp	r3, #0
   11baa:	f43f ae70 	beq.w	1188e <d_encoding+0x8e>
   11bae:	2b24      	cmp	r3, #36	; 0x24
   11bb0:	f000 8124 	beq.w	11dfc <d_encoding+0x5fc>
   11bb4:	2400      	movs	r4, #0
   11bb6:	5d33      	ldrb	r3, [r6, r4]
   11bb8:	b123      	cbz	r3, 11bc4 <d_encoding+0x3c4>
   11bba:	2b24      	cmp	r3, #36	; 0x24
   11bbc:	d002      	beq.n	11bc4 <d_encoding+0x3c4>
   11bbe:	3401      	adds	r4, #1
   11bc0:	42bc      	cmp	r4, r7
   11bc2:	dbf8      	blt.n	11bb6 <d_encoding+0x3b6>
   11bc4:	4631      	mov	r1, r6
   11bc6:	4628      	mov	r0, r5
   11bc8:	4622      	mov	r2, r4
   11bca:	f7fe fcd1 	bl	10570 <d_make_name>
   11bce:	68ee      	ldr	r6, [r5, #12]
   11bd0:	4426      	add	r6, r4
   11bd2:	1b3f      	subs	r7, r7, r4
   11bd4:	60ee      	str	r6, [r5, #12]
   11bd6:	2800      	cmp	r0, #0
   11bd8:	f43f ae59 	beq.w	1188e <d_encoding+0x8e>
   11bdc:	f1b8 0f00 	cmp.w	r8, #0
   11be0:	f000 8129 	beq.w	11e36 <d_encoding+0x636>
   11be4:	4642      	mov	r2, r8
   11be6:	4603      	mov	r3, r0
   11be8:	213e      	movs	r1, #62	; 0x3e
   11bea:	4628      	mov	r0, r5
   11bec:	f7fe fc74 	bl	104d8 <d_make_comp>
   11bf0:	4680      	mov	r8, r0
   11bf2:	2800      	cmp	r0, #0
   11bf4:	f43f ae4b 	beq.w	1188e <d_encoding+0x8e>
   11bf8:	2f00      	cmp	r7, #0
   11bfa:	dcd4      	bgt.n	11ba6 <d_encoding+0x3a6>
   11bfc:	4628      	mov	r0, r5
   11bfe:	4642      	mov	r2, r8
   11c00:	213d      	movs	r1, #61	; 0x3d
   11c02:	2300      	movs	r3, #0
   11c04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c08:	f7fe bc66 	b.w	104d8 <d_make_comp>
   11c0c:	4628      	mov	r0, r5
   11c0e:	f7ff f8b1 	bl	10d74 <d_name>
   11c12:	2113      	movs	r1, #19
   11c14:	4602      	mov	r2, r0
   11c16:	2300      	movs	r3, #0
   11c18:	4628      	mov	r0, r5
   11c1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c1e:	f7fe bc5b 	b.w	104d8 <d_make_comp>
   11c22:	4628      	mov	r0, r5
   11c24:	f7ff f8a6 	bl	10d74 <d_name>
   11c28:	4604      	mov	r4, r0
   11c2a:	4628      	mov	r0, r5
   11c2c:	f7fe fe68 	bl	10900 <d_number_component>
   11c30:	4622      	mov	r2, r4
   11c32:	4603      	mov	r3, r0
   11c34:	2116      	movs	r1, #22
   11c36:	4628      	mov	r0, r5
   11c38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c3c:	f7fe bc4c 	b.w	104d8 <d_make_comp>
   11c40:	4628      	mov	r0, r5
   11c42:	2100      	movs	r1, #0
   11c44:	f7ff fddc 	bl	11800 <d_encoding>
   11c48:	2117      	movs	r1, #23
   11c4a:	4602      	mov	r2, r0
   11c4c:	2300      	movs	r3, #0
   11c4e:	4628      	mov	r0, r5
   11c50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c54:	f7fe bc40 	b.w	104d8 <d_make_comp>
   11c58:	789a      	ldrb	r2, [r3, #2]
   11c5a:	4628      	mov	r0, r5
   11c5c:	2100      	movs	r1, #0
   11c5e:	2a00      	cmp	r2, #0
   11c60:	f000 80eb 	beq.w	11e3a <d_encoding+0x63a>
   11c64:	1cda      	adds	r2, r3, #3
   11c66:	60ea      	str	r2, [r5, #12]
   11c68:	789b      	ldrb	r3, [r3, #2]
   11c6a:	2b6e      	cmp	r3, #110	; 0x6e
   11c6c:	f040 80e5 	bne.w	11e3a <d_encoding+0x63a>
   11c70:	f7ff fdc6 	bl	11800 <d_encoding>
   11c74:	2148      	movs	r1, #72	; 0x48
   11c76:	4602      	mov	r2, r0
   11c78:	2300      	movs	r3, #0
   11c7a:	4628      	mov	r0, r5
   11c7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c80:	f7fe bc2a 	b.w	104d8 <d_make_comp>
   11c84:	4628      	mov	r0, r5
   11c86:	2176      	movs	r1, #118	; 0x76
   11c88:	f7fe fee2 	bl	10a50 <d_call_offset>
   11c8c:	2800      	cmp	r0, #0
   11c8e:	f43f adfe 	beq.w	1188e <d_encoding+0x8e>
   11c92:	4628      	mov	r0, r5
   11c94:	2100      	movs	r1, #0
   11c96:	f7ff fdb3 	bl	11800 <d_encoding>
   11c9a:	2110      	movs	r1, #16
   11c9c:	4602      	mov	r2, r0
   11c9e:	2300      	movs	r3, #0
   11ca0:	4628      	mov	r0, r5
   11ca2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ca6:	f7fe bc17 	b.w	104d8 <d_make_comp>
   11caa:	4628      	mov	r0, r5
   11cac:	2100      	movs	r1, #0
   11cae:	f7fe fecf 	bl	10a50 <d_call_offset>
   11cb2:	2800      	cmp	r0, #0
   11cb4:	f43f adeb 	beq.w	1188e <d_encoding+0x8e>
   11cb8:	4628      	mov	r0, r5
   11cba:	2100      	movs	r1, #0
   11cbc:	f7fe fec8 	bl	10a50 <d_call_offset>
   11cc0:	2800      	cmp	r0, #0
   11cc2:	f43f ade4 	beq.w	1188e <d_encoding+0x8e>
   11cc6:	4628      	mov	r0, r5
   11cc8:	2100      	movs	r1, #0
   11cca:	f7ff fd99 	bl	11800 <d_encoding>
   11cce:	2111      	movs	r1, #17
   11cd0:	4602      	mov	r2, r0
   11cd2:	2300      	movs	r3, #0
   11cd4:	4628      	mov	r0, r5
   11cd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cda:	f7fe bbfd 	b.w	104d8 <d_make_comp>
   11cde:	4628      	mov	r0, r5
   11ce0:	f7ff f848 	bl	10d74 <d_name>
   11ce4:	2115      	movs	r1, #21
   11ce6:	4602      	mov	r2, r0
   11ce8:	2300      	movs	r3, #0
   11cea:	4628      	mov	r0, r5
   11cec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cf0:	f7fe bbf2 	b.w	104d8 <d_make_comp>
   11cf4:	4628      	mov	r0, r5
   11cf6:	2168      	movs	r1, #104	; 0x68
   11cf8:	f7fe feaa 	bl	10a50 <d_call_offset>
   11cfc:	2800      	cmp	r0, #0
   11cfe:	f43f adc6 	beq.w	1188e <d_encoding+0x8e>
   11d02:	4628      	mov	r0, r5
   11d04:	2100      	movs	r1, #0
   11d06:	f7ff fd7b 	bl	11800 <d_encoding>
   11d0a:	210f      	movs	r1, #15
   11d0c:	4602      	mov	r2, r0
   11d0e:	2300      	movs	r3, #0
   11d10:	4628      	mov	r0, r5
   11d12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d16:	f7fe bbdf 	b.w	104d8 <d_make_comp>
   11d1a:	310f      	adds	r1, #15
   11d1c:	6329      	str	r1, [r5, #48]	; 0x30
   11d1e:	4628      	mov	r0, r5
   11d20:	f7ff f988 	bl	11034 <d_type>
   11d24:	2109      	movs	r1, #9
   11d26:	4602      	mov	r2, r0
   11d28:	2300      	movs	r3, #0
   11d2a:	4628      	mov	r0, r5
   11d2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d30:	f7fe bbd2 	b.w	104d8 <d_make_comp>
   11d34:	310a      	adds	r1, #10
   11d36:	6329      	str	r1, [r5, #48]	; 0x30
   11d38:	4628      	mov	r0, r5
   11d3a:	f7ff f97b 	bl	11034 <d_type>
   11d3e:	210a      	movs	r1, #10
   11d40:	4602      	mov	r2, r0
   11d42:	2300      	movs	r3, #0
   11d44:	4628      	mov	r0, r5
   11d46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d4a:	f7fe bbc5 	b.w	104d8 <d_make_comp>
   11d4e:	4628      	mov	r0, r5
   11d50:	f7ff f970 	bl	11034 <d_type>
   11d54:	210d      	movs	r1, #13
   11d56:	4602      	mov	r2, r0
   11d58:	2300      	movs	r3, #0
   11d5a:	4628      	mov	r0, r5
   11d5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d60:	f7fe bbba 	b.w	104d8 <d_make_comp>
   11d64:	4628      	mov	r0, r5
   11d66:	f7ff f965 	bl	11034 <d_type>
   11d6a:	2112      	movs	r1, #18
   11d6c:	4602      	mov	r2, r0
   11d6e:	2300      	movs	r3, #0
   11d70:	4628      	mov	r0, r5
   11d72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d76:	f7fe bbaf 	b.w	104d8 <d_make_comp>
   11d7a:	4628      	mov	r0, r5
   11d7c:	f7ff f95a 	bl	11034 <d_type>
   11d80:	210c      	movs	r1, #12
   11d82:	4602      	mov	r2, r0
   11d84:	2300      	movs	r3, #0
   11d86:	4628      	mov	r0, r5
   11d88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11d8c:	f7fe bba4 	b.w	104d8 <d_make_comp>
   11d90:	4628      	mov	r0, r5
   11d92:	f7fe ffef 	bl	10d74 <d_name>
   11d96:	2114      	movs	r1, #20
   11d98:	4602      	mov	r2, r0
   11d9a:	2300      	movs	r3, #0
   11d9c:	4628      	mov	r0, r5
   11d9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11da2:	f7fe bb99 	b.w	104d8 <d_make_comp>
   11da6:	4628      	mov	r0, r5
   11da8:	f7ff f944 	bl	11034 <d_type>
   11dac:	210e      	movs	r1, #14
   11dae:	4602      	mov	r2, r0
   11db0:	2300      	movs	r3, #0
   11db2:	4628      	mov	r0, r5
   11db4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11db8:	f7fe bb8e 	b.w	104d8 <d_make_comp>
   11dbc:	4628      	mov	r0, r5
   11dbe:	f7ff f939 	bl	11034 <d_type>
   11dc2:	4604      	mov	r4, r0
   11dc4:	f105 000c 	add.w	r0, r5, #12
   11dc8:	f7fe fd74 	bl	108b4 <d_number.isra.0>
   11dcc:	2800      	cmp	r0, #0
   11dce:	f6ff ad5e 	blt.w	1188e <d_encoding+0x8e>
   11dd2:	68ea      	ldr	r2, [r5, #12]
   11dd4:	7811      	ldrb	r1, [r2, #0]
   11dd6:	295f      	cmp	r1, #95	; 0x5f
   11dd8:	f47f ad59 	bne.w	1188e <d_encoding+0x8e>
   11ddc:	3201      	adds	r2, #1
   11dde:	60ea      	str	r2, [r5, #12]
   11de0:	4628      	mov	r0, r5
   11de2:	f7ff f927 	bl	11034 <d_type>
   11de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   11de8:	1d59      	adds	r1, r3, #5
   11dea:	6329      	str	r1, [r5, #48]	; 0x30
   11dec:	4602      	mov	r2, r0
   11dee:	4623      	mov	r3, r4
   11df0:	4628      	mov	r0, r5
   11df2:	210b      	movs	r1, #11
   11df4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11df8:	f7fe bb6e 	b.w	104d8 <d_make_comp>
   11dfc:	7873      	ldrb	r3, [r6, #1]
   11dfe:	2b53      	cmp	r3, #83	; 0x53
   11e00:	d027      	beq.n	11e52 <d_encoding+0x652>
   11e02:	2b5f      	cmp	r3, #95	; 0x5f
   11e04:	d023      	beq.n	11e4e <d_encoding+0x64e>
   11e06:	2b24      	cmp	r3, #36	; 0x24
   11e08:	f47f ad41 	bne.w	1188e <d_encoding+0x8e>
   11e0c:	461c      	mov	r4, r3
   11e0e:	696b      	ldr	r3, [r5, #20]
   11e10:	69aa      	ldr	r2, [r5, #24]
   11e12:	4293      	cmp	r3, r2
   11e14:	da1f      	bge.n	11e56 <d_encoding+0x656>
   11e16:	692a      	ldr	r2, [r5, #16]
   11e18:	1c58      	adds	r0, r3, #1
   11e1a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11e1e:	6168      	str	r0, [r5, #20]
   11e20:	eb12 0081 	adds.w	r0, r2, r1, lsl #2
   11e24:	d017      	beq.n	11e56 <d_encoding+0x656>
   11e26:	f802 9021 	strb.w	r9, [r2, r1, lsl #2]
   11e2a:	6044      	str	r4, [r0, #4]
   11e2c:	68ee      	ldr	r6, [r5, #12]
   11e2e:	3602      	adds	r6, #2
   11e30:	3f02      	subs	r7, #2
   11e32:	60ee      	str	r6, [r5, #12]
   11e34:	e6d2      	b.n	11bdc <d_encoding+0x3dc>
   11e36:	4680      	mov	r8, r0
   11e38:	e6de      	b.n	11bf8 <d_encoding+0x3f8>
   11e3a:	f7ff fce1 	bl	11800 <d_encoding>
   11e3e:	2147      	movs	r1, #71	; 0x47
   11e40:	4602      	mov	r2, r0
   11e42:	2300      	movs	r3, #0
   11e44:	4628      	mov	r0, r5
   11e46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e4a:	f7fe bb45 	b.w	104d8 <d_make_comp>
   11e4e:	242e      	movs	r4, #46	; 0x2e
   11e50:	e7dd      	b.n	11e0e <d_encoding+0x60e>
   11e52:	242f      	movs	r4, #47	; 0x2f
   11e54:	e7db      	b.n	11e0e <d_encoding+0x60e>
   11e56:	68eb      	ldr	r3, [r5, #12]
   11e58:	3302      	adds	r3, #2
   11e5a:	60eb      	str	r3, [r5, #12]
   11e5c:	e517      	b.n	1188e <d_encoding+0x8e>
$t():
   11e5e:	bf00      	nop

00011e60 <d_operator_name>:
d_operator_name():
   11e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e64:	68c3      	ldr	r3, [r0, #12]
   11e66:	781f      	ldrb	r7, [r3, #0]
   11e68:	4680      	mov	r8, r0
   11e6a:	b35f      	cbz	r7, 11ec4 <d_operator_name+0x64>
   11e6c:	1c5a      	adds	r2, r3, #1
   11e6e:	60c2      	str	r2, [r0, #12]
   11e70:	7858      	ldrb	r0, [r3, #1]
   11e72:	781f      	ldrb	r7, [r3, #0]
   11e74:	b118      	cbz	r0, 11e7e <d_operator_name+0x1e>
   11e76:	1c9a      	adds	r2, r3, #2
   11e78:	f8c8 200c 	str.w	r2, [r8, #12]
   11e7c:	7858      	ldrb	r0, [r3, #1]
   11e7e:	2f76      	cmp	r7, #118	; 0x76
   11e80:	d141      	bne.n	11f06 <d_operator_name+0xa6>
   11e82:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
   11e86:	b2e3      	uxtb	r3, r4
   11e88:	2b09      	cmp	r3, #9
   11e8a:	d81c      	bhi.n	11ec6 <d_operator_name+0x66>
   11e8c:	4640      	mov	r0, r8
   11e8e:	f7fe fd9d 	bl	109cc <d_source_name>
   11e92:	f8d8 3014 	ldr.w	r3, [r8, #20]
   11e96:	f8d8 2018 	ldr.w	r2, [r8, #24]
   11e9a:	4293      	cmp	r3, r2
   11e9c:	4601      	mov	r1, r0
   11e9e:	da2f      	bge.n	11f00 <d_operator_name+0xa0>
   11ea0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11ea4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   11ea8:	3301      	adds	r3, #1
   11eaa:	0092      	lsls	r2, r2, #2
   11eac:	f8c8 3014 	str.w	r3, [r8, #20]
   11eb0:	1883      	adds	r3, r0, r2
   11eb2:	d025      	beq.n	11f00 <d_operator_name+0xa0>
   11eb4:	b321      	cbz	r1, 11f00 <d_operator_name+0xa0>
   11eb6:	2532      	movs	r5, #50	; 0x32
   11eb8:	5485      	strb	r5, [r0, r2]
   11eba:	605c      	str	r4, [r3, #4]
   11ebc:	6099      	str	r1, [r3, #8]
   11ebe:	4618      	mov	r0, r3
   11ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ec4:	4638      	mov	r0, r7
   11ec6:	4e24      	ldr	r6, [pc, #144]	; (11f58 <d_operator_name+0xf8>)
   11ec8:	243d      	movs	r4, #61	; 0x3d
   11eca:	2300      	movs	r3, #0
   11ecc:	e004      	b.n	11ed8 <d_operator_name+0x78>
   11ece:	42ba      	cmp	r2, r7
   11ed0:	d913      	bls.n	11efa <d_operator_name+0x9a>
   11ed2:	460c      	mov	r4, r1
   11ed4:	42a3      	cmp	r3, r4
   11ed6:	d013      	beq.n	11f00 <d_operator_name+0xa0>
   11ed8:	1ae2      	subs	r2, r4, r3
   11eda:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   11ede:	eb03 0162 	add.w	r1, r3, r2, asr #1
   11ee2:	010a      	lsls	r2, r1, #4
   11ee4:	eb06 0c02 	add.w	ip, r6, r2
   11ee8:	58b5      	ldr	r5, [r6, r2]
   11eea:	782a      	ldrb	r2, [r5, #0]
   11eec:	4297      	cmp	r7, r2
   11eee:	d1ee      	bne.n	11ece <d_operator_name+0x6e>
   11ef0:	786a      	ldrb	r2, [r5, #1]
   11ef2:	4290      	cmp	r0, r2
   11ef4:	d016      	beq.n	11f24 <d_operator_name+0xc4>
   11ef6:	4282      	cmp	r2, r0
   11ef8:	d8eb      	bhi.n	11ed2 <d_operator_name+0x72>
   11efa:	1c4b      	adds	r3, r1, #1
   11efc:	42a3      	cmp	r3, r4
   11efe:	d1eb      	bne.n	11ed8 <d_operator_name+0x78>
   11f00:	2000      	movs	r0, #0
   11f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f06:	2f63      	cmp	r7, #99	; 0x63
   11f08:	d1dd      	bne.n	11ec6 <d_operator_name+0x66>
   11f0a:	2876      	cmp	r0, #118	; 0x76
   11f0c:	d1db      	bne.n	11ec6 <d_operator_name+0x66>
   11f0e:	4640      	mov	r0, r8
   11f10:	f7ff f890 	bl	11034 <d_type>
   11f14:	2133      	movs	r1, #51	; 0x33
   11f16:	4602      	mov	r2, r0
   11f18:	2300      	movs	r3, #0
   11f1a:	4640      	mov	r0, r8
   11f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11f20:	f7fe bada 	b.w	104d8 <d_make_comp>
   11f24:	f8d8 3014 	ldr.w	r3, [r8, #20]
   11f28:	f8d8 2018 	ldr.w	r2, [r8, #24]
   11f2c:	4293      	cmp	r3, r2
   11f2e:	dae7      	bge.n	11f00 <d_operator_name+0xa0>
   11f30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11f34:	f8d8 1010 	ldr.w	r1, [r8, #16]
   11f38:	3301      	adds	r3, #1
   11f3a:	0092      	lsls	r2, r2, #2
   11f3c:	f8c8 3014 	str.w	r3, [r8, #20]
   11f40:	188b      	adds	r3, r1, r2
   11f42:	d006      	beq.n	11f52 <d_operator_name+0xf2>
   11f44:	2031      	movs	r0, #49	; 0x31
   11f46:	5488      	strb	r0, [r1, r2]
   11f48:	f8c3 c004 	str.w	ip, [r3, #4]
   11f4c:	4618      	mov	r0, r3
   11f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f52:	4618      	mov	r0, r3
   11f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f58:	00019d78 	.word	0x00019d78

00011f5c <d_unqualified_name>:
d_unqualified_name():
   11f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f5e:	68c2      	ldr	r2, [r0, #12]
   11f60:	7813      	ldrb	r3, [r2, #0]
   11f62:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11f66:	2909      	cmp	r1, #9
   11f68:	4604      	mov	r4, r0
   11f6a:	d92e      	bls.n	11fca <d_unqualified_name+0x6e>
   11f6c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   11f70:	2919      	cmp	r1, #25
   11f72:	d933      	bls.n	11fdc <d_unqualified_name+0x80>
   11f74:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
   11f78:	2901      	cmp	r1, #1
   11f7a:	d971      	bls.n	12060 <d_unqualified_name+0x104>
   11f7c:	2b4c      	cmp	r3, #76	; 0x4c
   11f7e:	f000 8087 	beq.w	12090 <d_unqualified_name+0x134>
   11f82:	2b55      	cmp	r3, #85	; 0x55
   11f84:	f040 808f 	bne.w	120a6 <d_unqualified_name+0x14a>
   11f88:	7853      	ldrb	r3, [r2, #1]
   11f8a:	2b6c      	cmp	r3, #108	; 0x6c
   11f8c:	d030      	beq.n	11ff0 <d_unqualified_name+0x94>
   11f8e:	2b74      	cmp	r3, #116	; 0x74
   11f90:	f040 8089 	bne.w	120a6 <d_unqualified_name+0x14a>
   11f94:	1c53      	adds	r3, r2, #1
   11f96:	60c3      	str	r3, [r0, #12]
   11f98:	7851      	ldrb	r1, [r2, #1]
   11f9a:	2974      	cmp	r1, #116	; 0x74
   11f9c:	f000 80c3 	beq.w	12126 <d_unqualified_name+0x1ca>
   11fa0:	2942      	cmp	r1, #66	; 0x42
   11fa2:	f04f 0500 	mov.w	r5, #0
   11fa6:	d117      	bne.n	11fd8 <d_unqualified_name+0x7c>
   11fa8:	3301      	adds	r3, #1
   11faa:	60e3      	str	r3, [r4, #12]
   11fac:	4620      	mov	r0, r4
   11fae:	f7fe fd0d 	bl	109cc <d_source_name>
   11fb2:	462a      	mov	r2, r5
   11fb4:	4603      	mov	r3, r0
   11fb6:	214a      	movs	r1, #74	; 0x4a
   11fb8:	4620      	mov	r0, r4
   11fba:	f7fe fa8d 	bl	104d8 <d_make_comp>
   11fbe:	68e3      	ldr	r3, [r4, #12]
   11fc0:	781a      	ldrb	r2, [r3, #0]
   11fc2:	2a42      	cmp	r2, #66	; 0x42
   11fc4:	4605      	mov	r5, r0
   11fc6:	d0ef      	beq.n	11fa8 <d_unqualified_name+0x4c>
   11fc8:	e006      	b.n	11fd8 <d_unqualified_name+0x7c>
   11fca:	f7fe fcff 	bl	109cc <d_source_name>
   11fce:	68e3      	ldr	r3, [r4, #12]
   11fd0:	7819      	ldrb	r1, [r3, #0]
   11fd2:	4605      	mov	r5, r0
   11fd4:	2942      	cmp	r1, #66	; 0x42
   11fd6:	d0e7      	beq.n	11fa8 <d_unqualified_name+0x4c>
   11fd8:	4628      	mov	r0, r5
   11fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fdc:	f7ff ff40 	bl	11e60 <d_operator_name>
   11fe0:	4605      	mov	r5, r0
   11fe2:	b110      	cbz	r0, 11fea <d_unqualified_name+0x8e>
   11fe4:	7803      	ldrb	r3, [r0, #0]
   11fe6:	2b31      	cmp	r3, #49	; 0x31
   11fe8:	d05f      	beq.n	120aa <d_unqualified_name+0x14e>
   11fea:	68e3      	ldr	r3, [r4, #12]
   11fec:	7819      	ldrb	r1, [r3, #0]
   11fee:	e7f1      	b.n	11fd4 <d_unqualified_name+0x78>
   11ff0:	1c53      	adds	r3, r2, #1
   11ff2:	60c3      	str	r3, [r0, #12]
   11ff4:	7851      	ldrb	r1, [r2, #1]
   11ff6:	296c      	cmp	r1, #108	; 0x6c
   11ff8:	d1d2      	bne.n	11fa0 <d_unqualified_name+0x44>
   11ffa:	3202      	adds	r2, #2
   11ffc:	60c2      	str	r2, [r0, #12]
   11ffe:	f7ff fb9d 	bl	1173c <d_parmlist>
   12002:	68e3      	ldr	r3, [r4, #12]
   12004:	4606      	mov	r6, r0
   12006:	2800      	cmp	r0, #0
   12008:	f000 80e1 	beq.w	121ce <d_unqualified_name+0x272>
   1200c:	7819      	ldrb	r1, [r3, #0]
   1200e:	2945      	cmp	r1, #69	; 0x45
   12010:	d1c6      	bne.n	11fa0 <d_unqualified_name+0x44>
   12012:	3301      	adds	r3, #1
   12014:	60e3      	str	r3, [r4, #12]
   12016:	4620      	mov	r0, r4
   12018:	f7fe fc8e 	bl	10938 <d_compact_number>
   1201c:	2800      	cmp	r0, #0
   1201e:	f2c0 809c 	blt.w	1215a <d_unqualified_name+0x1fe>
   12022:	6963      	ldr	r3, [r4, #20]
   12024:	69a2      	ldr	r2, [r4, #24]
   12026:	4293      	cmp	r3, r2
   12028:	f280 8097 	bge.w	1215a <d_unqualified_name+0x1fe>
   1202c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   12030:	6921      	ldr	r1, [r4, #16]
   12032:	0092      	lsls	r2, r2, #2
   12034:	3301      	adds	r3, #1
   12036:	188d      	adds	r5, r1, r2
   12038:	6163      	str	r3, [r4, #20]
   1203a:	f000 808e 	beq.w	1215a <d_unqualified_name+0x1fe>
   1203e:	2344      	movs	r3, #68	; 0x44
   12040:	548b      	strb	r3, [r1, r2]
   12042:	606e      	str	r6, [r5, #4]
   12044:	60a8      	str	r0, [r5, #8]
   12046:	6a23      	ldr	r3, [r4, #32]
   12048:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1204a:	4293      	cmp	r3, r2
   1204c:	f280 8085 	bge.w	1215a <d_unqualified_name+0x1fe>
   12050:	69e2      	ldr	r2, [r4, #28]
   12052:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
   12056:	1c5a      	adds	r2, r3, #1
   12058:	68e3      	ldr	r3, [r4, #12]
   1205a:	6222      	str	r2, [r4, #32]
   1205c:	7819      	ldrb	r1, [r3, #0]
   1205e:	e7b9      	b.n	11fd4 <d_unqualified_name+0x78>
   12060:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12062:	2800      	cmp	r0, #0
   12064:	d03c      	beq.n	120e0 <d_unqualified_name+0x184>
   12066:	7801      	ldrb	r1, [r0, #0]
   12068:	2900      	cmp	r1, #0
   1206a:	d137      	bne.n	120dc <d_unqualified_name+0x180>
   1206c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1206e:	6883      	ldr	r3, [r0, #8]
   12070:	440b      	add	r3, r1
   12072:	6323      	str	r3, [r4, #48]	; 0x30
   12074:	7811      	ldrb	r1, [r2, #0]
   12076:	2943      	cmp	r1, #67	; 0x43
   12078:	d078      	beq.n	1216c <d_unqualified_name+0x210>
   1207a:	2944      	cmp	r1, #68	; 0x44
   1207c:	d173      	bne.n	12166 <d_unqualified_name+0x20a>
   1207e:	7853      	ldrb	r3, [r2, #1]
   12080:	3b30      	subs	r3, #48	; 0x30
   12082:	2b05      	cmp	r3, #5
   12084:	d84d      	bhi.n	12122 <d_unqualified_name+0x1c6>
   12086:	e8df f003 	tbb	[pc, r3]
   1208a:	2d48      	.short	0x2d48
   1208c:	4a4c4c46 	.word	0x4a4c4c46
   12090:	3201      	adds	r2, #1
   12092:	60c2      	str	r2, [r0, #12]
   12094:	f7fe fc9a 	bl	109cc <d_source_name>
   12098:	4605      	mov	r5, r0
   1209a:	b120      	cbz	r0, 120a6 <d_unqualified_name+0x14a>
   1209c:	4620      	mov	r0, r4
   1209e:	f7fe fc85 	bl	109ac <d_discriminator>
   120a2:	2800      	cmp	r0, #0
   120a4:	d1a1      	bne.n	11fea <d_unqualified_name+0x8e>
   120a6:	2000      	movs	r0, #0
   120a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120aa:	6843      	ldr	r3, [r0, #4]
   120ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
   120ae:	689e      	ldr	r6, [r3, #8]
   120b0:	6818      	ldr	r0, [r3, #0]
   120b2:	4948      	ldr	r1, [pc, #288]	; (121d4 <d_unqualified_name+0x278>)
   120b4:	4432      	add	r2, r6
   120b6:	3207      	adds	r2, #7
   120b8:	6322      	str	r2, [r4, #48]	; 0x30
   120ba:	f004 fb2d 	bl	16718 <strcmp>
   120be:	2800      	cmp	r0, #0
   120c0:	d193      	bne.n	11fea <d_unqualified_name+0x8e>
   120c2:	4620      	mov	r0, r4
   120c4:	f7fe fc82 	bl	109cc <d_source_name>
   120c8:	462a      	mov	r2, r5
   120ca:	4603      	mov	r3, r0
   120cc:	2135      	movs	r1, #53	; 0x35
   120ce:	4620      	mov	r0, r4
   120d0:	f7fe fa02 	bl	104d8 <d_make_comp>
   120d4:	68e3      	ldr	r3, [r4, #12]
   120d6:	4605      	mov	r5, r0
   120d8:	7819      	ldrb	r1, [r3, #0]
   120da:	e77b      	b.n	11fd4 <d_unqualified_name+0x78>
   120dc:	2918      	cmp	r1, #24
   120de:	d0c5      	beq.n	1206c <d_unqualified_name+0x110>
   120e0:	4619      	mov	r1, r3
   120e2:	e7c8      	b.n	12076 <d_unqualified_name+0x11a>
   120e4:	2702      	movs	r7, #2
   120e6:	6961      	ldr	r1, [r4, #20]
   120e8:	69a5      	ldr	r5, [r4, #24]
   120ea:	1c93      	adds	r3, r2, #2
   120ec:	42a9      	cmp	r1, r5
   120ee:	60e3      	str	r3, [r4, #12]
   120f0:	da37      	bge.n	12162 <d_unqualified_name+0x206>
   120f2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   120f6:	6926      	ldr	r6, [r4, #16]
   120f8:	3101      	adds	r1, #1
   120fa:	00ad      	lsls	r5, r5, #2
   120fc:	6161      	str	r1, [r4, #20]
   120fe:	1971      	adds	r1, r6, r5
   12100:	d02f      	beq.n	12162 <d_unqualified_name+0x206>
   12102:	b370      	cbz	r0, 12162 <d_unqualified_name+0x206>
   12104:	f04f 0c08 	mov.w	ip, #8
   12108:	f806 c005 	strb.w	ip, [r6, r5]
   1210c:	460d      	mov	r5, r1
   1210e:	710f      	strb	r7, [r1, #4]
   12110:	6088      	str	r0, [r1, #8]
   12112:	7891      	ldrb	r1, [r2, #2]
   12114:	e75e      	b.n	11fd4 <d_unqualified_name+0x78>
   12116:	2703      	movs	r7, #3
   12118:	e7e5      	b.n	120e6 <d_unqualified_name+0x18a>
   1211a:	2701      	movs	r7, #1
   1211c:	e7e3      	b.n	120e6 <d_unqualified_name+0x18a>
   1211e:	2704      	movs	r7, #4
   12120:	e7e1      	b.n	120e6 <d_unqualified_name+0x18a>
   12122:	2500      	movs	r5, #0
   12124:	e758      	b.n	11fd8 <d_unqualified_name+0x7c>
   12126:	3202      	adds	r2, #2
   12128:	60c2      	str	r2, [r0, #12]
   1212a:	f7fe fc05 	bl	10938 <d_compact_number>
   1212e:	2800      	cmp	r0, #0
   12130:	db13      	blt.n	1215a <d_unqualified_name+0x1fe>
   12132:	6963      	ldr	r3, [r4, #20]
   12134:	69a2      	ldr	r2, [r4, #24]
   12136:	4293      	cmp	r3, r2
   12138:	da0f      	bge.n	1215a <d_unqualified_name+0x1fe>
   1213a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1213e:	6921      	ldr	r1, [r4, #16]
   12140:	0092      	lsls	r2, r2, #2
   12142:	3301      	adds	r3, #1
   12144:	188d      	adds	r5, r1, r2
   12146:	6163      	str	r3, [r4, #20]
   12148:	d007      	beq.n	1215a <d_unqualified_name+0x1fe>
   1214a:	2346      	movs	r3, #70	; 0x46
   1214c:	548b      	strb	r3, [r1, r2]
   1214e:	6068      	str	r0, [r5, #4]
   12150:	6a23      	ldr	r3, [r4, #32]
   12152:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12154:	4293      	cmp	r3, r2
   12156:	f6ff af7b 	blt.w	12050 <d_unqualified_name+0xf4>
   1215a:	68e3      	ldr	r3, [r4, #12]
   1215c:	2500      	movs	r5, #0
   1215e:	7819      	ldrb	r1, [r3, #0]
   12160:	e738      	b.n	11fd4 <d_unqualified_name+0x78>
   12162:	2500      	movs	r5, #0
   12164:	e7d5      	b.n	12112 <d_unqualified_name+0x1b6>
   12166:	4613      	mov	r3, r2
   12168:	2500      	movs	r5, #0
   1216a:	e733      	b.n	11fd4 <d_unqualified_name+0x78>
   1216c:	7853      	ldrb	r3, [r2, #1]
   1216e:	3b31      	subs	r3, #49	; 0x31
   12170:	2b04      	cmp	r3, #4
   12172:	d8d6      	bhi.n	12122 <d_unqualified_name+0x1c6>
   12174:	a101      	add	r1, pc, #4	; (adr r1, 1217c <d_unqualified_name+0x220>)
   12176:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1217a:	bf00      	nop
   1217c:	000121c3 	.word	0x000121c3
   12180:	00012191 	.word	0x00012191
   12184:	000121cb 	.word	0x000121cb
   12188:	00012123 	.word	0x00012123
   1218c:	000121c7 	.word	0x000121c7
   12190:	2702      	movs	r7, #2
   12192:	6961      	ldr	r1, [r4, #20]
   12194:	69a5      	ldr	r5, [r4, #24]
   12196:	1c93      	adds	r3, r2, #2
   12198:	42a9      	cmp	r1, r5
   1219a:	60e3      	str	r3, [r4, #12]
   1219c:	dae1      	bge.n	12162 <d_unqualified_name+0x206>
   1219e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   121a2:	6926      	ldr	r6, [r4, #16]
   121a4:	3101      	adds	r1, #1
   121a6:	00ad      	lsls	r5, r5, #2
   121a8:	6161      	str	r1, [r4, #20]
   121aa:	1971      	adds	r1, r6, r5
   121ac:	d0d9      	beq.n	12162 <d_unqualified_name+0x206>
   121ae:	2800      	cmp	r0, #0
   121b0:	d0d7      	beq.n	12162 <d_unqualified_name+0x206>
   121b2:	f04f 0c07 	mov.w	ip, #7
   121b6:	f806 c005 	strb.w	ip, [r6, r5]
   121ba:	460d      	mov	r5, r1
   121bc:	710f      	strb	r7, [r1, #4]
   121be:	6088      	str	r0, [r1, #8]
   121c0:	e7a7      	b.n	12112 <d_unqualified_name+0x1b6>
   121c2:	2701      	movs	r7, #1
   121c4:	e7e5      	b.n	12192 <d_unqualified_name+0x236>
   121c6:	2704      	movs	r7, #4
   121c8:	e7e3      	b.n	12192 <d_unqualified_name+0x236>
   121ca:	2703      	movs	r7, #3
   121cc:	e7e1      	b.n	12192 <d_unqualified_name+0x236>
   121ce:	4605      	mov	r5, r0
   121d0:	7819      	ldrb	r1, [r3, #0]
   121d2:	e6ff      	b.n	11fd4 <d_unqualified_name+0x78>
   121d4:	0001a57c 	.word	0x0001a57c

000121d8 <d_expression>:
d_expression():
   121d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121dc:	68c1      	ldr	r1, [r0, #12]
   121de:	780b      	ldrb	r3, [r1, #0]
   121e0:	2b4c      	cmp	r3, #76	; 0x4c
   121e2:	4604      	mov	r4, r0
   121e4:	f000 809e 	beq.w	12324 <d_expression+0x14c>
   121e8:	2b54      	cmp	r3, #84	; 0x54
   121ea:	f000 809f 	beq.w	1232c <d_expression+0x154>
   121ee:	2b73      	cmp	r3, #115	; 0x73
   121f0:	d057      	beq.n	122a2 <d_expression+0xca>
   121f2:	2b66      	cmp	r3, #102	; 0x66
   121f4:	d02d      	beq.n	12252 <d_expression+0x7a>
   121f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   121fa:	2a09      	cmp	r2, #9
   121fc:	d80d      	bhi.n	1221a <d_expression+0x42>
   121fe:	4620      	mov	r0, r4
   12200:	f7ff feac 	bl	11f5c <d_unqualified_name>
   12204:	4605      	mov	r5, r0
   12206:	2800      	cmp	r0, #0
   12208:	f000 8083 	beq.w	12312 <d_expression+0x13a>
   1220c:	68e3      	ldr	r3, [r4, #12]
   1220e:	781b      	ldrb	r3, [r3, #0]
   12210:	2b49      	cmp	r3, #73	; 0x49
   12212:	f000 80a3 	beq.w	1235c <d_expression+0x184>
   12216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1221a:	2b6f      	cmp	r3, #111	; 0x6f
   1221c:	d07c      	beq.n	12318 <d_expression+0x140>
   1221e:	2b69      	cmp	r3, #105	; 0x69
   12220:	f000 80a7 	beq.w	12372 <d_expression+0x19a>
   12224:	2b74      	cmp	r3, #116	; 0x74
   12226:	d117      	bne.n	12258 <d_expression+0x80>
   12228:	784b      	ldrb	r3, [r1, #1]
   1222a:	2b6c      	cmp	r3, #108	; 0x6c
   1222c:	d114      	bne.n	12258 <d_expression+0x80>
   1222e:	f7fe ff01 	bl	11034 <d_type>
   12232:	68e1      	ldr	r1, [r4, #12]
   12234:	4605      	mov	r5, r0
   12236:	3102      	adds	r1, #2
   12238:	60e1      	str	r1, [r4, #12]
   1223a:	4620      	mov	r0, r4
   1223c:	2145      	movs	r1, #69	; 0x45
   1223e:	f000 f9a9 	bl	12594 <d_exprlist>
   12242:	462a      	mov	r2, r5
   12244:	4603      	mov	r3, r0
   12246:	2130      	movs	r1, #48	; 0x30
   12248:	4620      	mov	r0, r4
   1224a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1224e:	f7fe b943 	b.w	104d8 <d_make_comp>
   12252:	784b      	ldrb	r3, [r1, #1]
   12254:	2b70      	cmp	r3, #112	; 0x70
   12256:	d040      	beq.n	122da <d_expression+0x102>
   12258:	4620      	mov	r0, r4
   1225a:	f7ff fe01 	bl	11e60 <d_operator_name>
   1225e:	4605      	mov	r5, r0
   12260:	2800      	cmp	r0, #0
   12262:	d056      	beq.n	12312 <d_expression+0x13a>
   12264:	7806      	ldrb	r6, [r0, #0]
   12266:	2e31      	cmp	r6, #49	; 0x31
   12268:	d064      	beq.n	12334 <d_expression+0x15c>
   1226a:	2e32      	cmp	r6, #50	; 0x32
   1226c:	d02b      	beq.n	122c6 <d_expression+0xee>
   1226e:	2e33      	cmp	r6, #51	; 0x33
   12270:	d14f      	bne.n	12312 <d_expression+0x13a>
   12272:	2700      	movs	r7, #0
   12274:	68e3      	ldr	r3, [r4, #12]
   12276:	781a      	ldrb	r2, [r3, #0]
   12278:	2a5f      	cmp	r2, #95	; 0x5f
   1227a:	f000 810d 	beq.w	12498 <d_expression+0x2c0>
   1227e:	4620      	mov	r0, r4
   12280:	f7ff ffaa 	bl	121d8 <d_expression>
   12284:	4603      	mov	r3, r0
   12286:	b12f      	cbz	r7, 12294 <d_expression+0xbc>
   12288:	461a      	mov	r2, r3
   1228a:	4620      	mov	r0, r4
   1228c:	2137      	movs	r1, #55	; 0x37
   1228e:	f7fe f923 	bl	104d8 <d_make_comp>
   12292:	4603      	mov	r3, r0
   12294:	4620      	mov	r0, r4
   12296:	462a      	mov	r2, r5
   12298:	2135      	movs	r1, #53	; 0x35
   1229a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1229e:	f7fe b91b 	b.w	104d8 <d_make_comp>
   122a2:	784b      	ldrb	r3, [r1, #1]
   122a4:	2b72      	cmp	r3, #114	; 0x72
   122a6:	f000 80de 	beq.w	12466 <d_expression+0x28e>
   122aa:	2b70      	cmp	r3, #112	; 0x70
   122ac:	d1d4      	bne.n	12258 <d_expression+0x80>
   122ae:	3102      	adds	r1, #2
   122b0:	60c1      	str	r1, [r0, #12]
   122b2:	f7ff ff91 	bl	121d8 <d_expression>
   122b6:	2149      	movs	r1, #73	; 0x49
   122b8:	4602      	mov	r2, r0
   122ba:	2300      	movs	r3, #0
   122bc:	4620      	mov	r0, r4
   122be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   122c2:	f7fe b909 	b.w	104d8 <d_make_comp>
   122c6:	6843      	ldr	r3, [r0, #4]
   122c8:	2700      	movs	r7, #0
   122ca:	2b03      	cmp	r3, #3
   122cc:	d821      	bhi.n	12312 <d_expression+0x13a>
   122ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   122d2:	0056      	.short	0x0056
   122d4:	009a013f 	.word	0x009a013f
   122d8:	005e      	.short	0x005e
   122da:	1c8b      	adds	r3, r1, #2
   122dc:	60c3      	str	r3, [r0, #12]
   122de:	788b      	ldrb	r3, [r1, #2]
   122e0:	2b54      	cmp	r3, #84	; 0x54
   122e2:	f000 80d5 	beq.w	12490 <d_expression+0x2b8>
   122e6:	f7fe fb27 	bl	10938 <d_compact_number>
   122ea:	1c45      	adds	r5, r0, #1
   122ec:	d011      	beq.n	12312 <d_expression+0x13a>
   122ee:	6963      	ldr	r3, [r4, #20]
   122f0:	69a2      	ldr	r2, [r4, #24]
   122f2:	4293      	cmp	r3, r2
   122f4:	da0d      	bge.n	12312 <d_expression+0x13a>
   122f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   122fa:	6921      	ldr	r1, [r4, #16]
   122fc:	3301      	adds	r3, #1
   122fe:	0092      	lsls	r2, r2, #2
   12300:	6163      	str	r3, [r4, #20]
   12302:	188b      	adds	r3, r1, r2
   12304:	d005      	beq.n	12312 <d_expression+0x13a>
   12306:	2006      	movs	r0, #6
   12308:	5488      	strb	r0, [r1, r2]
   1230a:	605d      	str	r5, [r3, #4]
   1230c:	4618      	mov	r0, r3
   1230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12312:	2000      	movs	r0, #0
   12314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12318:	784b      	ldrb	r3, [r1, #1]
   1231a:	2b6e      	cmp	r3, #110	; 0x6e
   1231c:	d19c      	bne.n	12258 <d_expression+0x80>
   1231e:	3102      	adds	r1, #2
   12320:	60c1      	str	r1, [r0, #12]
   12322:	e76c      	b.n	121fe <d_expression+0x26>
   12324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12328:	f7fe bc60 	b.w	10bec <d_expr_primary>
   1232c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12330:	f7fe bb1a 	b.w	10968 <d_template_param>
   12334:	f8d0 8004 	ldr.w	r8, [r0, #4]
   12338:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1233a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1233e:	f8d8 7000 	ldr.w	r7, [r8]
   12342:	498f      	ldr	r1, [pc, #572]	; (12580 <d_expression+0x3a8>)
   12344:	3a02      	subs	r2, #2
   12346:	4413      	add	r3, r2
   12348:	6323      	str	r3, [r4, #48]	; 0x30
   1234a:	4638      	mov	r0, r7
   1234c:	f004 f9e4 	bl	16718 <strcmp>
   12350:	2800      	cmp	r0, #0
   12352:	f000 80a9 	beq.w	124a8 <d_expression+0x2d0>
   12356:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1235a:	e7b6      	b.n	122ca <d_expression+0xf2>
   1235c:	4620      	mov	r0, r4
   1235e:	f7fe fcab 	bl	10cb8 <d_template_args>
   12362:	462a      	mov	r2, r5
   12364:	4603      	mov	r3, r0
   12366:	2104      	movs	r1, #4
   12368:	4620      	mov	r0, r4
   1236a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1236e:	f7fe b8b3 	b.w	104d8 <d_make_comp>
   12372:	784b      	ldrb	r3, [r1, #1]
   12374:	2b6c      	cmp	r3, #108	; 0x6c
   12376:	f47f af6f 	bne.w	12258 <d_expression+0x80>
   1237a:	2500      	movs	r5, #0
   1237c:	e75b      	b.n	12236 <d_expression+0x5e>
   1237e:	4620      	mov	r0, r4
   12380:	462a      	mov	r2, r5
   12382:	2134      	movs	r1, #52	; 0x34
   12384:	2300      	movs	r3, #0
   12386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1238a:	f7fe b8a5 	b.w	104d8 <d_make_comp>
   1238e:	4638      	mov	r0, r7
   12390:	497c      	ldr	r1, [pc, #496]	; (12584 <d_expression+0x3ac>)
   12392:	f004 f9c1 	bl	16718 <strcmp>
   12396:	2800      	cmp	r0, #0
   12398:	f000 808a 	beq.w	124b0 <d_expression+0x2d8>
   1239c:	783b      	ldrb	r3, [r7, #0]
   1239e:	2b6e      	cmp	r3, #110	; 0x6e
   123a0:	d1b7      	bne.n	12312 <d_expression+0x13a>
   123a2:	787b      	ldrb	r3, [r7, #1]
   123a4:	2b77      	cmp	r3, #119	; 0x77
   123a6:	d001      	beq.n	123ac <d_expression+0x1d4>
   123a8:	2b61      	cmp	r3, #97	; 0x61
   123aa:	d1b2      	bne.n	12312 <d_expression+0x13a>
   123ac:	215f      	movs	r1, #95	; 0x5f
   123ae:	4620      	mov	r0, r4
   123b0:	f000 f8f0 	bl	12594 <d_exprlist>
   123b4:	4606      	mov	r6, r0
   123b6:	4620      	mov	r0, r4
   123b8:	f7fe fe3c 	bl	11034 <d_type>
   123bc:	68e1      	ldr	r1, [r4, #12]
   123be:	780b      	ldrb	r3, [r1, #0]
   123c0:	2b45      	cmp	r3, #69	; 0x45
   123c2:	4607      	mov	r7, r0
   123c4:	f000 80a9 	beq.w	1251a <d_expression+0x342>
   123c8:	2b70      	cmp	r3, #112	; 0x70
   123ca:	f000 80b5 	beq.w	12538 <d_expression+0x360>
   123ce:	2b69      	cmp	r3, #105	; 0x69
   123d0:	d19f      	bne.n	12312 <d_expression+0x13a>
   123d2:	784b      	ldrb	r3, [r1, #1]
   123d4:	2b6c      	cmp	r3, #108	; 0x6c
   123d6:	d19c      	bne.n	12312 <d_expression+0x13a>
   123d8:	4620      	mov	r0, r4
   123da:	f7ff fefd 	bl	121d8 <d_expression>
   123de:	4603      	mov	r3, r0
   123e0:	463a      	mov	r2, r7
   123e2:	4620      	mov	r0, r4
   123e4:	213a      	movs	r1, #58	; 0x3a
   123e6:	f7fe f877 	bl	104d8 <d_make_comp>
   123ea:	4632      	mov	r2, r6
   123ec:	4603      	mov	r3, r0
   123ee:	2139      	movs	r1, #57	; 0x39
   123f0:	4620      	mov	r0, r4
   123f2:	f7fe f871 	bl	104d8 <d_make_comp>
   123f6:	462a      	mov	r2, r5
   123f8:	4603      	mov	r3, r0
   123fa:	2138      	movs	r1, #56	; 0x38
   123fc:	4620      	mov	r0, r4
   123fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12402:	f7fe b869 	b.w	104d8 <d_make_comp>
   12406:	686b      	ldr	r3, [r5, #4]
   12408:	681b      	ldr	r3, [r3, #0]
   1240a:	785a      	ldrb	r2, [r3, #1]
   1240c:	2a63      	cmp	r2, #99	; 0x63
   1240e:	d062      	beq.n	124d6 <d_expression+0x2fe>
   12410:	4620      	mov	r0, r4
   12412:	f7ff fee1 	bl	121d8 <d_expression>
   12416:	4680      	mov	r8, r0
   12418:	4638      	mov	r0, r7
   1241a:	495b      	ldr	r1, [pc, #364]	; (12588 <d_expression+0x3b0>)
   1241c:	f004 f97c 	bl	16718 <strcmp>
   12420:	2800      	cmp	r0, #0
   12422:	d052      	beq.n	124ca <d_expression+0x2f2>
   12424:	4638      	mov	r0, r7
   12426:	4959      	ldr	r1, [pc, #356]	; (1258c <d_expression+0x3b4>)
   12428:	f004 f976 	bl	16718 <strcmp>
   1242c:	b128      	cbz	r0, 1243a <d_expression+0x262>
   1242e:	4638      	mov	r0, r7
   12430:	4957      	ldr	r1, [pc, #348]	; (12590 <d_expression+0x3b8>)
   12432:	f004 f971 	bl	16718 <strcmp>
   12436:	2800      	cmp	r0, #0
   12438:	d16a      	bne.n	12510 <d_expression+0x338>
   1243a:	4620      	mov	r0, r4
   1243c:	f7ff fd8e 	bl	11f5c <d_unqualified_name>
   12440:	68e3      	ldr	r3, [r4, #12]
   12442:	781b      	ldrb	r3, [r3, #0]
   12444:	2b49      	cmp	r3, #73	; 0x49
   12446:	4606      	mov	r6, r0
   12448:	d06b      	beq.n	12522 <d_expression+0x34a>
   1244a:	4642      	mov	r2, r8
   1244c:	4633      	mov	r3, r6
   1244e:	4620      	mov	r0, r4
   12450:	2137      	movs	r1, #55	; 0x37
   12452:	f7fe f841 	bl	104d8 <d_make_comp>
   12456:	462a      	mov	r2, r5
   12458:	4603      	mov	r3, r0
   1245a:	2136      	movs	r1, #54	; 0x36
   1245c:	4620      	mov	r0, r4
   1245e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12462:	f7fe b839 	b.w	104d8 <d_make_comp>
   12466:	3102      	adds	r1, #2
   12468:	60c1      	str	r1, [r0, #12]
   1246a:	f7fe fde3 	bl	11034 <d_type>
   1246e:	4605      	mov	r5, r0
   12470:	4620      	mov	r0, r4
   12472:	f7ff fd73 	bl	11f5c <d_unqualified_name>
   12476:	68e1      	ldr	r1, [r4, #12]
   12478:	7809      	ldrb	r1, [r1, #0]
   1247a:	2949      	cmp	r1, #73	; 0x49
   1247c:	4606      	mov	r6, r0
   1247e:	4620      	mov	r0, r4
   12480:	d036      	beq.n	124f0 <d_expression+0x318>
   12482:	462a      	mov	r2, r5
   12484:	4633      	mov	r3, r6
   12486:	2101      	movs	r1, #1
   12488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1248c:	f7fe b824 	b.w	104d8 <d_make_comp>
   12490:	3103      	adds	r1, #3
   12492:	60c1      	str	r1, [r0, #12]
   12494:	2500      	movs	r5, #0
   12496:	e72a      	b.n	122ee <d_expression+0x116>
   12498:	3301      	adds	r3, #1
   1249a:	60e3      	str	r3, [r4, #12]
   1249c:	4620      	mov	r0, r4
   1249e:	2145      	movs	r1, #69	; 0x45
   124a0:	f000 f878 	bl	12594 <d_exprlist>
   124a4:	4603      	mov	r3, r0
   124a6:	e6ee      	b.n	12286 <d_expression+0xae>
   124a8:	4620      	mov	r0, r4
   124aa:	f7fe fdc3 	bl	11034 <d_type>
   124ae:	e6f0      	b.n	12292 <d_expression+0xba>
   124b0:	4620      	mov	r0, r4
   124b2:	f7ff fe91 	bl	121d8 <d_expression>
   124b6:	4606      	mov	r6, r0
   124b8:	4620      	mov	r0, r4
   124ba:	f7ff fe8d 	bl	121d8 <d_expression>
   124be:	4607      	mov	r7, r0
   124c0:	4620      	mov	r0, r4
   124c2:	f7ff fe89 	bl	121d8 <d_expression>
   124c6:	4603      	mov	r3, r0
   124c8:	e78a      	b.n	123e0 <d_expression+0x208>
   124ca:	4620      	mov	r0, r4
   124cc:	2145      	movs	r1, #69	; 0x45
   124ce:	f000 f861 	bl	12594 <d_exprlist>
   124d2:	4606      	mov	r6, r0
   124d4:	e7b9      	b.n	1244a <d_expression+0x272>
   124d6:	781b      	ldrb	r3, [r3, #0]
   124d8:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
   124dc:	2a01      	cmp	r2, #1
   124de:	d902      	bls.n	124e6 <d_expression+0x30e>
   124e0:	3b72      	subs	r3, #114	; 0x72
   124e2:	2b01      	cmp	r3, #1
   124e4:	d894      	bhi.n	12410 <d_expression+0x238>
   124e6:	4620      	mov	r0, r4
   124e8:	f7fe fda4 	bl	11034 <d_type>
   124ec:	4680      	mov	r8, r0
   124ee:	e793      	b.n	12418 <d_expression+0x240>
   124f0:	f7fe fbe2 	bl	10cb8 <d_template_args>
   124f4:	4632      	mov	r2, r6
   124f6:	4603      	mov	r3, r0
   124f8:	2104      	movs	r1, #4
   124fa:	4620      	mov	r0, r4
   124fc:	f7fd ffec 	bl	104d8 <d_make_comp>
   12500:	462a      	mov	r2, r5
   12502:	4603      	mov	r3, r0
   12504:	2101      	movs	r1, #1
   12506:	4620      	mov	r0, r4
   12508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1250c:	f7fd bfe4 	b.w	104d8 <d_make_comp>
   12510:	4620      	mov	r0, r4
   12512:	f7ff fe61 	bl	121d8 <d_expression>
   12516:	4606      	mov	r6, r0
   12518:	e797      	b.n	1244a <d_expression+0x272>
   1251a:	3101      	adds	r1, #1
   1251c:	60e1      	str	r1, [r4, #12]
   1251e:	2300      	movs	r3, #0
   12520:	e75e      	b.n	123e0 <d_expression+0x208>
   12522:	4620      	mov	r0, r4
   12524:	f7fe fbc8 	bl	10cb8 <d_template_args>
   12528:	4632      	mov	r2, r6
   1252a:	4603      	mov	r3, r0
   1252c:	2104      	movs	r1, #4
   1252e:	4620      	mov	r0, r4
   12530:	f7fd ffd2 	bl	104d8 <d_make_comp>
   12534:	4606      	mov	r6, r0
   12536:	e788      	b.n	1244a <d_expression+0x272>
   12538:	784b      	ldrb	r3, [r1, #1]
   1253a:	2b69      	cmp	r3, #105	; 0x69
   1253c:	f47f aee9 	bne.w	12312 <d_expression+0x13a>
   12540:	3102      	adds	r1, #2
   12542:	60e1      	str	r1, [r4, #12]
   12544:	4620      	mov	r0, r4
   12546:	2145      	movs	r1, #69	; 0x45
   12548:	f000 f824 	bl	12594 <d_exprlist>
   1254c:	4603      	mov	r3, r0
   1254e:	e747      	b.n	123e0 <d_expression+0x208>
   12550:	b12f      	cbz	r7, 1255e <d_expression+0x386>
   12552:	783b      	ldrb	r3, [r7, #0]
   12554:	2b70      	cmp	r3, #112	; 0x70
   12556:	d006      	beq.n	12566 <d_expression+0x38e>
   12558:	2b6d      	cmp	r3, #109	; 0x6d
   1255a:	d004      	beq.n	12566 <d_expression+0x38e>
   1255c:	2700      	movs	r7, #0
   1255e:	2e33      	cmp	r6, #51	; 0x33
   12560:	f47f ae8d 	bne.w	1227e <d_expression+0xa6>
   12564:	e686      	b.n	12274 <d_expression+0x9c>
   12566:	787a      	ldrb	r2, [r7, #1]
   12568:	429a      	cmp	r2, r3
   1256a:	d1f7      	bne.n	1255c <d_expression+0x384>
   1256c:	68e3      	ldr	r3, [r4, #12]
   1256e:	781a      	ldrb	r2, [r3, #0]
   12570:	2a5f      	cmp	r2, #95	; 0x5f
   12572:	d001      	beq.n	12578 <d_expression+0x3a0>
   12574:	2701      	movs	r7, #1
   12576:	e7f2      	b.n	1255e <d_expression+0x386>
   12578:	3301      	adds	r3, #1
   1257a:	60e3      	str	r3, [r4, #12]
   1257c:	2700      	movs	r7, #0
   1257e:	e7ee      	b.n	1255e <d_expression+0x386>
   12580:	0001aa28 	.word	0x0001aa28
   12584:	0001a58c 	.word	0x0001a58c
   12588:	0001a580 	.word	0x0001a580
   1258c:	0001a584 	.word	0x0001a584
   12590:	0001a588 	.word	0x0001a588

00012594 <d_exprlist>:
d_exprlist():
   12594:	b5f0      	push	{r4, r5, r6, r7, lr}
   12596:	68c3      	ldr	r3, [r0, #12]
   12598:	460f      	mov	r7, r1
   1259a:	7819      	ldrb	r1, [r3, #0]
   1259c:	b083      	sub	sp, #12
   1259e:	2200      	movs	r2, #0
   125a0:	42b9      	cmp	r1, r7
   125a2:	4604      	mov	r4, r0
   125a4:	9201      	str	r2, [sp, #4]
   125a6:	bf18      	it	ne
   125a8:	ae01      	addne	r6, sp, #4
   125aa:	d10a      	bne.n	125c2 <d_exprlist+0x2e>
   125ac:	e01b      	b.n	125e6 <d_exprlist+0x52>
   125ae:	f7fd ff93 	bl	104d8 <d_make_comp>
   125b2:	6030      	str	r0, [r6, #0]
   125b4:	f100 0608 	add.w	r6, r0, #8
   125b8:	b168      	cbz	r0, 125d6 <d_exprlist+0x42>
   125ba:	68e3      	ldr	r3, [r4, #12]
   125bc:	781a      	ldrb	r2, [r3, #0]
   125be:	42ba      	cmp	r2, r7
   125c0:	d00c      	beq.n	125dc <d_exprlist+0x48>
   125c2:	4620      	mov	r0, r4
   125c4:	f7ff fe08 	bl	121d8 <d_expression>
   125c8:	4605      	mov	r5, r0
   125ca:	212e      	movs	r1, #46	; 0x2e
   125cc:	4620      	mov	r0, r4
   125ce:	462a      	mov	r2, r5
   125d0:	2300      	movs	r3, #0
   125d2:	2d00      	cmp	r5, #0
   125d4:	d1eb      	bne.n	125ae <d_exprlist+0x1a>
   125d6:	2000      	movs	r0, #0
   125d8:	b003      	add	sp, #12
   125da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125dc:	9801      	ldr	r0, [sp, #4]
   125de:	3301      	adds	r3, #1
   125e0:	60e3      	str	r3, [r4, #12]
   125e2:	b003      	add	sp, #12
   125e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125e6:	3301      	adds	r3, #1
   125e8:	60c3      	str	r3, [r0, #12]
   125ea:	212e      	movs	r1, #46	; 0x2e
   125ec:	4613      	mov	r3, r2
   125ee:	b003      	add	sp, #12
   125f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   125f4:	f7fd bf70 	b.w	104d8 <d_make_comp>

000125f8 <d_append_string>:
d_append_string():
   125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125fc:	4604      	mov	r4, r0
   125fe:	4608      	mov	r0, r1
   12600:	460d      	mov	r5, r1
   12602:	f006 fb1d 	bl	18c40 <strlen>
   12606:	b348      	cbz	r0, 1265c <d_append_string+0x64>
   12608:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1260c:	182f      	adds	r7, r5, r0
   1260e:	f04f 0800 	mov.w	r8, #0
   12612:	e009      	b.n	12628 <d_append_string+0x30>
   12614:	460b      	mov	r3, r1
   12616:	42bd      	cmp	r5, r7
   12618:	f101 0101 	add.w	r1, r1, #1
   1261c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12620:	54e6      	strb	r6, [r4, r3]
   12622:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   12626:	d019      	beq.n	1265c <d_append_string+0x64>
   12628:	29ff      	cmp	r1, #255	; 0xff
   1262a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1262e:	d1f1      	bne.n	12614 <d_append_string+0x1c>
   12630:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12634:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   12638:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1263c:	4620      	mov	r0, r4
   1263e:	4798      	blx	r3
   12640:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12644:	3301      	adds	r3, #1
   12646:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1264a:	2300      	movs	r3, #0
   1264c:	2101      	movs	r1, #1
   1264e:	42bd      	cmp	r5, r7
   12650:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12654:	54e6      	strb	r6, [r4, r3]
   12656:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1265a:	d1e5      	bne.n	12628 <d_append_string+0x30>
   1265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012660 <d_print_comp.part.10>:
d_print_comp.part.10():
   12660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12664:	7813      	ldrb	r3, [r2, #0]
   12666:	b097      	sub	sp, #92	; 0x5c
   12668:	4615      	mov	r5, r2
   1266a:	4604      	mov	r4, r0
   1266c:	460e      	mov	r6, r1
   1266e:	2b4b      	cmp	r3, #75	; 0x4b
   12670:	f201 818c 	bhi.w	1398c <d_print_comp.part.10+0x132c>
   12674:	e8df f013 	tbh	[pc, r3, lsl #1]
   12678:	03a80488 	.word	0x03a80488
   1267c:	031f03a8 	.word	0x031f03a8
   12680:	04e004f8 	.word	0x04e004f8
   12684:	031a0561 	.word	0x031a0561
   12688:	02e10308 	.word	0x02e10308
   1268c:	029302ba 	.word	0x029302ba
   12690:	022e026c 	.word	0x022e026c
   12694:	01e00207 	.word	0x01e00207
   12698:	019201b9 	.word	0x019201b9
   1269c:	0144016b 	.word	0x0144016b
   126a0:	00f6011d 	.word	0x00f6011d
   126a4:	00a800cf 	.word	0x00a800cf
   126a8:	006b0080 	.word	0x006b0080
   126ac:	006b006b 	.word	0x006b006b
   126b0:	004c004c 	.word	0x004c004c
   126b4:	004c004c 	.word	0x004c004c
   126b8:	004c004c 	.word	0x004c004c
   126bc:	08ed004c 	.word	0x08ed004c
   126c0:	004c08ed 	.word	0x004c08ed
   126c4:	08bf004c 	.word	0x08bf004c
   126c8:	07b3090f 	.word	0x07b3090f
   126cc:	07250742 	.word	0x07250742
   126d0:	072506e2 	.word	0x072506e2
   126d4:	06ae06ae 	.word	0x06ae06ae
   126d8:	09150965 	.word	0x09150965
   126dc:	0898093e 	.word	0x0898093e
   126e0:	0547055b 	.word	0x0547055b
   126e4:	0536053b 	.word	0x0536053b
   126e8:	06700675 	.word	0x06700675
   126ec:	06310670 	.word	0x06310670
   126f0:	05fa0631 	.word	0x05fa0631
   126f4:	05e105ef 	.word	0x05e105ef
   126f8:	058905b0 	.word	0x058905b0
   126fc:	08230871 	.word	0x08230871
   12700:	098a084a 	.word	0x098a084a
   12704:	07ee07c8 	.word	0x07ee07c8
   12708:	040c0461 	.word	0x040c0461
   1270c:	04b503d5 	.word	0x04b503d5
   12710:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   12714:	ab16      	add	r3, sp, #88	; 0x58
   12716:	2100      	movs	r1, #0
   12718:	f843 2d40 	str.w	r2, [r3, #-64]!
   1271c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   12720:	9507      	str	r5, [sp, #28]
   12722:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12726:	9108      	str	r1, [sp, #32]
   12728:	9209      	str	r2, [sp, #36]	; 0x24
   1272a:	686a      	ldr	r2, [r5, #4]
   1272c:	4620      	mov	r0, r4
   1272e:	4631      	mov	r1, r6
   12730:	f002 fa2c 	bl	14b8c <d_print_comp>
   12734:	9b08      	ldr	r3, [sp, #32]
   12736:	b923      	cbnz	r3, 12742 <d_print_comp.part.10+0xe2>
   12738:	4631      	mov	r1, r6
   1273a:	462a      	mov	r2, r5
   1273c:	4620      	mov	r0, r4
   1273e:	f002 fa31 	bl	14ba4 <d_print_mod>
   12742:	9b06      	ldr	r3, [sp, #24]
   12744:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12748:	b017      	add	sp, #92	; 0x5c
   1274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1274e:	f8d0 7114 	ldr.w	r7, [r0, #276]	; 0x114
   12752:	463a      	mov	r2, r7
   12754:	2f00      	cmp	r7, #0
   12756:	d0dd      	beq.n	12714 <d_print_comp.part.10+0xb4>
   12758:	6891      	ldr	r1, [r2, #8]
   1275a:	b941      	cbnz	r1, 1276e <d_print_comp.part.10+0x10e>
   1275c:	6851      	ldr	r1, [r2, #4]
   1275e:	7809      	ldrb	r1, [r1, #0]
   12760:	f1a1 0019 	sub.w	r0, r1, #25
   12764:	2802      	cmp	r0, #2
   12766:	d805      	bhi.n	12774 <d_print_comp.part.10+0x114>
   12768:	428b      	cmp	r3, r1
   1276a:	f001 854f 	beq.w	1420c <d_print_comp.part.10+0x1bac>
   1276e:	6812      	ldr	r2, [r2, #0]
   12770:	2a00      	cmp	r2, #0
   12772:	d1f1      	bne.n	12758 <d_print_comp.part.10+0xf8>
   12774:	463a      	mov	r2, r7
   12776:	e7cd      	b.n	12714 <d_print_comp.part.10+0xb4>
   12778:	6897      	ldr	r7, [r2, #8]
   1277a:	f8d2 9004 	ldr.w	r9, [r2, #4]
   1277e:	2f00      	cmp	r7, #0
   12780:	d0e2      	beq.n	12748 <d_print_comp.part.10+0xe8>
   12782:	2500      	movs	r5, #0
   12784:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12788:	46a8      	mov	r8, r5
   1278a:	e009      	b.n	127a0 <d_print_comp.part.10+0x140>
   1278c:	460b      	mov	r3, r1
   1278e:	3101      	adds	r1, #1
   12790:	3501      	adds	r5, #1
   12792:	42af      	cmp	r7, r5
   12794:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12798:	54e6      	strb	r6, [r4, r3]
   1279a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1279e:	d0d3      	beq.n	12748 <d_print_comp.part.10+0xe8>
   127a0:	29ff      	cmp	r1, #255	; 0xff
   127a2:	f819 6005 	ldrb.w	r6, [r9, r5]
   127a6:	d1f1      	bne.n	1278c <d_print_comp.part.10+0x12c>
   127a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   127ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   127b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   127b4:	4620      	mov	r0, r4
   127b6:	4798      	blx	r3
   127b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   127bc:	3301      	adds	r3, #1
   127be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   127c2:	2101      	movs	r1, #1
   127c4:	2300      	movs	r3, #0
   127c6:	e7e3      	b.n	12790 <d_print_comp.part.10+0x130>
   127c8:	4fd6      	ldr	r7, [pc, #856]	; (12b24 <d_print_comp.part.10+0x4c4>)
   127ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   127ce:	f107 0a11 	add.w	sl, r7, #17
   127d2:	f04f 0900 	mov.w	r9, #0
   127d6:	e00a      	b.n	127ee <d_print_comp.part.10+0x18e>
   127d8:	460b      	mov	r3, r1
   127da:	3101      	adds	r1, #1
   127dc:	4557      	cmp	r7, sl
   127de:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   127e2:	f804 8003 	strb.w	r8, [r4, r3]
   127e6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   127ea:	f001 8208 	beq.w	13bfe <d_print_comp.part.10+0x159e>
   127ee:	29ff      	cmp	r1, #255	; 0xff
   127f0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   127f4:	d1f0      	bne.n	127d8 <d_print_comp.part.10+0x178>
   127f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   127fa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   127fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12802:	4620      	mov	r0, r4
   12804:	4798      	blx	r3
   12806:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1280a:	3301      	adds	r3, #1
   1280c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12810:	2101      	movs	r1, #1
   12812:	2300      	movs	r3, #0
   12814:	e7e2      	b.n	127dc <d_print_comp.part.10+0x17c>
   12816:	4fc4      	ldr	r7, [pc, #784]	; (12b28 <d_print_comp.part.10+0x4c8>)
   12818:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1281c:	f107 0a15 	add.w	sl, r7, #21
   12820:	f04f 0900 	mov.w	r9, #0
   12824:	e00a      	b.n	1283c <d_print_comp.part.10+0x1dc>
   12826:	460b      	mov	r3, r1
   12828:	3101      	adds	r1, #1
   1282a:	4557      	cmp	r7, sl
   1282c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12830:	f804 8003 	strb.w	r8, [r4, r3]
   12834:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12838:	f001 80ec 	beq.w	13a14 <d_print_comp.part.10+0x13b4>
   1283c:	29ff      	cmp	r1, #255	; 0xff
   1283e:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12842:	d1f0      	bne.n	12826 <d_print_comp.part.10+0x1c6>
   12844:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12848:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1284c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12850:	4620      	mov	r0, r4
   12852:	4798      	blx	r3
   12854:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12858:	3301      	adds	r3, #1
   1285a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1285e:	2101      	movs	r1, #1
   12860:	2300      	movs	r3, #0
   12862:	e7e2      	b.n	1282a <d_print_comp.part.10+0x1ca>
   12864:	4fb1      	ldr	r7, [pc, #708]	; (12b2c <d_print_comp.part.10+0x4cc>)
   12866:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1286a:	f107 0a19 	add.w	sl, r7, #25
   1286e:	f04f 0900 	mov.w	r9, #0
   12872:	e00a      	b.n	1288a <d_print_comp.part.10+0x22a>
   12874:	460b      	mov	r3, r1
   12876:	3101      	adds	r1, #1
   12878:	4557      	cmp	r7, sl
   1287a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1287e:	f804 8003 	strb.w	r8, [r4, r3]
   12882:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12886:	f001 80b4 	beq.w	139f2 <d_print_comp.part.10+0x1392>
   1288a:	29ff      	cmp	r1, #255	; 0xff
   1288c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12890:	d1f0      	bne.n	12874 <d_print_comp.part.10+0x214>
   12892:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12896:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1289a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1289e:	4620      	mov	r0, r4
   128a0:	4798      	blx	r3
   128a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   128a6:	3301      	adds	r3, #1
   128a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   128ac:	2101      	movs	r1, #1
   128ae:	2300      	movs	r3, #0
   128b0:	e7e2      	b.n	12878 <d_print_comp.part.10+0x218>
   128b2:	4f9f      	ldr	r7, [pc, #636]	; (12b30 <d_print_comp.part.10+0x4d0>)
   128b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   128b8:	f107 0a16 	add.w	sl, r7, #22
   128bc:	f04f 0900 	mov.w	r9, #0
   128c0:	e00a      	b.n	128d8 <d_print_comp.part.10+0x278>
   128c2:	460b      	mov	r3, r1
   128c4:	3101      	adds	r1, #1
   128c6:	4557      	cmp	r7, sl
   128c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   128cc:	f804 8003 	strb.w	r8, [r4, r3]
   128d0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   128d4:	f001 80d7 	beq.w	13a86 <d_print_comp.part.10+0x1426>
   128d8:	29ff      	cmp	r1, #255	; 0xff
   128da:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   128de:	d1f0      	bne.n	128c2 <d_print_comp.part.10+0x262>
   128e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   128e4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   128e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   128ec:	4620      	mov	r0, r4
   128ee:	4798      	blx	r3
   128f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   128f4:	3301      	adds	r3, #1
   128f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   128fa:	2101      	movs	r1, #1
   128fc:	2300      	movs	r3, #0
   128fe:	e7e2      	b.n	128c6 <d_print_comp.part.10+0x266>
   12900:	4f8c      	ldr	r7, [pc, #560]	; (12b34 <d_print_comp.part.10+0x4d4>)
   12902:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12906:	f107 0a13 	add.w	sl, r7, #19
   1290a:	f04f 0900 	mov.w	r9, #0
   1290e:	e00a      	b.n	12926 <d_print_comp.part.10+0x2c6>
   12910:	460b      	mov	r3, r1
   12912:	3101      	adds	r1, #1
   12914:	4557      	cmp	r7, sl
   12916:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1291a:	f804 8003 	strb.w	r8, [r4, r3]
   1291e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12922:	f001 80a9 	beq.w	13a78 <d_print_comp.part.10+0x1418>
   12926:	29ff      	cmp	r1, #255	; 0xff
   12928:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   1292c:	d1f0      	bne.n	12910 <d_print_comp.part.10+0x2b0>
   1292e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12932:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12936:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1293a:	4620      	mov	r0, r4
   1293c:	4798      	blx	r3
   1293e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12942:	3301      	adds	r3, #1
   12944:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12948:	2101      	movs	r1, #1
   1294a:	2300      	movs	r3, #0
   1294c:	e7e2      	b.n	12914 <d_print_comp.part.10+0x2b4>
   1294e:	4f7a      	ldr	r7, [pc, #488]	; (12b38 <d_print_comp.part.10+0x4d8>)
   12950:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12954:	f107 0a0f 	add.w	sl, r7, #15
   12958:	f04f 0900 	mov.w	r9, #0
   1295c:	e00a      	b.n	12974 <d_print_comp.part.10+0x314>
   1295e:	460b      	mov	r3, r1
   12960:	3101      	adds	r1, #1
   12962:	4557      	cmp	r7, sl
   12964:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12968:	f804 8003 	strb.w	r8, [r4, r3]
   1296c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12970:	f001 8090 	beq.w	13a94 <d_print_comp.part.10+0x1434>
   12974:	29ff      	cmp	r1, #255	; 0xff
   12976:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   1297a:	d1f0      	bne.n	1295e <d_print_comp.part.10+0x2fe>
   1297c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12980:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12984:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12988:	4620      	mov	r0, r4
   1298a:	4798      	blx	r3
   1298c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12990:	3301      	adds	r3, #1
   12992:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12996:	2101      	movs	r1, #1
   12998:	2300      	movs	r3, #0
   1299a:	e7e2      	b.n	12962 <d_print_comp.part.10+0x302>
   1299c:	4f67      	ldr	r7, [pc, #412]	; (12b3c <d_print_comp.part.10+0x4dc>)
   1299e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   129a2:	f107 0a1a 	add.w	sl, r7, #26
   129a6:	f04f 0900 	mov.w	r9, #0
   129aa:	e00a      	b.n	129c2 <d_print_comp.part.10+0x362>
   129ac:	460b      	mov	r3, r1
   129ae:	3101      	adds	r1, #1
   129b0:	4557      	cmp	r7, sl
   129b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   129b6:	f804 8003 	strb.w	r8, [r4, r3]
   129ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   129be:	f001 8011 	beq.w	139e4 <d_print_comp.part.10+0x1384>
   129c2:	29ff      	cmp	r1, #255	; 0xff
   129c4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   129c8:	d1f0      	bne.n	129ac <d_print_comp.part.10+0x34c>
   129ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   129ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   129d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   129d6:	4620      	mov	r0, r4
   129d8:	4798      	blx	r3
   129da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   129de:	3301      	adds	r3, #1
   129e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   129e4:	2101      	movs	r1, #1
   129e6:	2300      	movs	r3, #0
   129e8:	e7e2      	b.n	129b0 <d_print_comp.part.10+0x350>
   129ea:	4f55      	ldr	r7, [pc, #340]	; (12b40 <d_print_comp.part.10+0x4e0>)
   129ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   129f0:	f107 0a11 	add.w	sl, r7, #17
   129f4:	f04f 0900 	mov.w	r9, #0
   129f8:	e00a      	b.n	12a10 <d_print_comp.part.10+0x3b0>
   129fa:	460b      	mov	r3, r1
   129fc:	3101      	adds	r1, #1
   129fe:	4557      	cmp	r7, sl
   12a00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12a04:	f804 8003 	strb.w	r8, [r4, r3]
   12a08:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12a0c:	f001 80a5 	beq.w	13b5a <d_print_comp.part.10+0x14fa>
   12a10:	29ff      	cmp	r1, #255	; 0xff
   12a12:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12a16:	d1f0      	bne.n	129fa <d_print_comp.part.10+0x39a>
   12a18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12a1c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12a20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12a24:	4620      	mov	r0, r4
   12a26:	4798      	blx	r3
   12a28:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12a2c:	3301      	adds	r3, #1
   12a2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12a32:	2101      	movs	r1, #1
   12a34:	2300      	movs	r3, #0
   12a36:	e7e2      	b.n	129fe <d_print_comp.part.10+0x39e>
   12a38:	4f42      	ldr	r7, [pc, #264]	; (12b44 <d_print_comp.part.10+0x4e4>)
   12a3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12a3e:	f107 0a15 	add.w	sl, r7, #21
   12a42:	f04f 0900 	mov.w	r9, #0
   12a46:	e00a      	b.n	12a5e <d_print_comp.part.10+0x3fe>
   12a48:	460b      	mov	r3, r1
   12a4a:	3101      	adds	r1, #1
   12a4c:	4557      	cmp	r7, sl
   12a4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12a52:	f804 8003 	strb.w	r8, [r4, r3]
   12a56:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12a5a:	f001 8077 	beq.w	13b4c <d_print_comp.part.10+0x14ec>
   12a5e:	29ff      	cmp	r1, #255	; 0xff
   12a60:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12a64:	d1f0      	bne.n	12a48 <d_print_comp.part.10+0x3e8>
   12a66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12a6a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12a6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12a72:	4620      	mov	r0, r4
   12a74:	4798      	blx	r3
   12a76:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12a7a:	3301      	adds	r3, #1
   12a7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12a80:	2101      	movs	r1, #1
   12a82:	2300      	movs	r3, #0
   12a84:	e7e2      	b.n	12a4c <d_print_comp.part.10+0x3ec>
   12a86:	4f30      	ldr	r7, [pc, #192]	; (12b48 <d_print_comp.part.10+0x4e8>)
   12a88:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12a8c:	f107 0a10 	add.w	sl, r7, #16
   12a90:	f04f 0900 	mov.w	r9, #0
   12a94:	e00a      	b.n	12aac <d_print_comp.part.10+0x44c>
   12a96:	460b      	mov	r3, r1
   12a98:	3101      	adds	r1, #1
   12a9a:	4557      	cmp	r7, sl
   12a9c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12aa0:	f804 8003 	strb.w	r8, [r4, r3]
   12aa4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12aa8:	f001 8049 	beq.w	13b3e <d_print_comp.part.10+0x14de>
   12aac:	29ff      	cmp	r1, #255	; 0xff
   12aae:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12ab2:	d1f0      	bne.n	12a96 <d_print_comp.part.10+0x436>
   12ab4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12ab8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12abc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12ac0:	4620      	mov	r0, r4
   12ac2:	4798      	blx	r3
   12ac4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12ac8:	3301      	adds	r3, #1
   12aca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12ace:	2101      	movs	r1, #1
   12ad0:	2300      	movs	r3, #0
   12ad2:	e7e2      	b.n	12a9a <d_print_comp.part.10+0x43a>
   12ad4:	4f1d      	ldr	r7, [pc, #116]	; (12b4c <d_print_comp.part.10+0x4ec>)
   12ad6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12ada:	f107 0a12 	add.w	sl, r7, #18
   12ade:	f04f 0900 	mov.w	r9, #0
   12ae2:	e00a      	b.n	12afa <d_print_comp.part.10+0x49a>
   12ae4:	460b      	mov	r3, r1
   12ae6:	3101      	adds	r1, #1
   12ae8:	4557      	cmp	r7, sl
   12aea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12aee:	f804 8003 	strb.w	r8, [r4, r3]
   12af2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12af6:	f001 801b 	beq.w	13b30 <d_print_comp.part.10+0x14d0>
   12afa:	29ff      	cmp	r1, #255	; 0xff
   12afc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12b00:	d1f0      	bne.n	12ae4 <d_print_comp.part.10+0x484>
   12b02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12b06:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12b0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12b0e:	4620      	mov	r0, r4
   12b10:	4798      	blx	r3
   12b12:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12b16:	3301      	adds	r3, #1
   12b18:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12b1c:	2101      	movs	r1, #1
   12b1e:	2300      	movs	r3, #0
   12b20:	e7e2      	b.n	12ae8 <d_print_comp.part.10+0x488>
   12b22:	bf00      	nop
   12b24:	0001a6d7 	.word	0x0001a6d7
   12b28:	0001a6bf 	.word	0x0001a6bf
   12b2c:	0001a6a3 	.word	0x0001a6a3
   12b30:	0001a68b 	.word	0x0001a68b
   12b34:	0001a677 	.word	0x0001a677
   12b38:	0001a667 	.word	0x0001a667
   12b3c:	0001a64b 	.word	0x0001a64b
   12b40:	0001a637 	.word	0x0001a637
   12b44:	0001a633 	.word	0x0001a633
   12b48:	0001a61f 	.word	0x0001a61f
   12b4c:	0001a60b 	.word	0x0001a60b
   12b50:	4fc9      	ldr	r7, [pc, #804]	; (12e78 <d_print_comp.part.10+0x818>)
   12b52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12b56:	f107 0a0d 	add.w	sl, r7, #13
   12b5a:	f04f 0900 	mov.w	r9, #0
   12b5e:	e00a      	b.n	12b76 <d_print_comp.part.10+0x516>
   12b60:	460b      	mov	r3, r1
   12b62:	3101      	adds	r1, #1
   12b64:	4557      	cmp	r7, sl
   12b66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12b6a:	f804 8003 	strb.w	r8, [r4, r3]
   12b6e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12b72:	f000 87cf 	beq.w	13b14 <d_print_comp.part.10+0x14b4>
   12b76:	29ff      	cmp	r1, #255	; 0xff
   12b78:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12b7c:	d1f0      	bne.n	12b60 <d_print_comp.part.10+0x500>
   12b7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12b82:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12b86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12b8a:	4620      	mov	r0, r4
   12b8c:	4798      	blx	r3
   12b8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12b92:	3301      	adds	r3, #1
   12b94:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12b98:	2101      	movs	r1, #1
   12b9a:	2300      	movs	r3, #0
   12b9c:	e7e2      	b.n	12b64 <d_print_comp.part.10+0x504>
   12b9e:	4fb7      	ldr	r7, [pc, #732]	; (12e7c <d_print_comp.part.10+0x81c>)
   12ba0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12ba4:	f107 0a18 	add.w	sl, r7, #24
   12ba8:	f04f 0900 	mov.w	r9, #0
   12bac:	e00a      	b.n	12bc4 <d_print_comp.part.10+0x564>
   12bae:	460b      	mov	r3, r1
   12bb0:	3101      	adds	r1, #1
   12bb2:	4557      	cmp	r7, sl
   12bb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12bb8:	f804 8003 	strb.w	r8, [r4, r3]
   12bbc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12bc0:	f000 877d 	beq.w	13abe <d_print_comp.part.10+0x145e>
   12bc4:	29ff      	cmp	r1, #255	; 0xff
   12bc6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12bca:	d1f0      	bne.n	12bae <d_print_comp.part.10+0x54e>
   12bcc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12bd0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12bd4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12bd8:	4620      	mov	r0, r4
   12bda:	4798      	blx	r3
   12bdc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12be0:	3301      	adds	r3, #1
   12be2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12be6:	2101      	movs	r1, #1
   12be8:	2300      	movs	r3, #0
   12bea:	e7e2      	b.n	12bb2 <d_print_comp.part.10+0x552>
   12bec:	4fa4      	ldr	r7, [pc, #656]	; (12e80 <d_print_comp.part.10+0x820>)
   12bee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12bf2:	f107 0a08 	add.w	sl, r7, #8
   12bf6:	f04f 0900 	mov.w	r9, #0
   12bfa:	e00a      	b.n	12c12 <d_print_comp.part.10+0x5b2>
   12bfc:	460b      	mov	r3, r1
   12bfe:	3101      	adds	r1, #1
   12c00:	4557      	cmp	r7, sl
   12c02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12c06:	f804 8003 	strb.w	r8, [r4, r3]
   12c0a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12c0e:	f000 874f 	beq.w	13ab0 <d_print_comp.part.10+0x1450>
   12c12:	29ff      	cmp	r1, #255	; 0xff
   12c14:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12c18:	d1f0      	bne.n	12bfc <d_print_comp.part.10+0x59c>
   12c1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12c1e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12c22:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12c26:	4620      	mov	r0, r4
   12c28:	4798      	blx	r3
   12c2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12c2e:	3301      	adds	r3, #1
   12c30:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12c34:	2101      	movs	r1, #1
   12c36:	2300      	movs	r3, #0
   12c38:	e7e2      	b.n	12c00 <d_print_comp.part.10+0x5a0>
   12c3a:	4f92      	ldr	r7, [pc, #584]	; (12e84 <d_print_comp.part.10+0x824>)
   12c3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12c40:	f107 0a0b 	add.w	sl, r7, #11
   12c44:	f04f 0900 	mov.w	r9, #0
   12c48:	e00a      	b.n	12c60 <d_print_comp.part.10+0x600>
   12c4a:	460b      	mov	r3, r1
   12c4c:	3101      	adds	r1, #1
   12c4e:	4557      	cmp	r7, sl
   12c50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12c54:	f804 8003 	strb.w	r8, [r4, r3]
   12c58:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12c5c:	f000 8721 	beq.w	13aa2 <d_print_comp.part.10+0x1442>
   12c60:	29ff      	cmp	r1, #255	; 0xff
   12c62:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12c66:	d1f0      	bne.n	12c4a <d_print_comp.part.10+0x5ea>
   12c68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12c6c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12c70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12c74:	4620      	mov	r0, r4
   12c76:	4798      	blx	r3
   12c78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12c7c:	3301      	adds	r3, #1
   12c7e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12c82:	2101      	movs	r1, #1
   12c84:	2300      	movs	r3, #0
   12c86:	e7e2      	b.n	12c4e <d_print_comp.part.10+0x5ee>
   12c88:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12c8c:	29ff      	cmp	r1, #255	; 0xff
   12c8e:	f001 82c4 	beq.w	1421a <d_print_comp.part.10+0x1bba>
   12c92:	1c4a      	adds	r2, r1, #1
   12c94:	237e      	movs	r3, #126	; 0x7e
   12c96:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   12c9a:	5463      	strb	r3, [r4, r1]
   12c9c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   12ca0:	4631      	mov	r1, r6
   12ca2:	68aa      	ldr	r2, [r5, #8]
   12ca4:	4620      	mov	r0, r4
   12ca6:	f001 ff71 	bl	14b8c <d_print_comp>
   12caa:	e54d      	b.n	12748 <d_print_comp.part.10+0xe8>
   12cac:	4631      	mov	r1, r6
   12cae:	6892      	ldr	r2, [r2, #8]
   12cb0:	f001 ff6c 	bl	14b8c <d_print_comp>
   12cb4:	e548      	b.n	12748 <d_print_comp.part.10+0xe8>
   12cb6:	2200      	movs	r2, #0
   12cb8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   12cbc:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   12cc0:	686f      	ldr	r7, [r5, #4]
   12cc2:	9302      	str	r3, [sp, #8]
   12cc4:	2f00      	cmp	r7, #0
   12cc6:	f001 8503 	beq.w	146d0 <d_print_comp.part.10+0x2070>
   12cca:	a906      	add	r1, sp, #24
   12ccc:	f8d0 a110 	ldr.w	sl, [r0, #272]	; 0x110
   12cd0:	9101      	str	r1, [sp, #4]
   12cd2:	4690      	mov	r8, r2
   12cd4:	4694      	mov	ip, r2
   12cd6:	460b      	mov	r3, r1
   12cd8:	7839      	ldrb	r1, [r7, #0]
   12cda:	601a      	str	r2, [r3, #0]
   12cdc:	f1a1 001c 	sub.w	r0, r1, #28
   12ce0:	2804      	cmp	r0, #4
   12ce2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12ce6:	605f      	str	r7, [r3, #4]
   12ce8:	f8c3 c008 	str.w	ip, [r3, #8]
   12cec:	f8c3 a00c 	str.w	sl, [r3, #12]
   12cf0:	461a      	mov	r2, r3
   12cf2:	f108 0801 	add.w	r8, r8, #1
   12cf6:	f103 0310 	add.w	r3, r3, #16
   12cfa:	f240 864c 	bls.w	13996 <d_print_comp.part.10+0x1336>
   12cfe:	2904      	cmp	r1, #4
   12d00:	f001 8633 	beq.w	1496a <d_print_comp.part.10+0x230a>
   12d04:	2902      	cmp	r1, #2
   12d06:	d13d      	bne.n	12d84 <d_print_comp.part.10+0x724>
   12d08:	f8d7 b008 	ldr.w	fp, [r7, #8]
   12d0c:	f89b 3000 	ldrb.w	r3, [fp]
   12d10:	2b45      	cmp	r3, #69	; 0x45
   12d12:	bf08      	it	eq
   12d14:	f8db b004 	ldreq.w	fp, [fp, #4]
   12d18:	f89b 3000 	ldrb.w	r3, [fp]
   12d1c:	3b1c      	subs	r3, #28
   12d1e:	2b04      	cmp	r3, #4
   12d20:	d830      	bhi.n	12d84 <d_print_comp.part.10+0x724>
   12d22:	f1b8 0f04 	cmp.w	r8, #4
   12d26:	f001 8679 	beq.w	14a1c <d_print_comp.part.10+0x23bc>
   12d2a:	9a01      	ldr	r2, [sp, #4]
   12d2c:	4623      	mov	r3, r4
   12d2e:	eb02 1c08 	add.w	ip, r2, r8, lsl #4
   12d32:	4629      	mov	r1, r5
   12d34:	4632      	mov	r2, r6
   12d36:	465d      	mov	r5, fp
   12d38:	4656      	mov	r6, sl
   12d3a:	4664      	mov	r4, ip
   12d3c:	468b      	mov	fp, r1
   12d3e:	4692      	mov	sl, r2
   12d40:	4699      	mov	r9, r3
   12d42:	e003      	b.n	12d4c <d_print_comp.part.10+0x6ec>
   12d44:	f1b8 0f04 	cmp.w	r8, #4
   12d48:	f001 8667 	beq.w	14a1a <d_print_comp.part.10+0x23ba>
   12d4c:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
   12d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   12d54:	f1a4 0310 	sub.w	r3, r4, #16
   12d58:	6023      	str	r3, [r4, #0]
   12d5a:	2300      	movs	r3, #0
   12d5c:	e90c 0048 	stmdb	ip, {r3, r6}
   12d60:	f8c9 4114 	str.w	r4, [r9, #276]	; 0x114
   12d64:	f84c 5c0c 	str.w	r5, [ip, #-12]
   12d68:	686d      	ldr	r5, [r5, #4]
   12d6a:	782b      	ldrb	r3, [r5, #0]
   12d6c:	3b1c      	subs	r3, #28
   12d6e:	2b04      	cmp	r3, #4
   12d70:	f108 0801 	add.w	r8, r8, #1
   12d74:	f10c 0c10 	add.w	ip, ip, #16
   12d78:	f104 0410 	add.w	r4, r4, #16
   12d7c:	d9e2      	bls.n	12d44 <d_print_comp.part.10+0x6e4>
   12d7e:	464c      	mov	r4, r9
   12d80:	4656      	mov	r6, sl
   12d82:	465d      	mov	r5, fp
   12d84:	68aa      	ldr	r2, [r5, #8]
   12d86:	4620      	mov	r0, r4
   12d88:	4631      	mov	r1, r6
   12d8a:	f001 feff 	bl	14b8c <d_print_comp>
   12d8e:	783b      	ldrb	r3, [r7, #0]
   12d90:	2b04      	cmp	r3, #4
   12d92:	bf04      	itt	eq
   12d94:	9b04      	ldreq	r3, [sp, #16]
   12d96:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
   12d9a:	f1b8 0f00 	cmp.w	r8, #0
   12d9e:	d00f      	beq.n	12dc0 <d_print_comp.part.10+0x760>
   12da0:	9a01      	ldr	r2, [sp, #4]
   12da2:	4647      	mov	r7, r8
   12da4:	eb02 1508 	add.w	r5, r2, r8, lsl #4
   12da8:	f04f 0920 	mov.w	r9, #32
   12dac:	46b0      	mov	r8, r6
   12dae:	f855 6c08 	ldr.w	r6, [r5, #-8]
   12db2:	3f01      	subs	r7, #1
   12db4:	2e00      	cmp	r6, #0
   12db6:	f001 8477 	beq.w	146a8 <d_print_comp.part.10+0x2048>
   12dba:	3d10      	subs	r5, #16
   12dbc:	2f00      	cmp	r7, #0
   12dbe:	d1f6      	bne.n	12dae <d_print_comp.part.10+0x74e>
   12dc0:	9902      	ldr	r1, [sp, #8]
   12dc2:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   12dc6:	e4bf      	b.n	12748 <d_print_comp.part.10+0xe8>
   12dc8:	4631      	mov	r1, r6
   12dca:	6852      	ldr	r2, [r2, #4]
   12dcc:	f001 fede 	bl	14b8c <d_print_comp>
   12dd0:	f016 0904 	ands.w	r9, r6, #4
   12dd4:	f040 85ec 	bne.w	139b0 <d_print_comp.part.10+0x1350>
   12dd8:	4f2b      	ldr	r7, [pc, #172]	; (12e88 <d_print_comp.part.10+0x828>)
   12dda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12dde:	f107 0a02 	add.w	sl, r7, #2
   12de2:	e00a      	b.n	12dfa <d_print_comp.part.10+0x79a>
   12de4:	460b      	mov	r3, r1
   12de6:	3101      	adds	r1, #1
   12de8:	4557      	cmp	r7, sl
   12dea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12dee:	f804 8003 	strb.w	r8, [r4, r3]
   12df2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12df6:	f000 85e7 	beq.w	139c8 <d_print_comp.part.10+0x1368>
   12dfa:	29ff      	cmp	r1, #255	; 0xff
   12dfc:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12e00:	d1f0      	bne.n	12de4 <d_print_comp.part.10+0x784>
   12e02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12e06:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12e0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12e0e:	4620      	mov	r0, r4
   12e10:	4798      	blx	r3
   12e12:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12e16:	3301      	adds	r3, #1
   12e18:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12e1c:	2101      	movs	r1, #1
   12e1e:	2300      	movs	r3, #0
   12e20:	e7e2      	b.n	12de8 <d_print_comp.part.10+0x788>
   12e22:	4f1a      	ldr	r7, [pc, #104]	; (12e8c <d_print_comp.part.10+0x82c>)
   12e24:	6852      	ldr	r2, [r2, #4]
   12e26:	4631      	mov	r1, r6
   12e28:	f001 feb0 	bl	14b8c <d_print_comp>
   12e2c:	f107 0a05 	add.w	sl, r7, #5
   12e30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12e34:	f04f 0900 	mov.w	r9, #0
   12e38:	e00a      	b.n	12e50 <d_print_comp.part.10+0x7f0>
   12e3a:	460b      	mov	r3, r1
   12e3c:	3101      	adds	r1, #1
   12e3e:	4557      	cmp	r7, sl
   12e40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12e44:	f804 8003 	strb.w	r8, [r4, r3]
   12e48:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12e4c:	f000 87b2 	beq.w	13db4 <d_print_comp.part.10+0x1754>
   12e50:	29ff      	cmp	r1, #255	; 0xff
   12e52:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12e56:	d1f0      	bne.n	12e3a <d_print_comp.part.10+0x7da>
   12e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12e5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12e64:	4620      	mov	r0, r4
   12e66:	4798      	blx	r3
   12e68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12e6c:	3301      	adds	r3, #1
   12e6e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12e72:	2101      	movs	r1, #1
   12e74:	2300      	movs	r3, #0
   12e76:	e7e2      	b.n	12e3e <d_print_comp.part.10+0x7de>
   12e78:	0001a5fb 	.word	0x0001a5fb
   12e7c:	0001a5d7 	.word	0x0001a5d7
   12e80:	0001a5cb 	.word	0x0001a5cb
   12e84:	0001a5bf 	.word	0x0001a5bf
   12e88:	0001a597 	.word	0x0001a597
   12e8c:	0001a58f 	.word	0x0001a58f
   12e90:	6851      	ldr	r1, [r2, #4]
   12e92:	f7fd fe29 	bl	10ae8 <d_find_pack>
   12e96:	2800      	cmp	r0, #0
   12e98:	f001 856f 	beq.w	1497a <d_print_comp.part.10+0x231a>
   12e9c:	f04f 0800 	mov.w	r8, #0
   12ea0:	7803      	ldrb	r3, [r0, #0]
   12ea2:	2b2f      	cmp	r3, #47	; 0x2f
   12ea4:	f040 87ca 	bne.w	13e3c <d_print_comp.part.10+0x17dc>
   12ea8:	6843      	ldr	r3, [r0, #4]
   12eaa:	2b00      	cmp	r3, #0
   12eac:	f000 87c6 	beq.w	13e3c <d_print_comp.part.10+0x17dc>
   12eb0:	6880      	ldr	r0, [r0, #8]
   12eb2:	f108 0801 	add.w	r8, r8, #1
   12eb6:	2800      	cmp	r0, #0
   12eb8:	d1f2      	bne.n	12ea0 <d_print_comp.part.10+0x840>
   12eba:	686d      	ldr	r5, [r5, #4]
   12ebc:	9501      	str	r5, [sp, #4]
   12ebe:	2700      	movs	r7, #0
   12ec0:	f108 33ff 	add.w	r3, r8, #4294967295
   12ec4:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 13294 <d_print_comp.part.10+0xc34>
   12ec8:	9302      	str	r3, [sp, #8]
   12eca:	46b9      	mov	r9, r7
   12ecc:	f8c4 711c 	str.w	r7, [r4, #284]	; 0x11c
   12ed0:	4620      	mov	r0, r4
   12ed2:	4631      	mov	r1, r6
   12ed4:	9a01      	ldr	r2, [sp, #4]
   12ed6:	f001 fe59 	bl	14b8c <d_print_comp>
   12eda:	9b02      	ldr	r3, [sp, #8]
   12edc:	42bb      	cmp	r3, r7
   12ede:	dd28      	ble.n	12f32 <d_print_comp.part.10+0x8d2>
   12ee0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12ee4:	f8df b3b0 	ldr.w	fp, [pc, #944]	; 13298 <d_print_comp.part.10+0xc38>
   12ee8:	e009      	b.n	12efe <d_print_comp.part.10+0x89e>
   12eea:	460b      	mov	r3, r1
   12eec:	45d3      	cmp	fp, sl
   12eee:	f101 0101 	add.w	r1, r1, #1
   12ef2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12ef6:	54e5      	strb	r5, [r4, r3]
   12ef8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   12efc:	d019      	beq.n	12f32 <d_print_comp.part.10+0x8d2>
   12efe:	29ff      	cmp	r1, #255	; 0xff
   12f00:	f81b 5f01 	ldrb.w	r5, [fp, #1]!
   12f04:	d1f1      	bne.n	12eea <d_print_comp.part.10+0x88a>
   12f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12f0a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12f12:	4620      	mov	r0, r4
   12f14:	4798      	blx	r3
   12f16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12f1a:	3301      	adds	r3, #1
   12f1c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12f20:	2300      	movs	r3, #0
   12f22:	2101      	movs	r1, #1
   12f24:	45d3      	cmp	fp, sl
   12f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12f2a:	54e5      	strb	r5, [r4, r3]
   12f2c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   12f30:	d1e5      	bne.n	12efe <d_print_comp.part.10+0x89e>
   12f32:	3701      	adds	r7, #1
   12f34:	4547      	cmp	r7, r8
   12f36:	d1c9      	bne.n	12ecc <d_print_comp.part.10+0x86c>
   12f38:	e406      	b.n	12748 <d_print_comp.part.10+0xe8>
   12f3a:	4fd0      	ldr	r7, [pc, #832]	; (1327c <d_print_comp.part.10+0xc1c>)
   12f3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12f40:	f107 0a1a 	add.w	sl, r7, #26
   12f44:	f04f 0900 	mov.w	r9, #0
   12f48:	e00a      	b.n	12f60 <d_print_comp.part.10+0x900>
   12f4a:	460b      	mov	r3, r1
   12f4c:	3101      	adds	r1, #1
   12f4e:	4557      	cmp	r7, sl
   12f50:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12f54:	f804 8003 	strb.w	r8, [r4, r3]
   12f58:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   12f5c:	f000 8604 	beq.w	13b68 <d_print_comp.part.10+0x1508>
   12f60:	29ff      	cmp	r1, #255	; 0xff
   12f62:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   12f66:	d1f0      	bne.n	12f4a <d_print_comp.part.10+0x8ea>
   12f68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12f6c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   12f70:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12f74:	4620      	mov	r0, r4
   12f76:	4798      	blx	r3
   12f78:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12f7c:	3301      	adds	r3, #1
   12f7e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12f82:	2101      	movs	r1, #1
   12f84:	2300      	movs	r3, #0
   12f86:	e7e2      	b.n	12f4e <d_print_comp.part.10+0x8ee>
   12f88:	f016 0604 	ands.w	r6, r6, #4
   12f8c:	f041 81ae 	bne.w	142ec <d_print_comp.part.10+0x1c8c>
   12f90:	6897      	ldr	r7, [r2, #8]
   12f92:	f8d2 9004 	ldr.w	r9, [r2, #4]
   12f96:	2f00      	cmp	r7, #0
   12f98:	f43f abd6 	beq.w	12748 <d_print_comp.part.10+0xe8>
   12f9c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   12fa0:	46b0      	mov	r8, r6
   12fa2:	e00a      	b.n	12fba <d_print_comp.part.10+0x95a>
   12fa4:	460b      	mov	r3, r1
   12fa6:	3101      	adds	r1, #1
   12fa8:	3601      	adds	r6, #1
   12faa:	42b7      	cmp	r7, r6
   12fac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   12fb0:	54e5      	strb	r5, [r4, r3]
   12fb2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   12fb6:	f43f abc7 	beq.w	12748 <d_print_comp.part.10+0xe8>
   12fba:	29ff      	cmp	r1, #255	; 0xff
   12fbc:	f819 5006 	ldrb.w	r5, [r9, r6]
   12fc0:	d1f0      	bne.n	12fa4 <d_print_comp.part.10+0x944>
   12fc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   12fc6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   12fca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   12fce:	4620      	mov	r0, r4
   12fd0:	4798      	blx	r3
   12fd2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   12fd6:	3301      	adds	r3, #1
   12fd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   12fdc:	2101      	movs	r1, #1
   12fde:	2300      	movs	r3, #0
   12fe0:	e7e2      	b.n	12fa8 <d_print_comp.part.10+0x948>
   12fe2:	4fa7      	ldr	r7, [pc, #668]	; (13280 <d_print_comp.part.10+0xc20>)
   12fe4:	6852      	ldr	r2, [r2, #4]
   12fe6:	4631      	mov	r1, r6
   12fe8:	f001 fdd0 	bl	14b8c <d_print_comp>
   12fec:	f107 0a08 	add.w	sl, r7, #8
   12ff0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   12ff4:	f04f 0900 	mov.w	r9, #0
   12ff8:	e00a      	b.n	13010 <d_print_comp.part.10+0x9b0>
   12ffa:	460b      	mov	r3, r1
   12ffc:	3101      	adds	r1, #1
   12ffe:	4557      	cmp	r7, sl
   13000:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13004:	f804 8003 	strb.w	r8, [r4, r3]
   13008:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1300c:	f000 86e5 	beq.w	13dda <d_print_comp.part.10+0x177a>
   13010:	29ff      	cmp	r1, #255	; 0xff
   13012:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13016:	d1f0      	bne.n	12ffa <d_print_comp.part.10+0x99a>
   13018:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1301c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13020:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13024:	4620      	mov	r0, r4
   13026:	4798      	blx	r3
   13028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1302c:	3301      	adds	r3, #1
   1302e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13032:	2101      	movs	r1, #1
   13034:	2300      	movs	r3, #0
   13036:	e7e2      	b.n	12ffe <d_print_comp.part.10+0x99e>
   13038:	1d11      	adds	r1, r2, #4
   1303a:	f7fd fd33 	bl	10aa4 <d_lookup_template_argument.isra.6>
   1303e:	2800      	cmp	r0, #0
   13040:	f001 8013 	beq.w	1406a <d_print_comp.part.10+0x1a0a>
   13044:	7803      	ldrb	r3, [r0, #0]
   13046:	2b2f      	cmp	r3, #47	; 0x2f
   13048:	f001 8002 	beq.w	14050 <d_print_comp.part.10+0x19f0>
   1304c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   13050:	682b      	ldr	r3, [r5, #0]
   13052:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   13056:	4602      	mov	r2, r0
   13058:	4631      	mov	r1, r6
   1305a:	4620      	mov	r0, r4
   1305c:	f001 fd96 	bl	14b8c <d_print_comp>
   13060:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   13064:	f7ff bb70 	b.w	12748 <d_print_comp.part.10+0xe8>
   13068:	2300      	movs	r3, #0
   1306a:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   1306e:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   13072:	6857      	ldr	r7, [r2, #4]
   13074:	0772      	lsls	r2, r6, #29
   13076:	d505      	bpl.n	13084 <d_print_comp.part.10+0xa24>
   13078:	783b      	ldrb	r3, [r7, #0]
   1307a:	b91b      	cbnz	r3, 13084 <d_print_comp.part.10+0xa24>
   1307c:	68ba      	ldr	r2, [r7, #8]
   1307e:	2a06      	cmp	r2, #6
   13080:	f001 83bb 	beq.w	147fa <d_print_comp.part.10+0x219a>
   13084:	463a      	mov	r2, r7
   13086:	4620      	mov	r0, r4
   13088:	4631      	mov	r1, r6
   1308a:	f001 fd7f 	bl	14b8c <d_print_comp>
   1308e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   13092:	2b3c      	cmp	r3, #60	; 0x3c
   13094:	f001 832f 	beq.w	146f6 <d_print_comp.part.10+0x2096>
   13098:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1309c:	2bff      	cmp	r3, #255	; 0xff
   1309e:	f001 822a 	beq.w	144f6 <d_print_comp.part.10+0x1e96>
   130a2:	1c59      	adds	r1, r3, #1
   130a4:	223c      	movs	r2, #60	; 0x3c
   130a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   130aa:	54e2      	strb	r2, [r4, r3]
   130ac:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   130b0:	4631      	mov	r1, r6
   130b2:	68aa      	ldr	r2, [r5, #8]
   130b4:	4620      	mov	r0, r4
   130b6:	f001 fd69 	bl	14b8c <d_print_comp>
   130ba:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   130be:	2b3e      	cmp	r3, #62	; 0x3e
   130c0:	f001 830b 	beq.w	146da <d_print_comp.part.10+0x207a>
   130c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   130c8:	2bff      	cmp	r3, #255	; 0xff
   130ca:	f001 8201 	beq.w	144d0 <d_print_comp.part.10+0x1e70>
   130ce:	1c59      	adds	r1, r3, #1
   130d0:	223e      	movs	r2, #62	; 0x3e
   130d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   130d6:	54e2      	strb	r2, [r4, r3]
   130d8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   130dc:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   130e0:	f7ff bb32 	b.w	12748 <d_print_comp.part.10+0xe8>
   130e4:	2301      	movs	r3, #1
   130e6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   130ea:	f7ff bb2d 	b.w	12748 <d_print_comp.part.10+0xe8>
   130ee:	f8d2 8008 	ldr.w	r8, [r2, #8]
   130f2:	f898 3000 	ldrb.w	r3, [r8]
   130f6:	2b37      	cmp	r3, #55	; 0x37
   130f8:	f000 875d 	beq.w	13fb6 <d_print_comp.part.10+0x1956>
   130fc:	2301      	movs	r3, #1
   130fe:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   13102:	f7ff bb21 	b.w	12748 <d_print_comp.part.10+0xe8>
   13106:	6857      	ldr	r7, [r2, #4]
   13108:	6895      	ldr	r5, [r2, #8]
   1310a:	783b      	ldrb	r3, [r7, #0]
   1310c:	2b31      	cmp	r3, #49	; 0x31
   1310e:	f001 8003 	beq.w	14118 <d_print_comp.part.10+0x1ab8>
   13112:	2b33      	cmp	r3, #51	; 0x33
   13114:	f001 8046 	beq.w	141a4 <d_print_comp.part.10+0x1b44>
   13118:	463a      	mov	r2, r7
   1311a:	4631      	mov	r1, r6
   1311c:	f002 fb98 	bl	15850 <d_print_expr_op>
   13120:	4620      	mov	r0, r4
   13122:	4631      	mov	r1, r6
   13124:	462a      	mov	r2, r5
   13126:	f002 fbcd 	bl	158c4 <d_print_subexpr>
   1312a:	f7ff bb0d 	b.w	12748 <d_print_comp.part.10+0xe8>
   1312e:	4631      	mov	r1, r6
   13130:	6852      	ldr	r2, [r2, #4]
   13132:	f002 fb8d 	bl	15850 <d_print_expr_op>
   13136:	f7ff bb07 	b.w	12748 <d_print_comp.part.10+0xe8>
   1313a:	6857      	ldr	r7, [r2, #4]
   1313c:	2f00      	cmp	r7, #0
   1313e:	f040 86d4 	bne.w	13eea <d_print_comp.part.10+0x188a>
   13142:	4d50      	ldr	r5, [pc, #320]	; (13284 <d_print_comp.part.10+0xc24>)
   13144:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13148:	f105 0804 	add.w	r8, r5, #4
   1314c:	e009      	b.n	13162 <d_print_comp.part.10+0xb02>
   1314e:	460b      	mov	r3, r1
   13150:	3101      	adds	r1, #1
   13152:	4545      	cmp	r5, r8
   13154:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13158:	54e6      	strb	r6, [r4, r3]
   1315a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1315e:	f43f aaf3 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13162:	29ff      	cmp	r1, #255	; 0xff
   13164:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13168:	d1f1      	bne.n	1314e <d_print_comp.part.10+0xaee>
   1316a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1316e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   13172:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13176:	4620      	mov	r0, r4
   13178:	4798      	blx	r3
   1317a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1317e:	3301      	adds	r3, #1
   13180:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13184:	2101      	movs	r1, #1
   13186:	2300      	movs	r3, #0
   13188:	e7e3      	b.n	13152 <d_print_comp.part.10+0xaf2>
   1318a:	4f3f      	ldr	r7, [pc, #252]	; (13288 <d_print_comp.part.10+0xc28>)
   1318c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13190:	f107 0a0a 	add.w	sl, r7, #10
   13194:	f04f 0900 	mov.w	r9, #0
   13198:	e00a      	b.n	131b0 <d_print_comp.part.10+0xb50>
   1319a:	460b      	mov	r3, r1
   1319c:	3101      	adds	r1, #1
   1319e:	4557      	cmp	r7, sl
   131a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   131a4:	f804 8003 	strb.w	r8, [r4, r3]
   131a8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   131ac:	f000 85e8 	beq.w	13d80 <d_print_comp.part.10+0x1720>
   131b0:	29ff      	cmp	r1, #255	; 0xff
   131b2:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   131b6:	d1f0      	bne.n	1319a <d_print_comp.part.10+0xb3a>
   131b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   131bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   131c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   131c4:	4620      	mov	r0, r4
   131c6:	4798      	blx	r3
   131c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   131cc:	3301      	adds	r3, #1
   131ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   131d2:	2101      	movs	r1, #1
   131d4:	2300      	movs	r3, #0
   131d6:	e7e2      	b.n	1319e <d_print_comp.part.10+0xb3e>
   131d8:	6852      	ldr	r2, [r2, #4]
   131da:	492c      	ldr	r1, [pc, #176]	; (1328c <d_print_comp.part.10+0xc2c>)
   131dc:	a806      	add	r0, sp, #24
   131de:	f005 fd0b 	bl	18bf8 <siprintf>
   131e2:	a806      	add	r0, sp, #24
   131e4:	f005 fd2c 	bl	18c40 <strlen>
   131e8:	2800      	cmp	r0, #0
   131ea:	f43f aaad 	beq.w	12748 <d_print_comp.part.10+0xe8>
   131ee:	f10d 0517 	add.w	r5, sp, #23
   131f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   131f6:	182f      	adds	r7, r5, r0
   131f8:	f04f 0800 	mov.w	r8, #0
   131fc:	e009      	b.n	13212 <d_print_comp.part.10+0xbb2>
   131fe:	460b      	mov	r3, r1
   13200:	3101      	adds	r1, #1
   13202:	42bd      	cmp	r5, r7
   13204:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13208:	54e6      	strb	r6, [r4, r3]
   1320a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1320e:	f43f aa9b 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13212:	29ff      	cmp	r1, #255	; 0xff
   13214:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13218:	d1f1      	bne.n	131fe <d_print_comp.part.10+0xb9e>
   1321a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1321e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13222:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13226:	4620      	mov	r0, r4
   13228:	4798      	blx	r3
   1322a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1322e:	3301      	adds	r3, #1
   13230:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13234:	2101      	movs	r1, #1
   13236:	2300      	movs	r3, #0
   13238:	e7e3      	b.n	13202 <d_print_comp.part.10+0xba2>
   1323a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1323e:	7915      	ldrb	r5, [r2, #4]
   13240:	29ff      	cmp	r1, #255	; 0xff
   13242:	f001 80ae 	beq.w	143a2 <d_print_comp.part.10+0x1d42>
   13246:	1c4b      	adds	r3, r1, #1
   13248:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1324c:	5465      	strb	r5, [r4, r1]
   1324e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   13252:	f7ff ba79 	b.w	12748 <d_print_comp.part.10+0xe8>
   13256:	4631      	mov	r1, r6
   13258:	6852      	ldr	r2, [r2, #4]
   1325a:	f001 fc97 	bl	14b8c <d_print_comp>
   1325e:	4620      	mov	r0, r4
   13260:	4631      	mov	r1, r6
   13262:	68aa      	ldr	r2, [r5, #8]
   13264:	f001 fc92 	bl	14b8c <d_print_comp>
   13268:	f7ff ba6e 	b.w	12748 <d_print_comp.part.10+0xe8>
   1326c:	4f08      	ldr	r7, [pc, #32]	; (13290 <d_print_comp.part.10+0xc30>)
   1326e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13272:	f107 0a0e 	add.w	sl, r7, #14
   13276:	f04f 0900 	mov.w	r9, #0
   1327a:	e01a      	b.n	132b2 <d_print_comp.part.10+0xc52>
   1327c:	0001a6eb 	.word	0x0001a6eb
   13280:	0001a7ff 	.word	0x0001a7ff
   13284:	0001a78f 	.word	0x0001a78f
   13288:	0001a77f 	.word	0x0001a77f
   1328c:	0001a5ac 	.word	0x0001a5ac
   13290:	0001a76f 	.word	0x0001a76f
   13294:	0001a721 	.word	0x0001a721
   13298:	0001a71f 	.word	0x0001a71f
   1329c:	460b      	mov	r3, r1
   1329e:	3101      	adds	r1, #1
   132a0:	4557      	cmp	r7, sl
   132a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   132a6:	f804 8003 	strb.w	r8, [r4, r3]
   132aa:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   132ae:	f000 8560 	beq.w	13d72 <d_print_comp.part.10+0x1712>
   132b2:	29ff      	cmp	r1, #255	; 0xff
   132b4:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   132b8:	d1f0      	bne.n	1329c <d_print_comp.part.10+0xc3c>
   132ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   132be:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   132c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   132c6:	4620      	mov	r0, r4
   132c8:	4798      	blx	r3
   132ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   132ce:	3301      	adds	r3, #1
   132d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   132d4:	2101      	movs	r1, #1
   132d6:	2300      	movs	r3, #0
   132d8:	e7e2      	b.n	132a0 <d_print_comp.part.10+0xc40>
   132da:	6852      	ldr	r2, [r2, #4]
   132dc:	7811      	ldrb	r1, [r2, #0]
   132de:	2927      	cmp	r1, #39	; 0x27
   132e0:	f040 85b4 	bne.w	13e4c <d_print_comp.part.10+0x17ec>
   132e4:	6852      	ldr	r2, [r2, #4]
   132e6:	7c17      	ldrb	r7, [r2, #16]
   132e8:	b15f      	cbz	r7, 13302 <d_print_comp.part.10+0xca2>
   132ea:	2f06      	cmp	r7, #6
   132ec:	f241 8178 	bls.w	145e0 <d_print_comp.part.10+0x1f80>
   132f0:	2f07      	cmp	r7, #7
   132f2:	d106      	bne.n	13302 <d_print_comp.part.10+0xca2>
   132f4:	68aa      	ldr	r2, [r5, #8]
   132f6:	7811      	ldrb	r1, [r2, #0]
   132f8:	b919      	cbnz	r1, 13302 <d_print_comp.part.10+0xca2>
   132fa:	6891      	ldr	r1, [r2, #8]
   132fc:	2901      	cmp	r1, #1
   132fe:	f001 83ad 	beq.w	14a5c <d_print_comp.part.10+0x23fc>
   13302:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13306:	29ff      	cmp	r1, #255	; 0xff
   13308:	f001 8150 	beq.w	145ac <d_print_comp.part.10+0x1f4c>
   1330c:	1c4a      	adds	r2, r1, #1
   1330e:	2328      	movs	r3, #40	; 0x28
   13310:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13314:	5463      	strb	r3, [r4, r1]
   13316:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1331a:	686a      	ldr	r2, [r5, #4]
   1331c:	4620      	mov	r0, r4
   1331e:	4631      	mov	r1, r6
   13320:	f001 fc34 	bl	14b8c <d_print_comp>
   13324:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   13328:	2bff      	cmp	r3, #255	; 0xff
   1332a:	f001 811c 	beq.w	14566 <d_print_comp.part.10+0x1f06>
   1332e:	1c59      	adds	r1, r3, #1
   13330:	2229      	movs	r2, #41	; 0x29
   13332:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13336:	54e2      	strb	r2, [r4, r3]
   13338:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1333c:	782b      	ldrb	r3, [r5, #0]
   1333e:	2b3c      	cmp	r3, #60	; 0x3c
   13340:	f001 8206 	beq.w	14750 <d_print_comp.part.10+0x20f0>
   13344:	2f08      	cmp	r7, #8
   13346:	f001 81e4 	beq.w	14712 <d_print_comp.part.10+0x20b2>
   1334a:	4620      	mov	r0, r4
   1334c:	4631      	mov	r1, r6
   1334e:	68aa      	ldr	r2, [r5, #8]
   13350:	f001 fc1c 	bl	14b8c <d_print_comp>
   13354:	f7ff b9f8 	b.w	12748 <d_print_comp.part.10+0xe8>
   13358:	2301      	movs	r3, #1
   1335a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   1335e:	f7ff b9f3 	b.w	12748 <d_print_comp.part.10+0xe8>
   13362:	6893      	ldr	r3, [r2, #8]
   13364:	781a      	ldrb	r2, [r3, #0]
   13366:	2a39      	cmp	r2, #57	; 0x39
   13368:	f47f aec8 	bne.w	130fc <d_print_comp.part.10+0xa9c>
   1336c:	689f      	ldr	r7, [r3, #8]
   1336e:	783a      	ldrb	r2, [r7, #0]
   13370:	2a3a      	cmp	r2, #58	; 0x3a
   13372:	f47f aec3 	bne.w	130fc <d_print_comp.part.10+0xa9c>
   13376:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1337a:	49ba      	ldr	r1, [pc, #744]	; (13664 <d_print_comp.part.10+0x1004>)
   1337c:	f8da 2004 	ldr.w	r2, [sl, #4]
   13380:	f8d3 8004 	ldr.w	r8, [r3, #4]
   13384:	6810      	ldr	r0, [r2, #0]
   13386:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1338a:	68bd      	ldr	r5, [r7, #8]
   1338c:	f003 f9c4 	bl	16718 <strcmp>
   13390:	2800      	cmp	r0, #0
   13392:	f001 8290 	beq.w	148b6 <d_print_comp.part.10+0x2256>
   13396:	4620      	mov	r0, r4
   13398:	49b3      	ldr	r1, [pc, #716]	; (13668 <d_print_comp.part.10+0x1008>)
   1339a:	f7ff f92d 	bl	125f8 <d_append_string>
   1339e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   133a2:	b143      	cbz	r3, 133b6 <d_print_comp.part.10+0xd56>
   133a4:	4620      	mov	r0, r4
   133a6:	4631      	mov	r1, r6
   133a8:	4642      	mov	r2, r8
   133aa:	f002 fa8b 	bl	158c4 <d_print_subexpr>
   133ae:	4620      	mov	r0, r4
   133b0:	2120      	movs	r1, #32
   133b2:	f7fd fa5b 	bl	1086c <d_append_char>
   133b6:	464a      	mov	r2, r9
   133b8:	4620      	mov	r0, r4
   133ba:	4631      	mov	r1, r6
   133bc:	f001 fbe6 	bl	14b8c <d_print_comp>
   133c0:	2d00      	cmp	r5, #0
   133c2:	f43f a9c1 	beq.w	12748 <d_print_comp.part.10+0xe8>
   133c6:	4620      	mov	r0, r4
   133c8:	4631      	mov	r1, r6
   133ca:	462a      	mov	r2, r5
   133cc:	f002 fa7a 	bl	158c4 <d_print_subexpr>
   133d0:	f7ff b9ba 	b.w	12748 <d_print_comp.part.10+0xe8>
   133d4:	6852      	ldr	r2, [r2, #4]
   133d6:	b112      	cbz	r2, 133de <d_print_comp.part.10+0xd7e>
   133d8:	4631      	mov	r1, r6
   133da:	f001 fbd7 	bl	14b8c <d_print_comp>
   133de:	68ab      	ldr	r3, [r5, #8]
   133e0:	2b00      	cmp	r3, #0
   133e2:	f43f a9b1 	beq.w	12748 <d_print_comp.part.10+0xe8>
   133e6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
   133ea:	2ffd      	cmp	r7, #253	; 0xfd
   133ec:	f200 86f9 	bhi.w	141e2 <d_print_comp.part.10+0x1b82>
   133f0:	f8df 8288 	ldr.w	r8, [pc, #648]	; 1367c <d_print_comp.part.10+0x101c>
   133f4:	f04f 0a00 	mov.w	sl, #0
   133f8:	f108 0b02 	add.w	fp, r8, #2
   133fc:	4639      	mov	r1, r7
   133fe:	e009      	b.n	13414 <d_print_comp.part.10+0xdb4>
   13400:	460b      	mov	r3, r1
   13402:	3101      	adds	r1, #1
   13404:	45d8      	cmp	r8, fp
   13406:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1340a:	54e7      	strb	r7, [r4, r3]
   1340c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   13410:	f000 84fd 	beq.w	13e0e <d_print_comp.part.10+0x17ae>
   13414:	29ff      	cmp	r1, #255	; 0xff
   13416:	f818 7f01 	ldrb.w	r7, [r8, #1]!
   1341a:	d1f1      	bne.n	13400 <d_print_comp.part.10+0xda0>
   1341c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13420:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   13424:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13428:	4620      	mov	r0, r4
   1342a:	4798      	blx	r3
   1342c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13430:	3301      	adds	r3, #1
   13432:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13436:	2101      	movs	r1, #1
   13438:	2300      	movs	r3, #0
   1343a:	e7e3      	b.n	13404 <d_print_comp.part.10+0xda4>
   1343c:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
   13440:	2b00      	cmp	r3, #0
   13442:	f040 8629 	bne.w	14098 <d_print_comp.part.10+0x1a38>
   13446:	686a      	ldr	r2, [r5, #4]
   13448:	4988      	ldr	r1, [pc, #544]	; (1366c <d_print_comp.part.10+0x100c>)
   1344a:	6853      	ldr	r3, [r2, #4]
   1344c:	428b      	cmp	r3, r1
   1344e:	f000 85fb 	beq.w	14048 <d_print_comp.part.10+0x19e8>
   13452:	4631      	mov	r1, r6
   13454:	4620      	mov	r0, r4
   13456:	f001 fb99 	bl	14b8c <d_print_comp>
   1345a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1345e:	2bff      	cmp	r3, #255	; 0xff
   13460:	f001 80f4 	beq.w	1464c <d_print_comp.part.10+0x1fec>
   13464:	1c59      	adds	r1, r3, #1
   13466:	2220      	movs	r2, #32
   13468:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1346c:	54e2      	strb	r2, [r4, r3]
   1346e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   13472:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   13476:	2b00      	cmp	r3, #0
   13478:	f000 84eb 	beq.w	13e52 <d_print_comp.part.10+0x17f2>
   1347c:	4d7c      	ldr	r5, [pc, #496]	; (13670 <d_print_comp.part.10+0x1010>)
   1347e:	f04f 0800 	mov.w	r8, #0
   13482:	1daf      	adds	r7, r5, #6
   13484:	e009      	b.n	1349a <d_print_comp.part.10+0xe3a>
   13486:	460b      	mov	r3, r1
   13488:	3101      	adds	r1, #1
   1348a:	42bd      	cmp	r5, r7
   1348c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13490:	54e6      	strb	r6, [r4, r3]
   13492:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13496:	f43f a957 	beq.w	12748 <d_print_comp.part.10+0xe8>
   1349a:	29ff      	cmp	r1, #255	; 0xff
   1349c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   134a0:	d1f1      	bne.n	13486 <d_print_comp.part.10+0xe26>
   134a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   134a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   134aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   134ae:	4620      	mov	r0, r4
   134b0:	4798      	blx	r3
   134b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   134b6:	3301      	adds	r3, #1
   134b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   134bc:	2101      	movs	r1, #1
   134be:	2300      	movs	r3, #0
   134c0:	e7e3      	b.n	1348a <d_print_comp.part.10+0xe2a>
   134c2:	ab16      	add	r3, sp, #88	; 0x58
   134c4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   134c8:	f843 2d40 	str.w	r2, [r3, #-64]!
   134cc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   134d0:	68aa      	ldr	r2, [r5, #8]
   134d2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   134d6:	9309      	str	r3, [sp, #36]	; 0x24
   134d8:	2700      	movs	r7, #0
   134da:	4631      	mov	r1, r6
   134dc:	9507      	str	r5, [sp, #28]
   134de:	9708      	str	r7, [sp, #32]
   134e0:	f001 fb54 	bl	14b8c <d_print_comp>
   134e4:	9b08      	ldr	r3, [sp, #32]
   134e6:	b923      	cbnz	r3, 134f2 <d_print_comp.part.10+0xe92>
   134e8:	4631      	mov	r1, r6
   134ea:	462a      	mov	r2, r5
   134ec:	4620      	mov	r0, r4
   134ee:	f001 fb59 	bl	14ba4 <d_print_mod>
   134f2:	9b06      	ldr	r3, [sp, #24]
   134f4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   134f8:	f7ff b926 	b.w	12748 <d_print_comp.part.10+0xe8>
   134fc:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
   13500:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   13504:	f8cd b008 	str.w	fp, [sp, #8]
   13508:	a916      	add	r1, sp, #88	; 0x58
   1350a:	2200      	movs	r2, #0
   1350c:	f841 bd40 	str.w	fp, [r1, #-64]!
   13510:	9309      	str	r3, [sp, #36]	; 0x24
   13512:	9b02      	ldr	r3, [sp, #8]
   13514:	9101      	str	r1, [sp, #4]
   13516:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
   1351a:	9507      	str	r5, [sp, #28]
   1351c:	9208      	str	r2, [sp, #32]
   1351e:	2b00      	cmp	r3, #0
   13520:	f001 831d 	beq.w	14b5e <d_print_comp.part.10+0x24fe>
   13524:	685b      	ldr	r3, [r3, #4]
   13526:	781b      	ldrb	r3, [r3, #0]
   13528:	3b19      	subs	r3, #25
   1352a:	2b02      	cmp	r3, #2
   1352c:	f201 8317 	bhi.w	14b5e <d_print_comp.part.10+0x24fe>
   13530:	46ab      	mov	fp, r5
   13532:	f04f 0801 	mov.w	r8, #1
   13536:	9f02      	ldr	r7, [sp, #8]
   13538:	9603      	str	r6, [sp, #12]
   1353a:	468a      	mov	sl, r1
   1353c:	460d      	mov	r5, r1
   1353e:	e004      	b.n	1354a <d_print_comp.part.10+0xeea>
   13540:	687b      	ldr	r3, [r7, #4]
   13542:	781b      	ldrb	r3, [r3, #0]
   13544:	3b19      	subs	r3, #25
   13546:	2b02      	cmp	r3, #2
   13548:	d81d      	bhi.n	13586 <d_print_comp.part.10+0xf26>
   1354a:	ea4f 1c08 	mov.w	ip, r8, lsl #4
   1354e:	f10d 0958 	add.w	r9, sp, #88	; 0x58
   13552:	68bb      	ldr	r3, [r7, #8]
   13554:	44e1      	add	r9, ip
   13556:	f1a9 0640 	sub.w	r6, r9, #64	; 0x40
   1355a:	b98b      	cbnz	r3, 13580 <d_print_comp.part.10+0xf20>
   1355c:	f1b8 0f03 	cmp.w	r8, #3
   13560:	f200 87dc 	bhi.w	1451c <d_print_comp.part.10+0x1ebc>
   13564:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   13568:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1356c:	f849 5c40 	str.w	r5, [r9, #-64]
   13570:	2101      	movs	r1, #1
   13572:	eb0a 050c 	add.w	r5, sl, ip
   13576:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1357a:	f108 0801 	add.w	r8, r8, #1
   1357e:	60b9      	str	r1, [r7, #8]
   13580:	683f      	ldr	r7, [r7, #0]
   13582:	2f00      	cmp	r7, #0
   13584:	d1dc      	bne.n	13540 <d_print_comp.part.10+0xee0>
   13586:	9e03      	ldr	r6, [sp, #12]
   13588:	f8db 2008 	ldr.w	r2, [fp, #8]
   1358c:	4620      	mov	r0, r4
   1358e:	4631      	mov	r1, r6
   13590:	f001 fafc 	bl	14b8c <d_print_comp>
   13594:	9b08      	ldr	r3, [sp, #32]
   13596:	9a02      	ldr	r2, [sp, #8]
   13598:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1359c:	465d      	mov	r5, fp
   1359e:	2b00      	cmp	r3, #0
   135a0:	f47f a8d2 	bne.w	12748 <d_print_comp.part.10+0xe8>
   135a4:	f1b8 0f01 	cmp.w	r8, #1
   135a8:	f001 8139 	beq.w	1481e <d_print_comp.part.10+0x21be>
   135ac:	9b01      	ldr	r3, [sp, #4]
   135ae:	eb03 1708 	add.w	r7, r3, r8, lsl #4
   135b2:	f857 2c0c 	ldr.w	r2, [r7, #-12]
   135b6:	f108 38ff 	add.w	r8, r8, #4294967295
   135ba:	4620      	mov	r0, r4
   135bc:	4631      	mov	r1, r6
   135be:	f001 faf1 	bl	14ba4 <d_print_mod>
   135c2:	f1b8 0f01 	cmp.w	r8, #1
   135c6:	f1a7 0710 	sub.w	r7, r7, #16
   135ca:	d1f2      	bne.n	135b2 <d_print_comp.part.10+0xf52>
   135cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   135d0:	4620      	mov	r0, r4
   135d2:	4631      	mov	r1, r6
   135d4:	1d2a      	adds	r2, r5, #4
   135d6:	f001 febb 	bl	15350 <d_print_array_type.isra.9>
   135da:	f7ff b8b5 	b.w	12748 <d_print_comp.part.10+0xe8>
   135de:	06b3      	lsls	r3, r6, #26
   135e0:	f100 8548 	bmi.w	14074 <d_print_comp.part.10+0x1a14>
   135e4:	6853      	ldr	r3, [r2, #4]
   135e6:	b11b      	cbz	r3, 135f0 <d_print_comp.part.10+0xf90>
   135e8:	f016 0340 	ands.w	r3, r6, #64	; 0x40
   135ec:	f000 879b 	beq.w	14526 <d_print_comp.part.10+0x1ec6>
   135f0:	f026 0660 	bic.w	r6, r6, #96	; 0x60
   135f4:	4620      	mov	r0, r4
   135f6:	4631      	mov	r1, r6
   135f8:	f105 0208 	add.w	r2, r5, #8
   135fc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   13600:	f001 ff76 	bl	154f0 <d_print_function_type.isra.11>
   13604:	f7ff b8a0 	b.w	12748 <d_print_comp.part.10+0xe8>
   13608:	4e1a      	ldr	r6, [pc, #104]	; (13674 <d_print_comp.part.10+0x1014>)
   1360a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1360e:	f106 090e 	add.w	r9, r6, #14
   13612:	f04f 0800 	mov.w	r8, #0
   13616:	e009      	b.n	1362c <d_print_comp.part.10+0xfcc>
   13618:	460b      	mov	r3, r1
   1361a:	3101      	adds	r1, #1
   1361c:	454e      	cmp	r6, r9
   1361e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13622:	54e7      	strb	r7, [r4, r3]
   13624:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   13628:	f000 82f7 	beq.w	13c1a <d_print_comp.part.10+0x15ba>
   1362c:	29ff      	cmp	r1, #255	; 0xff
   1362e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   13632:	d1f1      	bne.n	13618 <d_print_comp.part.10+0xfb8>
   13634:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13638:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1363c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13640:	4620      	mov	r0, r4
   13642:	4798      	blx	r3
   13644:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13648:	3301      	adds	r3, #1
   1364a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1364e:	2101      	movs	r1, #1
   13650:	2300      	movs	r3, #0
   13652:	e7e3      	b.n	1361c <d_print_comp.part.10+0xfbc>
   13654:	4f08      	ldr	r7, [pc, #32]	; (13678 <d_print_comp.part.10+0x1018>)
   13656:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1365a:	f107 0a16 	add.w	sl, r7, #22
   1365e:	f04f 0900 	mov.w	r9, #0
   13662:	e018      	b.n	13696 <d_print_comp.part.10+0x1036>
   13664:	0001a58c 	.word	0x0001a58c
   13668:	0001a74c 	.word	0x0001a74c
   1366c:	00019b84 	.word	0x00019b84
   13670:	0001a70f 	.word	0x0001a70f
   13674:	0001a7ef 	.word	0x0001a7ef
   13678:	0001a6ef 	.word	0x0001a6ef
   1367c:	0001a71f 	.word	0x0001a71f
   13680:	460b      	mov	r3, r1
   13682:	3101      	adds	r1, #1
   13684:	4557      	cmp	r7, sl
   13686:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1368a:	f804 8003 	strb.w	r8, [r4, r3]
   1368e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   13692:	f000 82bb 	beq.w	13c0c <d_print_comp.part.10+0x15ac>
   13696:	29ff      	cmp	r1, #255	; 0xff
   13698:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   1369c:	d1f0      	bne.n	13680 <d_print_comp.part.10+0x1020>
   1369e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   136a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   136a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   136aa:	4620      	mov	r0, r4
   136ac:	4798      	blx	r3
   136ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   136b2:	3301      	adds	r3, #1
   136b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   136b8:	2101      	movs	r1, #1
   136ba:	2300      	movs	r3, #0
   136bc:	e7e2      	b.n	13684 <d_print_comp.part.10+0x1024>
   136be:	4fd0      	ldr	r7, [pc, #832]	; (13a00 <d_print_comp.part.10+0x13a0>)
   136c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   136c4:	f107 0a1c 	add.w	sl, r7, #28
   136c8:	f04f 0900 	mov.w	r9, #0
   136cc:	e00a      	b.n	136e4 <d_print_comp.part.10+0x1084>
   136ce:	460b      	mov	r3, r1
   136d0:	3101      	adds	r1, #1
   136d2:	4557      	cmp	r7, sl
   136d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   136d8:	f804 8003 	strb.w	r8, [r4, r3]
   136dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   136e0:	f000 8361 	beq.w	13da6 <d_print_comp.part.10+0x1746>
   136e4:	29ff      	cmp	r1, #255	; 0xff
   136e6:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   136ea:	d1f0      	bne.n	136ce <d_print_comp.part.10+0x106e>
   136ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   136f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   136f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   136f8:	4620      	mov	r0, r4
   136fa:	4798      	blx	r3
   136fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13700:	3301      	adds	r3, #1
   13702:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13706:	2101      	movs	r1, #1
   13708:	2300      	movs	r3, #0
   1370a:	e7e2      	b.n	136d2 <d_print_comp.part.10+0x1072>
   1370c:	4fbd      	ldr	r7, [pc, #756]	; (13a04 <d_print_comp.part.10+0x13a4>)
   1370e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13712:	f107 0a08 	add.w	sl, r7, #8
   13716:	f04f 0900 	mov.w	r9, #0
   1371a:	e00a      	b.n	13732 <d_print_comp.part.10+0x10d2>
   1371c:	460b      	mov	r3, r1
   1371e:	3101      	adds	r1, #1
   13720:	4557      	cmp	r7, sl
   13722:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13726:	f804 8003 	strb.w	r8, [r4, r3]
   1372a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1372e:	f000 82b1 	beq.w	13c94 <d_print_comp.part.10+0x1634>
   13732:	29ff      	cmp	r1, #255	; 0xff
   13734:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13738:	d1f0      	bne.n	1371c <d_print_comp.part.10+0x10bc>
   1373a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1373e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13742:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13746:	4620      	mov	r0, r4
   13748:	4798      	blx	r3
   1374a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1374e:	3301      	adds	r3, #1
   13750:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13754:	2101      	movs	r1, #1
   13756:	2300      	movs	r3, #0
   13758:	e7e2      	b.n	13720 <d_print_comp.part.10+0x10c0>
   1375a:	4fab      	ldr	r7, [pc, #684]	; (13a08 <d_print_comp.part.10+0x13a8>)
   1375c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13760:	f107 0a1d 	add.w	sl, r7, #29
   13764:	f04f 0900 	mov.w	r9, #0
   13768:	e00a      	b.n	13780 <d_print_comp.part.10+0x1120>
   1376a:	460b      	mov	r3, r1
   1376c:	3101      	adds	r1, #1
   1376e:	4557      	cmp	r7, sl
   13770:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13774:	f804 8003 	strb.w	r8, [r4, r3]
   13778:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1377c:	f000 8340 	beq.w	13e00 <d_print_comp.part.10+0x17a0>
   13780:	29ff      	cmp	r1, #255	; 0xff
   13782:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13786:	d1f0      	bne.n	1376a <d_print_comp.part.10+0x110a>
   13788:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1378c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13790:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13794:	4620      	mov	r0, r4
   13796:	4798      	blx	r3
   13798:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1379c:	3301      	adds	r3, #1
   1379e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   137a2:	2101      	movs	r1, #1
   137a4:	2300      	movs	r3, #0
   137a6:	e7e2      	b.n	1376e <d_print_comp.part.10+0x110e>
   137a8:	4f98      	ldr	r7, [pc, #608]	; (13a0c <d_print_comp.part.10+0x13ac>)
   137aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   137ae:	f107 0a09 	add.w	sl, r7, #9
   137b2:	f04f 0900 	mov.w	r9, #0
   137b6:	e00a      	b.n	137ce <d_print_comp.part.10+0x116e>
   137b8:	460b      	mov	r3, r1
   137ba:	3101      	adds	r1, #1
   137bc:	4557      	cmp	r7, sl
   137be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   137c2:	f804 8003 	strb.w	r8, [r4, r3]
   137c6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   137ca:	f000 81d4 	beq.w	13b76 <d_print_comp.part.10+0x1516>
   137ce:	29ff      	cmp	r1, #255	; 0xff
   137d0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   137d4:	d1f0      	bne.n	137b8 <d_print_comp.part.10+0x1158>
   137d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   137da:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   137de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   137e2:	4620      	mov	r0, r4
   137e4:	4798      	blx	r3
   137e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   137ea:	3301      	adds	r3, #1
   137ec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   137f0:	2101      	movs	r1, #1
   137f2:	2300      	movs	r3, #0
   137f4:	e7e2      	b.n	137bc <d_print_comp.part.10+0x115c>
   137f6:	f016 0604 	ands.w	r6, r6, #4
   137fa:	6853      	ldr	r3, [r2, #4]
   137fc:	f040 834b 	bne.w	13e96 <d_print_comp.part.10+0x1836>
   13800:	685f      	ldr	r7, [r3, #4]
   13802:	f8d3 9000 	ldr.w	r9, [r3]
   13806:	2f00      	cmp	r7, #0
   13808:	f43e af9e 	beq.w	12748 <d_print_comp.part.10+0xe8>
   1380c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13810:	46b0      	mov	r8, r6
   13812:	e00a      	b.n	1382a <d_print_comp.part.10+0x11ca>
   13814:	460b      	mov	r3, r1
   13816:	3101      	adds	r1, #1
   13818:	3601      	adds	r6, #1
   1381a:	42b7      	cmp	r7, r6
   1381c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13820:	54e5      	strb	r5, [r4, r3]
   13822:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   13826:	f43e af8f 	beq.w	12748 <d_print_comp.part.10+0xe8>
   1382a:	29ff      	cmp	r1, #255	; 0xff
   1382c:	f819 5006 	ldrb.w	r5, [r9, r6]
   13830:	d1f0      	bne.n	13814 <d_print_comp.part.10+0x11b4>
   13832:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13836:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1383a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1383e:	4620      	mov	r0, r4
   13840:	4798      	blx	r3
   13842:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13846:	3301      	adds	r3, #1
   13848:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1384c:	2101      	movs	r1, #1
   1384e:	2300      	movs	r3, #0
   13850:	e7e2      	b.n	13818 <d_print_comp.part.10+0x11b8>
   13852:	6850      	ldr	r0, [r2, #4]
   13854:	7803      	ldrb	r3, [r0, #0]
   13856:	2b05      	cmp	r3, #5
   13858:	f000 870b 	beq.w	14672 <d_print_comp.part.10+0x2012>
   1385c:	2b23      	cmp	r3, #35	; 0x23
   1385e:	f000 83a5 	beq.w	13fac <d_print_comp.part.10+0x194c>
   13862:	782a      	ldrb	r2, [r5, #0]
   13864:	429a      	cmp	r2, r3
   13866:	f000 83a1 	beq.w	13fac <d_print_comp.part.10+0x194c>
   1386a:	2b24      	cmp	r3, #36	; 0x24
   1386c:	f47e af50 	bne.w	12710 <d_print_comp.part.10+0xb0>
   13870:	ab16      	add	r3, sp, #88	; 0x58
   13872:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   13876:	6842      	ldr	r2, [r0, #4]
   13878:	f843 1d40 	str.w	r1, [r3, #-64]!
   1387c:	2000      	movs	r0, #0
   1387e:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   13882:	9507      	str	r5, [sp, #28]
   13884:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   13888:	9008      	str	r0, [sp, #32]
   1388a:	9109      	str	r1, [sp, #36]	; 0x24
   1388c:	2a00      	cmp	r2, #0
   1388e:	f47e af4d 	bne.w	1272c <d_print_comp.part.10+0xcc>
   13892:	f7fe bf4a 	b.w	1272a <d_print_comp.part.10+0xca>
   13896:	4631      	mov	r1, r6
   13898:	6852      	ldr	r2, [r2, #4]
   1389a:	f001 f977 	bl	14b8c <d_print_comp>
   1389e:	f7fe bf53 	b.w	12748 <d_print_comp.part.10+0xe8>
   138a2:	6857      	ldr	r7, [r2, #4]
   138a4:	4d5a      	ldr	r5, [pc, #360]	; (13a10 <d_print_comp.part.10+0x13b0>)
   138a6:	f8d7 9008 	ldr.w	r9, [r7, #8]
   138aa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   138ae:	f105 0a08 	add.w	sl, r5, #8
   138b2:	f04f 0800 	mov.w	r8, #0
   138b6:	e009      	b.n	138cc <d_print_comp.part.10+0x126c>
   138b8:	460b      	mov	r3, r1
   138ba:	3101      	adds	r1, #1
   138bc:	4555      	cmp	r5, sl
   138be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   138c2:	54e6      	strb	r6, [r4, r3]
   138c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   138c8:	f000 8163 	beq.w	13b92 <d_print_comp.part.10+0x1532>
   138cc:	29ff      	cmp	r1, #255	; 0xff
   138ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   138d2:	d1f1      	bne.n	138b8 <d_print_comp.part.10+0x1258>
   138d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   138d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   138dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   138e0:	4620      	mov	r0, r4
   138e2:	4798      	blx	r3
   138e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   138e8:	3301      	adds	r3, #1
   138ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   138ee:	2101      	movs	r1, #1
   138f0:	2300      	movs	r3, #0
   138f2:	e7e3      	b.n	138bc <d_print_comp.part.10+0x125c>
   138f4:	4f45      	ldr	r7, [pc, #276]	; (13a0c <d_print_comp.part.10+0x13ac>)
   138f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   138fa:	f107 0a09 	add.w	sl, r7, #9
   138fe:	f04f 0900 	mov.w	r9, #0
   13902:	e00a      	b.n	1391a <d_print_comp.part.10+0x12ba>
   13904:	460b      	mov	r3, r1
   13906:	3101      	adds	r1, #1
   13908:	4557      	cmp	r7, sl
   1390a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1390e:	f804 8003 	strb.w	r8, [r4, r3]
   13912:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   13916:	f000 8135 	beq.w	13b84 <d_print_comp.part.10+0x1524>
   1391a:	29ff      	cmp	r1, #255	; 0xff
   1391c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13920:	d1f0      	bne.n	13904 <d_print_comp.part.10+0x12a4>
   13922:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13926:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1392a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1392e:	4620      	mov	r0, r4
   13930:	4798      	blx	r3
   13932:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13936:	3301      	adds	r3, #1
   13938:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1393c:	2101      	movs	r1, #1
   1393e:	2300      	movs	r3, #0
   13940:	e7e2      	b.n	13908 <d_print_comp.part.10+0x12a8>
   13942:	6852      	ldr	r2, [r2, #4]
   13944:	68af      	ldr	r7, [r5, #8]
   13946:	b112      	cbz	r2, 1394e <d_print_comp.part.10+0x12ee>
   13948:	4631      	mov	r1, r6
   1394a:	f001 f91f 	bl	14b8c <d_print_comp>
   1394e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   13952:	2bff      	cmp	r3, #255	; 0xff
   13954:	f000 8484 	beq.w	14260 <d_print_comp.part.10+0x1c00>
   13958:	1c5a      	adds	r2, r3, #1
   1395a:	257b      	movs	r5, #123	; 0x7b
   1395c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13960:	4631      	mov	r1, r6
   13962:	54e5      	strb	r5, [r4, r3]
   13964:	463a      	mov	r2, r7
   13966:	4620      	mov	r0, r4
   13968:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1396c:	f001 f90e 	bl	14b8c <d_print_comp>
   13970:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13974:	29ff      	cmp	r1, #255	; 0xff
   13976:	f000 8461 	beq.w	1423c <d_print_comp.part.10+0x1bdc>
   1397a:	1c4a      	adds	r2, r1, #1
   1397c:	237d      	movs	r3, #125	; 0x7d
   1397e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13982:	5463      	strb	r3, [r4, r1]
   13984:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13988:	f7fe bede 	b.w	12748 <d_print_comp.part.10+0xe8>
   1398c:	2301      	movs	r3, #1
   1398e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   13992:	f7fe bed9 	b.w	12748 <d_print_comp.part.10+0xe8>
   13996:	687f      	ldr	r7, [r7, #4]
   13998:	2f00      	cmp	r7, #0
   1399a:	f000 8699 	beq.w	146d0 <d_print_comp.part.10+0x2070>
   1399e:	f1b8 0f04 	cmp.w	r8, #4
   139a2:	f47f a999 	bne.w	12cd8 <d_print_comp.part.10+0x678>
   139a6:	2301      	movs	r3, #1
   139a8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   139ac:	f7fe becc 	b.w	12748 <d_print_comp.part.10+0xe8>
   139b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   139b4:	29ff      	cmp	r1, #255	; 0xff
   139b6:	f000 870e 	beq.w	147d6 <d_print_comp.part.10+0x2176>
   139ba:	1c4a      	adds	r2, r1, #1
   139bc:	232e      	movs	r3, #46	; 0x2e
   139be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   139c2:	5463      	strb	r3, [r4, r1]
   139c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   139c8:	f8d5 8008 	ldr.w	r8, [r5, #8]
   139cc:	f898 3000 	ldrb.w	r3, [r8]
   139d0:	2b45      	cmp	r3, #69	; 0x45
   139d2:	f000 84c1 	beq.w	14358 <d_print_comp.part.10+0x1cf8>
   139d6:	4620      	mov	r0, r4
   139d8:	4631      	mov	r1, r6
   139da:	4642      	mov	r2, r8
   139dc:	f001 f8d6 	bl	14b8c <d_print_comp>
   139e0:	f7fe beb2 	b.w	12748 <d_print_comp.part.10+0xe8>
   139e4:	4620      	mov	r0, r4
   139e6:	4631      	mov	r1, r6
   139e8:	686a      	ldr	r2, [r5, #4]
   139ea:	f001 f8cf 	bl	14b8c <d_print_comp>
   139ee:	f7fe beab 	b.w	12748 <d_print_comp.part.10+0xe8>
   139f2:	4620      	mov	r0, r4
   139f4:	4631      	mov	r1, r6
   139f6:	686a      	ldr	r2, [r5, #4]
   139f8:	f001 f8c8 	bl	14b8c <d_print_comp>
   139fc:	f7fe bea4 	b.w	12748 <d_print_comp.part.10+0xe8>
   13a00:	0001a7bf 	.word	0x0001a7bf
   13a04:	0001a7df 	.word	0x0001a7df
   13a08:	0001a79f 	.word	0x0001a79f
   13a0c:	0001a72f 	.word	0x0001a72f
   13a10:	0001a723 	.word	0x0001a723
   13a14:	4fbd      	ldr	r7, [pc, #756]	; (13d0c <d_print_comp.part.10+0x16ac>)
   13a16:	68aa      	ldr	r2, [r5, #8]
   13a18:	4631      	mov	r1, r6
   13a1a:	4620      	mov	r0, r4
   13a1c:	f001 f8b6 	bl	14b8c <d_print_comp>
   13a20:	f107 0a05 	add.w	sl, r7, #5
   13a24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13a28:	f04f 0900 	mov.w	r9, #0
   13a2c:	e009      	b.n	13a42 <d_print_comp.part.10+0x13e2>
   13a2e:	460b      	mov	r3, r1
   13a30:	3101      	adds	r1, #1
   13a32:	4557      	cmp	r7, sl
   13a34:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13a38:	f804 8003 	strb.w	r8, [r4, r3]
   13a3c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   13a40:	d013      	beq.n	13a6a <d_print_comp.part.10+0x140a>
   13a42:	29ff      	cmp	r1, #255	; 0xff
   13a44:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13a48:	d1f1      	bne.n	13a2e <d_print_comp.part.10+0x13ce>
   13a4a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13a4e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13a52:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13a56:	4620      	mov	r0, r4
   13a58:	4798      	blx	r3
   13a5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13a5e:	3301      	adds	r3, #1
   13a60:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13a64:	2101      	movs	r1, #1
   13a66:	2300      	movs	r3, #0
   13a68:	e7e3      	b.n	13a32 <d_print_comp.part.10+0x13d2>
   13a6a:	4620      	mov	r0, r4
   13a6c:	4631      	mov	r1, r6
   13a6e:	686a      	ldr	r2, [r5, #4]
   13a70:	f001 f88c 	bl	14b8c <d_print_comp>
   13a74:	f7fe be68 	b.w	12748 <d_print_comp.part.10+0xe8>
   13a78:	4620      	mov	r0, r4
   13a7a:	4631      	mov	r1, r6
   13a7c:	686a      	ldr	r2, [r5, #4]
   13a7e:	f001 f885 	bl	14b8c <d_print_comp>
   13a82:	f7fe be61 	b.w	12748 <d_print_comp.part.10+0xe8>
   13a86:	4620      	mov	r0, r4
   13a88:	4631      	mov	r1, r6
   13a8a:	686a      	ldr	r2, [r5, #4]
   13a8c:	f001 f87e 	bl	14b8c <d_print_comp>
   13a90:	f7fe be5a 	b.w	12748 <d_print_comp.part.10+0xe8>
   13a94:	4620      	mov	r0, r4
   13a96:	4631      	mov	r1, r6
   13a98:	686a      	ldr	r2, [r5, #4]
   13a9a:	f001 f877 	bl	14b8c <d_print_comp>
   13a9e:	f7fe be53 	b.w	12748 <d_print_comp.part.10+0xe8>
   13aa2:	4620      	mov	r0, r4
   13aa4:	4631      	mov	r1, r6
   13aa6:	686a      	ldr	r2, [r5, #4]
   13aa8:	f001 f870 	bl	14b8c <d_print_comp>
   13aac:	f7fe be4c 	b.w	12748 <d_print_comp.part.10+0xe8>
   13ab0:	4620      	mov	r0, r4
   13ab2:	4631      	mov	r1, r6
   13ab4:	686a      	ldr	r2, [r5, #4]
   13ab6:	f001 f869 	bl	14b8c <d_print_comp>
   13aba:	f7fe be45 	b.w	12748 <d_print_comp.part.10+0xe8>
   13abe:	4f94      	ldr	r7, [pc, #592]	; (13d10 <d_print_comp.part.10+0x16b0>)
   13ac0:	686a      	ldr	r2, [r5, #4]
   13ac2:	4631      	mov	r1, r6
   13ac4:	4620      	mov	r0, r4
   13ac6:	f001 f861 	bl	14b8c <d_print_comp>
   13aca:	f107 0a04 	add.w	sl, r7, #4
   13ace:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13ad2:	f04f 0900 	mov.w	r9, #0
   13ad6:	e009      	b.n	13aec <d_print_comp.part.10+0x148c>
   13ad8:	460b      	mov	r3, r1
   13ada:	3101      	adds	r1, #1
   13adc:	4557      	cmp	r7, sl
   13ade:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13ae2:	f804 8003 	strb.w	r8, [r4, r3]
   13ae6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   13aea:	d01a      	beq.n	13b22 <d_print_comp.part.10+0x14c2>
   13aec:	29ff      	cmp	r1, #255	; 0xff
   13aee:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   13af2:	d1f1      	bne.n	13ad8 <d_print_comp.part.10+0x1478>
   13af4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13af8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   13afc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13b00:	4620      	mov	r0, r4
   13b02:	4798      	blx	r3
   13b04:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13b08:	3301      	adds	r3, #1
   13b0a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13b0e:	2101      	movs	r1, #1
   13b10:	2300      	movs	r3, #0
   13b12:	e7e3      	b.n	13adc <d_print_comp.part.10+0x147c>
   13b14:	4620      	mov	r0, r4
   13b16:	4631      	mov	r1, r6
   13b18:	686a      	ldr	r2, [r5, #4]
   13b1a:	f001 f837 	bl	14b8c <d_print_comp>
   13b1e:	f7fe be13 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b22:	4620      	mov	r0, r4
   13b24:	4631      	mov	r1, r6
   13b26:	68aa      	ldr	r2, [r5, #8]
   13b28:	f001 f830 	bl	14b8c <d_print_comp>
   13b2c:	f7fe be0c 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b30:	4620      	mov	r0, r4
   13b32:	4631      	mov	r1, r6
   13b34:	686a      	ldr	r2, [r5, #4]
   13b36:	f001 f829 	bl	14b8c <d_print_comp>
   13b3a:	f7fe be05 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b3e:	4620      	mov	r0, r4
   13b40:	4631      	mov	r1, r6
   13b42:	686a      	ldr	r2, [r5, #4]
   13b44:	f001 f822 	bl	14b8c <d_print_comp>
   13b48:	f7fe bdfe 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b4c:	4620      	mov	r0, r4
   13b4e:	4631      	mov	r1, r6
   13b50:	686a      	ldr	r2, [r5, #4]
   13b52:	f001 f81b 	bl	14b8c <d_print_comp>
   13b56:	f7fe bdf7 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b5a:	4620      	mov	r0, r4
   13b5c:	4631      	mov	r1, r6
   13b5e:	686a      	ldr	r2, [r5, #4]
   13b60:	f001 f814 	bl	14b8c <d_print_comp>
   13b64:	f7fe bdf0 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b68:	4620      	mov	r0, r4
   13b6a:	4631      	mov	r1, r6
   13b6c:	686a      	ldr	r2, [r5, #4]
   13b6e:	f001 f80d 	bl	14b8c <d_print_comp>
   13b72:	f7fe bde9 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b76:	4620      	mov	r0, r4
   13b78:	4631      	mov	r1, r6
   13b7a:	1d2a      	adds	r2, r5, #4
   13b7c:	f001 fda4 	bl	156c8 <d_print_cast.isra.12>
   13b80:	f7fe bde2 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b84:	4620      	mov	r0, r4
   13b86:	4631      	mov	r1, r6
   13b88:	68aa      	ldr	r2, [r5, #8]
   13b8a:	f000 ffff 	bl	14b8c <d_print_comp>
   13b8e:	f7fe bddb 	b.w	12748 <d_print_comp.part.10+0xe8>
   13b92:	687d      	ldr	r5, [r7, #4]
   13b94:	782b      	ldrb	r3, [r5, #0]
   13b96:	3b61      	subs	r3, #97	; 0x61
   13b98:	2b19      	cmp	r3, #25
   13b9a:	f240 82a4 	bls.w	140e6 <d_print_comp.part.10+0x1a86>
   13b9e:	eb05 0309 	add.w	r3, r5, r9
   13ba2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   13ba6:	2b20      	cmp	r3, #32
   13ba8:	bf0c      	ite	eq
   13baa:	f109 37ff 	addeq.w	r7, r9, #4294967295
   13bae:	464f      	movne	r7, r9
   13bb0:	2f00      	cmp	r7, #0
   13bb2:	f43e adc9 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13bb6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13bba:	442f      	add	r7, r5
   13bbc:	f04f 0800 	mov.w	r8, #0
   13bc0:	e009      	b.n	13bd6 <d_print_comp.part.10+0x1576>
   13bc2:	460b      	mov	r3, r1
   13bc4:	3101      	adds	r1, #1
   13bc6:	42bd      	cmp	r5, r7
   13bc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13bcc:	54e6      	strb	r6, [r4, r3]
   13bce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13bd2:	f43e adb9 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13bd6:	29ff      	cmp	r1, #255	; 0xff
   13bd8:	f815 6b01 	ldrb.w	r6, [r5], #1
   13bdc:	d1f1      	bne.n	13bc2 <d_print_comp.part.10+0x1562>
   13bde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13be2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13be6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13bea:	4620      	mov	r0, r4
   13bec:	4798      	blx	r3
   13bee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13bf2:	3301      	adds	r3, #1
   13bf4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13bf8:	2101      	movs	r1, #1
   13bfa:	2300      	movs	r3, #0
   13bfc:	e7e3      	b.n	13bc6 <d_print_comp.part.10+0x1566>
   13bfe:	4620      	mov	r0, r4
   13c00:	4631      	mov	r1, r6
   13c02:	686a      	ldr	r2, [r5, #4]
   13c04:	f000 ffc2 	bl	14b8c <d_print_comp>
   13c08:	f7fe bd9e 	b.w	12748 <d_print_comp.part.10+0xe8>
   13c0c:	4620      	mov	r0, r4
   13c0e:	4631      	mov	r1, r6
   13c10:	686a      	ldr	r2, [r5, #4]
   13c12:	f000 ffbb 	bl	14b8c <d_print_comp>
   13c16:	f7fe bd97 	b.w	12748 <d_print_comp.part.10+0xe8>
   13c1a:	686a      	ldr	r2, [r5, #4]
   13c1c:	493d      	ldr	r1, [pc, #244]	; (13d14 <d_print_comp.part.10+0x16b4>)
   13c1e:	3201      	adds	r2, #1
   13c20:	a806      	add	r0, sp, #24
   13c22:	f004 ffe9 	bl	18bf8 <siprintf>
   13c26:	a806      	add	r0, sp, #24
   13c28:	f005 f80a 	bl	18c40 <strlen>
   13c2c:	b320      	cbz	r0, 13c78 <d_print_comp.part.10+0x1618>
   13c2e:	f10d 0517 	add.w	r5, sp, #23
   13c32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13c36:	182f      	adds	r7, r5, r0
   13c38:	f04f 0800 	mov.w	r8, #0
   13c3c:	e008      	b.n	13c50 <d_print_comp.part.10+0x15f0>
   13c3e:	460b      	mov	r3, r1
   13c40:	3101      	adds	r1, #1
   13c42:	42bd      	cmp	r5, r7
   13c44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13c48:	54e6      	strb	r6, [r4, r3]
   13c4a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13c4e:	d015      	beq.n	13c7c <d_print_comp.part.10+0x161c>
   13c50:	29ff      	cmp	r1, #255	; 0xff
   13c52:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13c56:	d1f2      	bne.n	13c3e <d_print_comp.part.10+0x15de>
   13c58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13c5c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13c60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13c64:	4620      	mov	r0, r4
   13c66:	4798      	blx	r3
   13c68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13c6c:	3301      	adds	r3, #1
   13c6e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13c72:	2101      	movs	r1, #1
   13c74:	2300      	movs	r3, #0
   13c76:	e7e4      	b.n	13c42 <d_print_comp.part.10+0x15e2>
   13c78:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13c7c:	29ff      	cmp	r1, #255	; 0xff
   13c7e:	f000 8302 	beq.w	14286 <d_print_comp.part.10+0x1c26>
   13c82:	1c4a      	adds	r2, r1, #1
   13c84:	237d      	movs	r3, #125	; 0x7d
   13c86:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13c8a:	5463      	strb	r3, [r4, r1]
   13c8c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13c90:	f7fe bd5a 	b.w	12748 <d_print_comp.part.10+0xe8>
   13c94:	4631      	mov	r1, r6
   13c96:	4e20      	ldr	r6, [pc, #128]	; (13d18 <d_print_comp.part.10+0x16b8>)
   13c98:	686a      	ldr	r2, [r5, #4]
   13c9a:	4620      	mov	r0, r4
   13c9c:	f000 ff76 	bl	14b8c <d_print_comp>
   13ca0:	f106 0902 	add.w	r9, r6, #2
   13ca4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13ca8:	f04f 0800 	mov.w	r8, #0
   13cac:	e008      	b.n	13cc0 <d_print_comp.part.10+0x1660>
   13cae:	460b      	mov	r3, r1
   13cb0:	3101      	adds	r1, #1
   13cb2:	454e      	cmp	r6, r9
   13cb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13cb8:	54e7      	strb	r7, [r4, r3]
   13cba:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   13cbe:	d013      	beq.n	13ce8 <d_print_comp.part.10+0x1688>
   13cc0:	29ff      	cmp	r1, #255	; 0xff
   13cc2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   13cc6:	d1f2      	bne.n	13cae <d_print_comp.part.10+0x164e>
   13cc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13ccc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13cd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13cd4:	4620      	mov	r0, r4
   13cd6:	4798      	blx	r3
   13cd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13cdc:	3301      	adds	r3, #1
   13cde:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13ce2:	2101      	movs	r1, #1
   13ce4:	2300      	movs	r3, #0
   13ce6:	e7e4      	b.n	13cb2 <d_print_comp.part.10+0x1652>
   13ce8:	68aa      	ldr	r2, [r5, #8]
   13cea:	490a      	ldr	r1, [pc, #40]	; (13d14 <d_print_comp.part.10+0x16b4>)
   13cec:	3201      	adds	r2, #1
   13cee:	a806      	add	r0, sp, #24
   13cf0:	f004 ff82 	bl	18bf8 <siprintf>
   13cf4:	a806      	add	r0, sp, #24
   13cf6:	f004 ffa3 	bl	18c40 <strlen>
   13cfa:	b360      	cbz	r0, 13d56 <d_print_comp.part.10+0x16f6>
   13cfc:	f10d 0517 	add.w	r5, sp, #23
   13d00:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13d04:	182f      	adds	r7, r5, r0
   13d06:	f04f 0800 	mov.w	r8, #0
   13d0a:	e010      	b.n	13d2e <d_print_comp.part.10+0x16ce>
   13d0c:	0001a6b7 	.word	0x0001a6b7
   13d10:	0001a5f3 	.word	0x0001a5f3
   13d14:	0001a5ac 	.word	0x0001a5ac
   13d18:	0001a7eb 	.word	0x0001a7eb
   13d1c:	460b      	mov	r3, r1
   13d1e:	3101      	adds	r1, #1
   13d20:	42bd      	cmp	r5, r7
   13d22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13d26:	54e6      	strb	r6, [r4, r3]
   13d28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13d2c:	d015      	beq.n	13d5a <d_print_comp.part.10+0x16fa>
   13d2e:	29ff      	cmp	r1, #255	; 0xff
   13d30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13d34:	d1f2      	bne.n	13d1c <d_print_comp.part.10+0x16bc>
   13d36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13d3a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13d3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13d42:	4620      	mov	r0, r4
   13d44:	4798      	blx	r3
   13d46:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13d4a:	3301      	adds	r3, #1
   13d4c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13d50:	2101      	movs	r1, #1
   13d52:	2300      	movs	r3, #0
   13d54:	e7e4      	b.n	13d20 <d_print_comp.part.10+0x16c0>
   13d56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13d5a:	29ff      	cmp	r1, #255	; 0xff
   13d5c:	f000 8332 	beq.w	143c4 <d_print_comp.part.10+0x1d64>
   13d60:	1c4a      	adds	r2, r1, #1
   13d62:	237d      	movs	r3, #125	; 0x7d
   13d64:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13d68:	5463      	strb	r3, [r4, r1]
   13d6a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13d6e:	f7fe bceb 	b.w	12748 <d_print_comp.part.10+0xe8>
   13d72:	4620      	mov	r0, r4
   13d74:	4631      	mov	r1, r6
   13d76:	686a      	ldr	r2, [r5, #4]
   13d78:	f000 ff08 	bl	14b8c <d_print_comp>
   13d7c:	f7fe bce4 	b.w	12748 <d_print_comp.part.10+0xe8>
   13d80:	4631      	mov	r1, r6
   13d82:	686a      	ldr	r2, [r5, #4]
   13d84:	4620      	mov	r0, r4
   13d86:	f000 ff01 	bl	14b8c <d_print_comp>
   13d8a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13d8e:	29ff      	cmp	r1, #255	; 0xff
   13d90:	f000 828a 	beq.w	142a8 <d_print_comp.part.10+0x1c48>
   13d94:	1c4a      	adds	r2, r1, #1
   13d96:	2329      	movs	r3, #41	; 0x29
   13d98:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13d9c:	5463      	strb	r3, [r4, r1]
   13d9e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13da2:	f7fe bcd1 	b.w	12748 <d_print_comp.part.10+0xe8>
   13da6:	4620      	mov	r0, r4
   13da8:	4631      	mov	r1, r6
   13daa:	686a      	ldr	r2, [r5, #4]
   13dac:	f000 feee 	bl	14b8c <d_print_comp>
   13db0:	f7fe bcca 	b.w	12748 <d_print_comp.part.10+0xe8>
   13db4:	4631      	mov	r1, r6
   13db6:	68aa      	ldr	r2, [r5, #8]
   13db8:	4620      	mov	r0, r4
   13dba:	f000 fee7 	bl	14b8c <d_print_comp>
   13dbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13dc2:	29ff      	cmp	r1, #255	; 0xff
   13dc4:	f000 830f 	beq.w	143e6 <d_print_comp.part.10+0x1d86>
   13dc8:	1c4a      	adds	r2, r1, #1
   13dca:	235d      	movs	r3, #93	; 0x5d
   13dcc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13dd0:	5463      	strb	r3, [r4, r1]
   13dd2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13dd6:	f7fe bcb7 	b.w	12748 <d_print_comp.part.10+0xe8>
   13dda:	4631      	mov	r1, r6
   13ddc:	68aa      	ldr	r2, [r5, #8]
   13dde:	4620      	mov	r0, r4
   13de0:	f000 fed4 	bl	14b8c <d_print_comp>
   13de4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13de8:	29ff      	cmp	r1, #255	; 0xff
   13dea:	f000 826e 	beq.w	142ca <d_print_comp.part.10+0x1c6a>
   13dee:	1c4a      	adds	r2, r1, #1
   13df0:	235d      	movs	r3, #93	; 0x5d
   13df2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13df6:	5463      	strb	r3, [r4, r1]
   13df8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13dfc:	f7fe bca4 	b.w	12748 <d_print_comp.part.10+0xe8>
   13e00:	4620      	mov	r0, r4
   13e02:	4631      	mov	r1, r6
   13e04:	686a      	ldr	r2, [r5, #4]
   13e06:	f000 fec1 	bl	14b8c <d_print_comp>
   13e0a:	f7fe bc9d 	b.w	12748 <d_print_comp.part.10+0xe8>
   13e0e:	68aa      	ldr	r2, [r5, #8]
   13e10:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
   13e14:	460f      	mov	r7, r1
   13e16:	4620      	mov	r0, r4
   13e18:	4631      	mov	r1, r6
   13e1a:	f000 feb7 	bl	14b8c <d_print_comp>
   13e1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13e22:	429d      	cmp	r5, r3
   13e24:	f47e ac90 	bne.w	12748 <d_print_comp.part.10+0xe8>
   13e28:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   13e2c:	42bb      	cmp	r3, r7
   13e2e:	f47e ac8b 	bne.w	12748 <d_print_comp.part.10+0xe8>
   13e32:	3f02      	subs	r7, #2
   13e34:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   13e38:	f7fe bc86 	b.w	12748 <d_print_comp.part.10+0xe8>
   13e3c:	686d      	ldr	r5, [r5, #4]
   13e3e:	9501      	str	r5, [sp, #4]
   13e40:	f1b8 0f00 	cmp.w	r8, #0
   13e44:	f47f a83b 	bne.w	12ebe <d_print_comp.part.10+0x85e>
   13e48:	f7fe bc7e 	b.w	12748 <d_print_comp.part.10+0xe8>
   13e4c:	2700      	movs	r7, #0
   13e4e:	f7ff ba58 	b.w	13302 <d_print_comp.part.10+0xca2>
   13e52:	4dab      	ldr	r5, [pc, #684]	; (14100 <d_print_comp.part.10+0x1aa0>)
   13e54:	4698      	mov	r8, r3
   13e56:	1daf      	adds	r7, r5, #6
   13e58:	e009      	b.n	13e6e <d_print_comp.part.10+0x180e>
   13e5a:	460b      	mov	r3, r1
   13e5c:	3101      	adds	r1, #1
   13e5e:	42bd      	cmp	r5, r7
   13e60:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13e64:	54e6      	strb	r6, [r4, r3]
   13e66:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13e6a:	f43e ac6d 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13e6e:	29ff      	cmp	r1, #255	; 0xff
   13e70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13e74:	d1f1      	bne.n	13e5a <d_print_comp.part.10+0x17fa>
   13e76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13e7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13e7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13e82:	4620      	mov	r0, r4
   13e84:	4798      	blx	r3
   13e86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13e8a:	3301      	adds	r3, #1
   13e8c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13e90:	2101      	movs	r1, #1
   13e92:	2300      	movs	r3, #0
   13e94:	e7e3      	b.n	13e5e <d_print_comp.part.10+0x17fe>
   13e96:	68df      	ldr	r7, [r3, #12]
   13e98:	f8d3 9008 	ldr.w	r9, [r3, #8]
   13e9c:	2f00      	cmp	r7, #0
   13e9e:	f43e ac53 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13ea2:	2500      	movs	r5, #0
   13ea4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13ea8:	46a8      	mov	r8, r5
   13eaa:	e00a      	b.n	13ec2 <d_print_comp.part.10+0x1862>
   13eac:	460b      	mov	r3, r1
   13eae:	3101      	adds	r1, #1
   13eb0:	3501      	adds	r5, #1
   13eb2:	42af      	cmp	r7, r5
   13eb4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13eb8:	54e6      	strb	r6, [r4, r3]
   13eba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13ebe:	f43e ac43 	beq.w	12748 <d_print_comp.part.10+0xe8>
   13ec2:	29ff      	cmp	r1, #255	; 0xff
   13ec4:	f819 6005 	ldrb.w	r6, [r9, r5]
   13ec8:	d1f0      	bne.n	13eac <d_print_comp.part.10+0x184c>
   13eca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13ece:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13ed2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13ed6:	4620      	mov	r0, r4
   13ed8:	4798      	blx	r3
   13eda:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13ede:	3301      	adds	r3, #1
   13ee0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13ee4:	2101      	movs	r1, #1
   13ee6:	2300      	movs	r3, #0
   13ee8:	e7e2      	b.n	13eb0 <d_print_comp.part.10+0x1850>
   13eea:	4d86      	ldr	r5, [pc, #536]	; (14104 <d_print_comp.part.10+0x1aa4>)
   13eec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   13ef0:	f105 0906 	add.w	r9, r5, #6
   13ef4:	f04f 0800 	mov.w	r8, #0
   13ef8:	e008      	b.n	13f0c <d_print_comp.part.10+0x18ac>
   13efa:	460b      	mov	r3, r1
   13efc:	3101      	adds	r1, #1
   13efe:	454d      	cmp	r5, r9
   13f00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13f04:	54e6      	strb	r6, [r4, r3]
   13f06:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13f0a:	d013      	beq.n	13f34 <d_print_comp.part.10+0x18d4>
   13f0c:	29ff      	cmp	r1, #255	; 0xff
   13f0e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13f12:	d1f2      	bne.n	13efa <d_print_comp.part.10+0x189a>
   13f14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13f18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13f1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13f20:	4620      	mov	r0, r4
   13f22:	4798      	blx	r3
   13f24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13f28:	3301      	adds	r3, #1
   13f2a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13f2e:	2101      	movs	r1, #1
   13f30:	2300      	movs	r3, #0
   13f32:	e7e4      	b.n	13efe <d_print_comp.part.10+0x189e>
   13f34:	463a      	mov	r2, r7
   13f36:	a806      	add	r0, sp, #24
   13f38:	4973      	ldr	r1, [pc, #460]	; (14108 <d_print_comp.part.10+0x1aa8>)
   13f3a:	f004 fe5d 	bl	18bf8 <siprintf>
   13f3e:	a806      	add	r0, sp, #24
   13f40:	f004 fe7e 	bl	18c40 <strlen>
   13f44:	b320      	cbz	r0, 13f90 <d_print_comp.part.10+0x1930>
   13f46:	f10d 0517 	add.w	r5, sp, #23
   13f4a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13f4e:	182f      	adds	r7, r5, r0
   13f50:	f04f 0800 	mov.w	r8, #0
   13f54:	e008      	b.n	13f68 <d_print_comp.part.10+0x1908>
   13f56:	460b      	mov	r3, r1
   13f58:	3101      	adds	r1, #1
   13f5a:	42bd      	cmp	r5, r7
   13f5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   13f60:	54e6      	strb	r6, [r4, r3]
   13f62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   13f66:	d015      	beq.n	13f94 <d_print_comp.part.10+0x1934>
   13f68:	29ff      	cmp	r1, #255	; 0xff
   13f6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   13f6e:	d1f2      	bne.n	13f56 <d_print_comp.part.10+0x18f6>
   13f70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   13f74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   13f78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13f7c:	4620      	mov	r0, r4
   13f7e:	4798      	blx	r3
   13f80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13f84:	3301      	adds	r3, #1
   13f86:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13f8a:	2101      	movs	r1, #1
   13f8c:	2300      	movs	r3, #0
   13f8e:	e7e4      	b.n	13f5a <d_print_comp.part.10+0x18fa>
   13f90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   13f94:	29ff      	cmp	r1, #255	; 0xff
   13f96:	f000 8445 	beq.w	14824 <d_print_comp.part.10+0x21c4>
   13f9a:	1c4a      	adds	r2, r1, #1
   13f9c:	237d      	movs	r3, #125	; 0x7d
   13f9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   13fa2:	5463      	strb	r3, [r4, r1]
   13fa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   13fa8:	f7fe bbce 	b.w	12748 <d_print_comp.part.10+0xe8>
   13fac:	4605      	mov	r5, r0
   13fae:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   13fb2:	f7fe bbaf 	b.w	12714 <d_print_comp.part.10+0xb4>
   13fb6:	6852      	ldr	r2, [r2, #4]
   13fb8:	6853      	ldr	r3, [r2, #4]
   13fba:	6819      	ldr	r1, [r3, #0]
   13fbc:	7848      	ldrb	r0, [r1, #1]
   13fbe:	2863      	cmp	r0, #99	; 0x63
   13fc0:	f000 83e2 	beq.w	14788 <d_print_comp.part.10+0x2128>
   13fc4:	7811      	ldrb	r1, [r2, #0]
   13fc6:	2931      	cmp	r1, #49	; 0x31
   13fc8:	f000 844e 	beq.w	14868 <d_print_comp.part.10+0x2208>
   13fcc:	6853      	ldr	r3, [r2, #4]
   13fce:	494f      	ldr	r1, [pc, #316]	; (1410c <d_print_comp.part.10+0x1aac>)
   13fd0:	6818      	ldr	r0, [r3, #0]
   13fd2:	f002 fba1 	bl	16718 <strcmp>
   13fd6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   13fda:	b918      	cbnz	r0, 13fe4 <d_print_comp.part.10+0x1984>
   13fdc:	7813      	ldrb	r3, [r2, #0]
   13fde:	2b03      	cmp	r3, #3
   13fe0:	f000 845b 	beq.w	1489a <d_print_comp.part.10+0x223a>
   13fe4:	4620      	mov	r0, r4
   13fe6:	4631      	mov	r1, r6
   13fe8:	f001 fc6c 	bl	158c4 <d_print_subexpr>
   13fec:	f8d5 8004 	ldr.w	r8, [r5, #4]
   13ff0:	4947      	ldr	r1, [pc, #284]	; (14110 <d_print_comp.part.10+0x1ab0>)
   13ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13ff6:	681f      	ldr	r7, [r3, #0]
   13ff8:	4638      	mov	r0, r7
   13ffa:	f002 fb8d 	bl	16718 <strcmp>
   13ffe:	2800      	cmp	r0, #0
   14000:	f000 8422 	beq.w	14848 <d_print_comp.part.10+0x21e8>
   14004:	4638      	mov	r0, r7
   14006:	4941      	ldr	r1, [pc, #260]	; (1410c <d_print_comp.part.10+0x1aac>)
   14008:	f002 fb86 	bl	16718 <strcmp>
   1400c:	2800      	cmp	r0, #0
   1400e:	f040 843d 	bne.w	1488c <d_print_comp.part.10+0x222c>
   14012:	68ab      	ldr	r3, [r5, #8]
   14014:	4631      	mov	r1, r6
   14016:	689a      	ldr	r2, [r3, #8]
   14018:	4620      	mov	r0, r4
   1401a:	f001 fc53 	bl	158c4 <d_print_subexpr>
   1401e:	686b      	ldr	r3, [r5, #4]
   14020:	781a      	ldrb	r2, [r3, #0]
   14022:	2a31      	cmp	r2, #49	; 0x31
   14024:	f47e ab90 	bne.w	12748 <d_print_comp.part.10+0xe8>
   14028:	685b      	ldr	r3, [r3, #4]
   1402a:	689a      	ldr	r2, [r3, #8]
   1402c:	2a01      	cmp	r2, #1
   1402e:	f47e ab8b 	bne.w	12748 <d_print_comp.part.10+0xe8>
   14032:	685b      	ldr	r3, [r3, #4]
   14034:	781b      	ldrb	r3, [r3, #0]
   14036:	2b3e      	cmp	r3, #62	; 0x3e
   14038:	f47e ab86 	bne.w	12748 <d_print_comp.part.10+0xe8>
   1403c:	4620      	mov	r0, r4
   1403e:	2129      	movs	r1, #41	; 0x29
   14040:	f7fc fc14 	bl	1086c <d_append_char>
   14044:	f7fe bb80 	b.w	12748 <d_print_comp.part.10+0xe8>
   14048:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1404c:	f7ff ba11 	b.w	13472 <d_print_comp.part.10+0xe12>
   14050:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   14054:	e002      	b.n	1405c <d_print_comp.part.10+0x19fc>
   14056:	7802      	ldrb	r2, [r0, #0]
   14058:	2a2f      	cmp	r2, #47	; 0x2f
   1405a:	d106      	bne.n	1406a <d_print_comp.part.10+0x1a0a>
   1405c:	2b00      	cmp	r3, #0
   1405e:	f340 8576 	ble.w	14b4e <d_print_comp.part.10+0x24ee>
   14062:	6880      	ldr	r0, [r0, #8]
   14064:	3b01      	subs	r3, #1
   14066:	2800      	cmp	r0, #0
   14068:	d1f5      	bne.n	14056 <d_print_comp.part.10+0x19f6>
   1406a:	2301      	movs	r3, #1
   1406c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   14070:	f7fe bb6a 	b.w	12748 <d_print_comp.part.10+0xe8>
   14074:	f026 0660 	bic.w	r6, r6, #96	; 0x60
   14078:	3208      	adds	r2, #8
   1407a:	4631      	mov	r1, r6
   1407c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   14080:	f001 fa36 	bl	154f0 <d_print_function_type.isra.11>
   14084:	686a      	ldr	r2, [r5, #4]
   14086:	2a00      	cmp	r2, #0
   14088:	f43e ab5e 	beq.w	12748 <d_print_comp.part.10+0xe8>
   1408c:	4620      	mov	r0, r4
   1408e:	4631      	mov	r1, r6
   14090:	f000 fd7c 	bl	14b8c <d_print_comp>
   14094:	f7fe bb58 	b.w	12748 <d_print_comp.part.10+0xe8>
   14098:	4f1e      	ldr	r7, [pc, #120]	; (14114 <d_print_comp.part.10+0x1ab4>)
   1409a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1409e:	f107 0a05 	add.w	sl, r7, #5
   140a2:	f04f 0900 	mov.w	r9, #0
   140a6:	e00a      	b.n	140be <d_print_comp.part.10+0x1a5e>
   140a8:	460b      	mov	r3, r1
   140aa:	3101      	adds	r1, #1
   140ac:	4557      	cmp	r7, sl
   140ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   140b2:	f804 8003 	strb.w	r8, [r4, r3]
   140b6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   140ba:	f43f a9c4 	beq.w	13446 <d_print_comp.part.10+0xde6>
   140be:	29ff      	cmp	r1, #255	; 0xff
   140c0:	f817 8f01 	ldrb.w	r8, [r7, #1]!
   140c4:	d1f0      	bne.n	140a8 <d_print_comp.part.10+0x1a48>
   140c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   140ca:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   140ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   140d2:	4620      	mov	r0, r4
   140d4:	4798      	blx	r3
   140d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   140da:	3301      	adds	r3, #1
   140dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   140e0:	2101      	movs	r1, #1
   140e2:	2300      	movs	r3, #0
   140e4:	e7e2      	b.n	140ac <d_print_comp.part.10+0x1a4c>
   140e6:	29ff      	cmp	r1, #255	; 0xff
   140e8:	f000 8421 	beq.w	1492e <d_print_comp.part.10+0x22ce>
   140ec:	1c4a      	adds	r2, r1, #1
   140ee:	2320      	movs	r3, #32
   140f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   140f4:	5463      	strb	r3, [r4, r1]
   140f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   140fa:	687d      	ldr	r5, [r7, #4]
   140fc:	e54f      	b.n	13b9e <d_print_comp.part.10+0x153e>
   140fe:	bf00      	nop
   14100:	0001a717 	.word	0x0001a717
   14104:	0001a797 	.word	0x0001a797
   14108:	0001a5ac 	.word	0x0001a5ac
   1410c:	0001a580 	.word	0x0001a580
   14110:	0001a744 	.word	0x0001a744
   14114:	0001a707 	.word	0x0001a707
   14118:	687b      	ldr	r3, [r7, #4]
   1411a:	49c5      	ldr	r1, [pc, #788]	; (14430 <d_print_comp.part.10+0x1dd0>)
   1411c:	f8d3 8000 	ldr.w	r8, [r3]
   14120:	4640      	mov	r0, r8
   14122:	f002 faf9 	bl	16718 <strcmp>
   14126:	782b      	ldrb	r3, [r5, #0]
   14128:	b910      	cbnz	r0, 14130 <d_print_comp.part.10+0x1ad0>
   1412a:	2b03      	cmp	r3, #3
   1412c:	f000 8411 	beq.w	14952 <d_print_comp.part.10+0x22f2>
   14130:	2b37      	cmp	r3, #55	; 0x37
   14132:	f000 8487 	beq.w	14a44 <d_print_comp.part.10+0x23e4>
   14136:	463a      	mov	r2, r7
   14138:	4620      	mov	r0, r4
   1413a:	4631      	mov	r1, r6
   1413c:	f001 fb88 	bl	15850 <d_print_expr_op>
   14140:	f1b8 0f00 	cmp.w	r8, #0
   14144:	f43e afec 	beq.w	13120 <d_print_comp.part.10+0xac0>
   14148:	4640      	mov	r0, r8
   1414a:	49ba      	ldr	r1, [pc, #744]	; (14434 <d_print_comp.part.10+0x1dd4>)
   1414c:	f002 fae4 	bl	16718 <strcmp>
   14150:	2800      	cmp	r0, #0
   14152:	f000 823e 	beq.w	145d2 <d_print_comp.part.10+0x1f72>
   14156:	4640      	mov	r0, r8
   14158:	49b7      	ldr	r1, [pc, #732]	; (14438 <d_print_comp.part.10+0x1dd8>)
   1415a:	f002 fadd 	bl	16718 <strcmp>
   1415e:	4607      	mov	r7, r0
   14160:	2800      	cmp	r0, #0
   14162:	f47e afdd 	bne.w	13120 <d_print_comp.part.10+0xac0>
   14166:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1416a:	2bff      	cmp	r3, #255	; 0xff
   1416c:	f000 8421 	beq.w	149b2 <d_print_comp.part.10+0x2352>
   14170:	1c58      	adds	r0, r3, #1
   14172:	2728      	movs	r7, #40	; 0x28
   14174:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   14178:	4631      	mov	r1, r6
   1417a:	54e7      	strb	r7, [r4, r3]
   1417c:	462a      	mov	r2, r5
   1417e:	4620      	mov	r0, r4
   14180:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   14184:	f000 fd02 	bl	14b8c <d_print_comp>
   14188:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1418c:	29ff      	cmp	r1, #255	; 0xff
   1418e:	f000 83ff 	beq.w	14990 <d_print_comp.part.10+0x2330>
   14192:	2329      	movs	r3, #41	; 0x29
   14194:	1c4a      	adds	r2, r1, #1
   14196:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1419a:	5463      	strb	r3, [r4, r1]
   1419c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   141a0:	f7fe bad2 	b.w	12748 <d_print_comp.part.10+0xe8>
   141a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   141a8:	29ff      	cmp	r1, #255	; 0xff
   141aa:	f000 83af 	beq.w	1490c <d_print_comp.part.10+0x22ac>
   141ae:	1c4a      	adds	r2, r1, #1
   141b0:	2328      	movs	r3, #40	; 0x28
   141b2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   141b6:	4620      	mov	r0, r4
   141b8:	5463      	strb	r3, [r4, r1]
   141ba:	1d3a      	adds	r2, r7, #4
   141bc:	4631      	mov	r1, r6
   141be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   141c2:	f001 fa81 	bl	156c8 <d_print_cast.isra.12>
   141c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   141ca:	29ff      	cmp	r1, #255	; 0xff
   141cc:	f000 838d 	beq.w	148ea <d_print_comp.part.10+0x228a>
   141d0:	1c4a      	adds	r2, r1, #1
   141d2:	2329      	movs	r3, #41	; 0x29
   141d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   141d8:	5463      	strb	r3, [r4, r1]
   141da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   141de:	f7fe bf9f 	b.w	13120 <d_print_comp.part.10+0xac0>
   141e2:	f04f 0800 	mov.w	r8, #0
   141e6:	f804 8007 	strb.w	r8, [r4, r7]
   141ea:	4639      	mov	r1, r7
   141ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   141f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   141f4:	4620      	mov	r0, r4
   141f6:	4798      	blx	r3
   141f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   141fc:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
   14200:	3301      	adds	r3, #1
   14202:	4647      	mov	r7, r8
   14204:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14208:	f7ff b8f2 	b.w	133f0 <d_print_comp.part.10+0xd90>
   1420c:	4620      	mov	r0, r4
   1420e:	4631      	mov	r1, r6
   14210:	686a      	ldr	r2, [r5, #4]
   14212:	f000 fcbb 	bl	14b8c <d_print_comp>
   14216:	f7fe ba97 	b.w	12748 <d_print_comp.part.10+0xe8>
   1421a:	2700      	movs	r7, #0
   1421c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   14220:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   14224:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
   14228:	4798      	blx	r3
   1422a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1422e:	3301      	adds	r3, #1
   14230:	4639      	mov	r1, r7
   14232:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14236:	2201      	movs	r2, #1
   14238:	f7fe bd2c 	b.w	12c94 <d_print_comp.part.10+0x634>
   1423c:	2500      	movs	r5, #0
   1423e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14242:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14246:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1424a:	4620      	mov	r0, r4
   1424c:	4798      	blx	r3
   1424e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14252:	3301      	adds	r3, #1
   14254:	4629      	mov	r1, r5
   14256:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1425a:	2201      	movs	r2, #1
   1425c:	f7ff bb8e 	b.w	1397c <d_print_comp.part.10+0x131c>
   14260:	2500      	movs	r5, #0
   14262:	4619      	mov	r1, r3
   14264:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1426c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14270:	4620      	mov	r0, r4
   14272:	4798      	blx	r3
   14274:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14278:	1c5a      	adds	r2, r3, #1
   1427a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1427e:	462b      	mov	r3, r5
   14280:	2201      	movs	r2, #1
   14282:	f7ff bb6a 	b.w	1395a <d_print_comp.part.10+0x12fa>
   14286:	2500      	movs	r5, #0
   14288:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1428c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14290:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14294:	4620      	mov	r0, r4
   14296:	4798      	blx	r3
   14298:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1429c:	3301      	adds	r3, #1
   1429e:	4629      	mov	r1, r5
   142a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   142a4:	2201      	movs	r2, #1
   142a6:	e4ed      	b.n	13c84 <d_print_comp.part.10+0x1624>
   142a8:	2500      	movs	r5, #0
   142aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   142ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   142b2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   142b6:	4620      	mov	r0, r4
   142b8:	4798      	blx	r3
   142ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   142be:	3301      	adds	r3, #1
   142c0:	4629      	mov	r1, r5
   142c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   142c6:	2201      	movs	r2, #1
   142c8:	e565      	b.n	13d96 <d_print_comp.part.10+0x1736>
   142ca:	2500      	movs	r5, #0
   142cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   142d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   142d4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   142d8:	4620      	mov	r0, r4
   142da:	4798      	blx	r3
   142dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   142e0:	3301      	adds	r3, #1
   142e2:	4629      	mov	r1, r5
   142e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   142e8:	2201      	movs	r2, #1
   142ea:	e581      	b.n	13df0 <d_print_comp.part.10+0x1790>
   142ec:	6856      	ldr	r6, [r2, #4]
   142ee:	6897      	ldr	r7, [r2, #8]
   142f0:	4437      	add	r7, r6
   142f2:	42be      	cmp	r6, r7
   142f4:	f4be aa28 	bcs.w	12748 <d_print_comp.part.10+0xe8>
   142f8:	f04f 0800 	mov.w	r8, #0
   142fc:	e00d      	b.n	1431a <d_print_comp.part.10+0x1cba>
   142fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14302:	29ff      	cmp	r1, #255	; 0xff
   14304:	d018      	beq.n	14338 <d_print_comp.part.10+0x1cd8>
   14306:	1c4b      	adds	r3, r1, #1
   14308:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1430c:	5465      	strb	r5, [r4, r1]
   1430e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   14312:	3601      	adds	r6, #1
   14314:	42b7      	cmp	r7, r6
   14316:	f67e aa17 	bls.w	12748 <d_print_comp.part.10+0xe8>
   1431a:	1bbb      	subs	r3, r7, r6
   1431c:	2b03      	cmp	r3, #3
   1431e:	7835      	ldrb	r5, [r6, #0]
   14320:	dded      	ble.n	142fe <d_print_comp.part.10+0x1c9e>
   14322:	2d5f      	cmp	r5, #95	; 0x5f
   14324:	d1eb      	bne.n	142fe <d_print_comp.part.10+0x1c9e>
   14326:	7872      	ldrb	r2, [r6, #1]
   14328:	2a5f      	cmp	r2, #95	; 0x5f
   1432a:	d1e8      	bne.n	142fe <d_print_comp.part.10+0x1c9e>
   1432c:	78b3      	ldrb	r3, [r6, #2]
   1432e:	2b55      	cmp	r3, #85	; 0x55
   14330:	f000 8350 	beq.w	149d4 <d_print_comp.part.10+0x2374>
   14334:	4615      	mov	r5, r2
   14336:	e7e2      	b.n	142fe <d_print_comp.part.10+0x1c9e>
   14338:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1433c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14344:	4620      	mov	r0, r4
   14346:	4798      	blx	r3
   14348:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1434c:	3301      	adds	r3, #1
   1434e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14352:	2100      	movs	r1, #0
   14354:	2301      	movs	r3, #1
   14356:	e7d7      	b.n	14308 <d_print_comp.part.10+0x1ca8>
   14358:	4d38      	ldr	r5, [pc, #224]	; (1443c <d_print_comp.part.10+0x1ddc>)
   1435a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1435e:	f105 0a0d 	add.w	sl, r5, #13
   14362:	f04f 0900 	mov.w	r9, #0
   14366:	e008      	b.n	1437a <d_print_comp.part.10+0x1d1a>
   14368:	460b      	mov	r3, r1
   1436a:	3101      	adds	r1, #1
   1436c:	4555      	cmp	r5, sl
   1436e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14372:	54e7      	strb	r7, [r4, r3]
   14374:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   14378:	d046      	beq.n	14408 <d_print_comp.part.10+0x1da8>
   1437a:	29ff      	cmp	r1, #255	; 0xff
   1437c:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   14380:	d1f2      	bne.n	14368 <d_print_comp.part.10+0x1d08>
   14382:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14386:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1438a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1438e:	4620      	mov	r0, r4
   14390:	4798      	blx	r3
   14392:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14396:	3301      	adds	r3, #1
   14398:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1439c:	2101      	movs	r1, #1
   1439e:	2300      	movs	r3, #0
   143a0:	e7e4      	b.n	1436c <d_print_comp.part.10+0x1d0c>
   143a2:	2600      	movs	r6, #0
   143a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   143a8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   143ac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   143b0:	4798      	blx	r3
   143b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   143b6:	3301      	adds	r3, #1
   143b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   143bc:	4631      	mov	r1, r6
   143be:	2301      	movs	r3, #1
   143c0:	f7fe bf42 	b.w	13248 <d_print_comp.part.10+0xbe8>
   143c4:	2500      	movs	r5, #0
   143c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   143ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   143d2:	4620      	mov	r0, r4
   143d4:	4798      	blx	r3
   143d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   143da:	3301      	adds	r3, #1
   143dc:	4629      	mov	r1, r5
   143de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   143e2:	2201      	movs	r2, #1
   143e4:	e4bd      	b.n	13d62 <d_print_comp.part.10+0x1702>
   143e6:	2500      	movs	r5, #0
   143e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   143ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   143f0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   143f4:	4620      	mov	r0, r4
   143f6:	4798      	blx	r3
   143f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   143fc:	3301      	adds	r3, #1
   143fe:	4629      	mov	r1, r5
   14400:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14404:	2201      	movs	r2, #1
   14406:	e4e0      	b.n	13dca <d_print_comp.part.10+0x176a>
   14408:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1440c:	490c      	ldr	r1, [pc, #48]	; (14440 <d_print_comp.part.10+0x1de0>)
   1440e:	3201      	adds	r2, #1
   14410:	a806      	add	r0, sp, #24
   14412:	f004 fbf1 	bl	18bf8 <siprintf>
   14416:	a806      	add	r0, sp, #24
   14418:	f004 fc12 	bl	18c40 <strlen>
   1441c:	b378      	cbz	r0, 1447e <d_print_comp.part.10+0x1e1e>
   1441e:	f10d 0517 	add.w	r5, sp, #23
   14422:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14426:	eb05 0a00 	add.w	sl, r5, r0
   1442a:	f04f 0900 	mov.w	r9, #0
   1442e:	e012      	b.n	14456 <d_print_comp.part.10+0x1df6>
   14430:	0001a73c 	.word	0x0001a73c
   14434:	0001a740 	.word	0x0001a740
   14438:	0001aa28 	.word	0x0001aa28
   1443c:	0001a59b 	.word	0x0001a59b
   14440:	0001a5ac 	.word	0x0001a5ac
   14444:	460b      	mov	r3, r1
   14446:	3101      	adds	r1, #1
   14448:	4555      	cmp	r5, sl
   1444a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1444e:	54e7      	strb	r7, [r4, r3]
   14450:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   14454:	d015      	beq.n	14482 <d_print_comp.part.10+0x1e22>
   14456:	29ff      	cmp	r1, #255	; 0xff
   14458:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   1445c:	d1f2      	bne.n	14444 <d_print_comp.part.10+0x1de4>
   1445e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14462:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   14466:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1446a:	4620      	mov	r0, r4
   1446c:	4798      	blx	r3
   1446e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14472:	3301      	adds	r3, #1
   14474:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14478:	2101      	movs	r1, #1
   1447a:	2300      	movs	r3, #0
   1447c:	e7e4      	b.n	14448 <d_print_comp.part.10+0x1de8>
   1447e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14482:	4dbd      	ldr	r5, [pc, #756]	; (14778 <d_print_comp.part.10+0x2118>)
   14484:	f04f 0900 	mov.w	r9, #0
   14488:	f105 0a03 	add.w	sl, r5, #3
   1448c:	e008      	b.n	144a0 <d_print_comp.part.10+0x1e40>
   1448e:	460b      	mov	r3, r1
   14490:	3101      	adds	r1, #1
   14492:	4555      	cmp	r5, sl
   14494:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14498:	54e7      	strb	r7, [r4, r3]
   1449a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1449e:	d013      	beq.n	144c8 <d_print_comp.part.10+0x1e68>
   144a0:	29ff      	cmp	r1, #255	; 0xff
   144a2:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   144a6:	d1f2      	bne.n	1448e <d_print_comp.part.10+0x1e2e>
   144a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   144ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   144b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   144b4:	4620      	mov	r0, r4
   144b6:	4798      	blx	r3
   144b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   144bc:	3301      	adds	r3, #1
   144be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   144c2:	2101      	movs	r1, #1
   144c4:	2300      	movs	r3, #0
   144c6:	e7e4      	b.n	14492 <d_print_comp.part.10+0x1e32>
   144c8:	f8d8 8004 	ldr.w	r8, [r8, #4]
   144cc:	f7ff ba83 	b.w	139d6 <d_print_comp.part.10+0x1376>
   144d0:	2500      	movs	r5, #0
   144d2:	4619      	mov	r1, r3
   144d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   144d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   144dc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   144e0:	4620      	mov	r0, r4
   144e2:	4798      	blx	r3
   144e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   144e8:	1c5a      	adds	r2, r3, #1
   144ea:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   144ee:	462b      	mov	r3, r5
   144f0:	2101      	movs	r1, #1
   144f2:	f7fe bded 	b.w	130d0 <d_print_comp.part.10+0xa70>
   144f6:	2700      	movs	r7, #0
   144f8:	4619      	mov	r1, r3
   144fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   144fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14502:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   14506:	4620      	mov	r0, r4
   14508:	4798      	blx	r3
   1450a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1450e:	1c5a      	adds	r2, r3, #1
   14510:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   14514:	463b      	mov	r3, r7
   14516:	2101      	movs	r1, #1
   14518:	f7fe bdc4 	b.w	130a4 <d_print_comp.part.10+0xa44>
   1451c:	2301      	movs	r3, #1
   1451e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   14522:	f7fe b911 	b.w	12748 <d_print_comp.part.10+0xe8>
   14526:	aa16      	add	r2, sp, #88	; 0x58
   14528:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
   1452c:	f842 1d40 	str.w	r1, [r2, #-64]!
   14530:	f026 0660 	bic.w	r6, r6, #96	; 0x60
   14534:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   14538:	686a      	ldr	r2, [r5, #4]
   1453a:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
   1453e:	9308      	str	r3, [sp, #32]
   14540:	4631      	mov	r1, r6
   14542:	4620      	mov	r0, r4
   14544:	9507      	str	r5, [sp, #28]
   14546:	9709      	str	r7, [sp, #36]	; 0x24
   14548:	f000 fb20 	bl	14b8c <d_print_comp>
   1454c:	9b08      	ldr	r3, [sp, #32]
   1454e:	9a06      	ldr	r2, [sp, #24]
   14550:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   14554:	2b00      	cmp	r3, #0
   14556:	f47e a8f7 	bne.w	12748 <d_print_comp.part.10+0xe8>
   1455a:	4620      	mov	r0, r4
   1455c:	2120      	movs	r1, #32
   1455e:	f7fc f985 	bl	1086c <d_append_char>
   14562:	f7ff b847 	b.w	135f4 <d_print_comp.part.10+0xf94>
   14566:	2200      	movs	r2, #0
   14568:	4619      	mov	r1, r3
   1456a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1456e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14572:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14576:	4620      	mov	r0, r4
   14578:	4798      	blx	r3
   1457a:	2329      	movs	r3, #41	; 0x29
   1457c:	7023      	strb	r3, [r4, #0]
   1457e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14582:	782a      	ldrb	r2, [r5, #0]
   14584:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14588:	2101      	movs	r1, #1
   1458a:	3301      	adds	r3, #1
   1458c:	2a3c      	cmp	r2, #60	; 0x3c
   1458e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14592:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14596:	f47e aed5 	bne.w	13344 <d_print_comp.part.10+0xce4>
   1459a:	232d      	movs	r3, #45	; 0x2d
   1459c:	1c4a      	adds	r2, r1, #1
   1459e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   145a2:	5463      	strb	r3, [r4, r1]
   145a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   145a8:	f7fe becc 	b.w	13344 <d_print_comp.part.10+0xce4>
   145ac:	f04f 0800 	mov.w	r8, #0
   145b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   145b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   145b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   145bc:	4620      	mov	r0, r4
   145be:	4798      	blx	r3
   145c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   145c4:	3301      	adds	r3, #1
   145c6:	4641      	mov	r1, r8
   145c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   145cc:	2201      	movs	r2, #1
   145ce:	f7fe be9e 	b.w	1330e <d_print_comp.part.10+0xcae>
   145d2:	4620      	mov	r0, r4
   145d4:	4631      	mov	r1, r6
   145d6:	462a      	mov	r2, r5
   145d8:	f000 fad8 	bl	14b8c <d_print_comp>
   145dc:	f7fe b8b4 	b.w	12748 <d_print_comp.part.10+0xe8>
   145e0:	f8d5 8008 	ldr.w	r8, [r5, #8]
   145e4:	f898 2000 	ldrb.w	r2, [r8]
   145e8:	2a00      	cmp	r2, #0
   145ea:	f47e ae8a 	bne.w	13302 <d_print_comp.part.10+0xca2>
   145ee:	2b3c      	cmp	r3, #60	; 0x3c
   145f0:	f000 8290 	beq.w	14b14 <d_print_comp.part.10+0x24b4>
   145f4:	4631      	mov	r1, r6
   145f6:	4642      	mov	r2, r8
   145f8:	4620      	mov	r0, r4
   145fa:	3f02      	subs	r7, #2
   145fc:	f000 fac6 	bl	14b8c <d_print_comp>
   14600:	2f04      	cmp	r7, #4
   14602:	f63e a8a1 	bhi.w	12748 <d_print_comp.part.10+0xe8>
   14606:	e8df f007 	tbb	[pc, r7]
   1460a:	151b      	.short	0x151b
   1460c:	090f      	.short	0x090f
   1460e:	03          	.byte	0x03
   1460f:	00          	.byte	0x00
   14610:	4620      	mov	r0, r4
   14612:	495a      	ldr	r1, [pc, #360]	; (1477c <d_print_comp.part.10+0x211c>)
   14614:	f7fd fff0 	bl	125f8 <d_append_string>
   14618:	f7fe b896 	b.w	12748 <d_print_comp.part.10+0xe8>
   1461c:	4620      	mov	r0, r4
   1461e:	4958      	ldr	r1, [pc, #352]	; (14780 <d_print_comp.part.10+0x2120>)
   14620:	f7fd ffea 	bl	125f8 <d_append_string>
   14624:	f7fe b890 	b.w	12748 <d_print_comp.part.10+0xe8>
   14628:	4620      	mov	r0, r4
   1462a:	4956      	ldr	r1, [pc, #344]	; (14784 <d_print_comp.part.10+0x2124>)
   1462c:	f7fd ffe4 	bl	125f8 <d_append_string>
   14630:	f7fe b88a 	b.w	12748 <d_print_comp.part.10+0xe8>
   14634:	4620      	mov	r0, r4
   14636:	216c      	movs	r1, #108	; 0x6c
   14638:	f7fc f918 	bl	1086c <d_append_char>
   1463c:	f7fe b884 	b.w	12748 <d_print_comp.part.10+0xe8>
   14640:	4620      	mov	r0, r4
   14642:	2175      	movs	r1, #117	; 0x75
   14644:	f7fc f912 	bl	1086c <d_append_char>
   14648:	f7fe b87e 	b.w	12748 <d_print_comp.part.10+0xe8>
   1464c:	2600      	movs	r6, #0
   1464e:	4619      	mov	r1, r3
   14650:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14654:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14658:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1465c:	4620      	mov	r0, r4
   1465e:	4798      	blx	r3
   14660:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14664:	1c5a      	adds	r2, r3, #1
   14666:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1466a:	4633      	mov	r3, r6
   1466c:	2101      	movs	r1, #1
   1466e:	f7fe befa 	b.w	13466 <d_print_comp.part.10+0xe06>
   14672:	1d01      	adds	r1, r0, #4
   14674:	4620      	mov	r0, r4
   14676:	f7fc fa15 	bl	10aa4 <d_lookup_template_argument.isra.6>
   1467a:	b180      	cbz	r0, 1469e <d_print_comp.part.10+0x203e>
   1467c:	7803      	ldrb	r3, [r0, #0]
   1467e:	2b2f      	cmp	r3, #47	; 0x2f
   14680:	f47f a8ec 	bne.w	1385c <d_print_comp.part.10+0x11fc>
   14684:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   14688:	e005      	b.n	14696 <d_print_comp.part.10+0x2036>
   1468a:	6880      	ldr	r0, [r0, #8]
   1468c:	3b01      	subs	r3, #1
   1468e:	b130      	cbz	r0, 1469e <d_print_comp.part.10+0x203e>
   14690:	7802      	ldrb	r2, [r0, #0]
   14692:	2a2f      	cmp	r2, #47	; 0x2f
   14694:	d103      	bne.n	1469e <d_print_comp.part.10+0x203e>
   14696:	2b00      	cmp	r3, #0
   14698:	dcf7      	bgt.n	1468a <d_print_comp.part.10+0x202a>
   1469a:	f000 8251 	beq.w	14b40 <d_print_comp.part.10+0x24e0>
   1469e:	2301      	movs	r3, #1
   146a0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   146a4:	f7fe b850 	b.w	12748 <d_print_comp.part.10+0xe8>
   146a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   146ac:	29ff      	cmp	r1, #255	; 0xff
   146ae:	f000 81ba 	beq.w	14a26 <d_print_comp.part.10+0x23c6>
   146b2:	1c4b      	adds	r3, r1, #1
   146b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   146b8:	4620      	mov	r0, r4
   146ba:	f804 9001 	strb.w	r9, [r4, r1]
   146be:	f855 2c0c 	ldr.w	r2, [r5, #-12]
   146c2:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   146c6:	4641      	mov	r1, r8
   146c8:	f000 fa6c 	bl	14ba4 <d_print_mod>
   146cc:	f7fe bb75 	b.w	12dba <d_print_comp.part.10+0x75a>
   146d0:	2301      	movs	r3, #1
   146d2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   146d6:	f7fe b837 	b.w	12748 <d_print_comp.part.10+0xe8>
   146da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   146de:	29ff      	cmp	r1, #255	; 0xff
   146e0:	f000 81dc 	beq.w	14a9c <d_print_comp.part.10+0x243c>
   146e4:	2220      	movs	r2, #32
   146e6:	1c4b      	adds	r3, r1, #1
   146e8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   146ec:	5462      	strb	r2, [r4, r1]
   146ee:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   146f2:	f7fe bce9 	b.w	130c8 <d_print_comp.part.10+0xa68>
   146f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   146fa:	29ff      	cmp	r1, #255	; 0xff
   146fc:	f000 81ea 	beq.w	14ad4 <d_print_comp.part.10+0x2474>
   14700:	2220      	movs	r2, #32
   14702:	1c4b      	adds	r3, r1, #1
   14704:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   14708:	5462      	strb	r2, [r4, r1]
   1470a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1470e:	f7fe bcc5 	b.w	1309c <d_print_comp.part.10+0xa3c>
   14712:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14716:	29ff      	cmp	r1, #255	; 0xff
   14718:	f000 81ec 	beq.w	14af4 <d_print_comp.part.10+0x2494>
   1471c:	1c4a      	adds	r2, r1, #1
   1471e:	235b      	movs	r3, #91	; 0x5b
   14720:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14724:	5463      	strb	r3, [r4, r1]
   14726:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1472a:	4631      	mov	r1, r6
   1472c:	68aa      	ldr	r2, [r5, #8]
   1472e:	4620      	mov	r0, r4
   14730:	f000 fa2c 	bl	14b8c <d_print_comp>
   14734:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14738:	29ff      	cmp	r1, #255	; 0xff
   1473a:	f000 819f 	beq.w	14a7c <d_print_comp.part.10+0x241c>
   1473e:	235d      	movs	r3, #93	; 0x5d
   14740:	1c4a      	adds	r2, r1, #1
   14742:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14746:	5463      	strb	r3, [r4, r1]
   14748:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1474c:	f7fd bffc 	b.w	12748 <d_print_comp.part.10+0xe8>
   14750:	29ff      	cmp	r1, #255	; 0xff
   14752:	f47f af22 	bne.w	1459a <d_print_comp.part.10+0x1f3a>
   14756:	f04f 0800 	mov.w	r8, #0
   1475a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1475e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14762:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14766:	4620      	mov	r0, r4
   14768:	4798      	blx	r3
   1476a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1476e:	3301      	adds	r3, #1
   14770:	4641      	mov	r1, r8
   14772:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14776:	e710      	b.n	1459a <d_print_comp.part.10+0x1f3a>
   14778:	0001a5af 	.word	0x0001a5af
   1477c:	0001a75c 	.word	0x0001a75c
   14780:	0001a758 	.word	0x0001a758
   14784:	0001a754 	.word	0x0001a754
   14788:	7809      	ldrb	r1, [r1, #0]
   1478a:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
   1478e:	2801      	cmp	r0, #1
   14790:	d903      	bls.n	1479a <d_print_comp.part.10+0x213a>
   14792:	3972      	subs	r1, #114	; 0x72
   14794:	2901      	cmp	r1, #1
   14796:	f63f ac15 	bhi.w	13fc4 <d_print_comp.part.10+0x1964>
   1479a:	4620      	mov	r0, r4
   1479c:	4631      	mov	r1, r6
   1479e:	f001 f857 	bl	15850 <d_print_expr_op>
   147a2:	4620      	mov	r0, r4
   147a4:	213c      	movs	r1, #60	; 0x3c
   147a6:	f7fc f861 	bl	1086c <d_append_char>
   147aa:	68ab      	ldr	r3, [r5, #8]
   147ac:	4620      	mov	r0, r4
   147ae:	685a      	ldr	r2, [r3, #4]
   147b0:	4631      	mov	r1, r6
   147b2:	f000 f9eb 	bl	14b8c <d_print_comp>
   147b6:	4620      	mov	r0, r4
   147b8:	49c0      	ldr	r1, [pc, #768]	; (14abc <d_print_comp.part.10+0x245c>)
   147ba:	f7fd ff1d 	bl	125f8 <d_append_string>
   147be:	68ab      	ldr	r3, [r5, #8]
   147c0:	4631      	mov	r1, r6
   147c2:	4620      	mov	r0, r4
   147c4:	689a      	ldr	r2, [r3, #8]
   147c6:	f000 f9e1 	bl	14b8c <d_print_comp>
   147ca:	4620      	mov	r0, r4
   147cc:	2129      	movs	r1, #41	; 0x29
   147ce:	f7fc f84d 	bl	1086c <d_append_char>
   147d2:	f7fd bfb9 	b.w	12748 <d_print_comp.part.10+0xe8>
   147d6:	2700      	movs	r7, #0
   147d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   147dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   147e0:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   147e4:	4620      	mov	r0, r4
   147e6:	4798      	blx	r3
   147e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   147ec:	3301      	adds	r3, #1
   147ee:	4639      	mov	r1, r7
   147f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   147f4:	2201      	movs	r2, #1
   147f6:	f7ff b8e1 	b.w	139bc <d_print_comp.part.10+0x135c>
   147fa:	6878      	ldr	r0, [r7, #4]
   147fc:	49b0      	ldr	r1, [pc, #704]	; (14ac0 <d_print_comp.part.10+0x2460>)
   147fe:	f004 fa27 	bl	18c50 <strncmp>
   14802:	2800      	cmp	r0, #0
   14804:	f47e ac3e 	bne.w	13084 <d_print_comp.part.10+0xa24>
   14808:	4631      	mov	r1, r6
   1480a:	4620      	mov	r0, r4
   1480c:	68aa      	ldr	r2, [r5, #8]
   1480e:	f000 f9bd 	bl	14b8c <d_print_comp>
   14812:	4620      	mov	r0, r4
   14814:	49ab      	ldr	r1, [pc, #684]	; (14ac4 <d_print_comp.part.10+0x2464>)
   14816:	f7fd feef 	bl	125f8 <d_append_string>
   1481a:	f7fe bc5f 	b.w	130dc <d_print_comp.part.10+0xa7c>
   1481e:	9b02      	ldr	r3, [sp, #8]
   14820:	f7fe bed6 	b.w	135d0 <d_print_comp.part.10+0xf70>
   14824:	2500      	movs	r5, #0
   14826:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1482a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1482e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14832:	4620      	mov	r0, r4
   14834:	4798      	blx	r3
   14836:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1483a:	3301      	adds	r3, #1
   1483c:	4629      	mov	r1, r5
   1483e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14842:	2201      	movs	r2, #1
   14844:	f7ff bbaa 	b.w	13f9c <d_print_comp.part.10+0x193c>
   14848:	4620      	mov	r0, r4
   1484a:	215b      	movs	r1, #91	; 0x5b
   1484c:	f7fc f80e 	bl	1086c <d_append_char>
   14850:	68ab      	ldr	r3, [r5, #8]
   14852:	4631      	mov	r1, r6
   14854:	4620      	mov	r0, r4
   14856:	689a      	ldr	r2, [r3, #8]
   14858:	f000 f998 	bl	14b8c <d_print_comp>
   1485c:	4620      	mov	r0, r4
   1485e:	215d      	movs	r1, #93	; 0x5d
   14860:	f7fc f804 	bl	1086c <d_append_char>
   14864:	f7ff bbdb 	b.w	1401e <d_print_comp.part.10+0x19be>
   14868:	6899      	ldr	r1, [r3, #8]
   1486a:	2901      	cmp	r1, #1
   1486c:	f47f abae 	bne.w	13fcc <d_print_comp.part.10+0x196c>
   14870:	685b      	ldr	r3, [r3, #4]
   14872:	781b      	ldrb	r3, [r3, #0]
   14874:	2b3e      	cmp	r3, #62	; 0x3e
   14876:	f47f aba9 	bne.w	13fcc <d_print_comp.part.10+0x196c>
   1487a:	4620      	mov	r0, r4
   1487c:	2128      	movs	r1, #40	; 0x28
   1487e:	f7fb fff5 	bl	1086c <d_append_char>
   14882:	686a      	ldr	r2, [r5, #4]
   14884:	f8d5 8008 	ldr.w	r8, [r5, #8]
   14888:	f7ff bba0 	b.w	13fcc <d_print_comp.part.10+0x196c>
   1488c:	4642      	mov	r2, r8
   1488e:	4620      	mov	r0, r4
   14890:	4631      	mov	r1, r6
   14892:	f000 ffdd 	bl	15850 <d_print_expr_op>
   14896:	f7ff bbbc 	b.w	14012 <d_print_comp.part.10+0x19b2>
   1489a:	6893      	ldr	r3, [r2, #8]
   1489c:	781b      	ldrb	r3, [r3, #0]
   1489e:	2b29      	cmp	r3, #41	; 0x29
   148a0:	bf1c      	itt	ne
   148a2:	2301      	movne	r3, #1
   148a4:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   148a8:	6852      	ldr	r2, [r2, #4]
   148aa:	4620      	mov	r0, r4
   148ac:	4631      	mov	r1, r6
   148ae:	f001 f809 	bl	158c4 <d_print_subexpr>
   148b2:	f7ff bb9b 	b.w	13fec <d_print_comp.part.10+0x198c>
   148b6:	4642      	mov	r2, r8
   148b8:	4620      	mov	r0, r4
   148ba:	4631      	mov	r1, r6
   148bc:	f001 f802 	bl	158c4 <d_print_subexpr>
   148c0:	4620      	mov	r0, r4
   148c2:	4631      	mov	r1, r6
   148c4:	4652      	mov	r2, sl
   148c6:	f000 ffc3 	bl	15850 <d_print_expr_op>
   148ca:	464a      	mov	r2, r9
   148cc:	4620      	mov	r0, r4
   148ce:	4631      	mov	r1, r6
   148d0:	f000 fff8 	bl	158c4 <d_print_subexpr>
   148d4:	4620      	mov	r0, r4
   148d6:	497c      	ldr	r1, [pc, #496]	; (14ac8 <d_print_comp.part.10+0x2468>)
   148d8:	f7fd fe8e 	bl	125f8 <d_append_string>
   148dc:	4620      	mov	r0, r4
   148de:	4631      	mov	r1, r6
   148e0:	462a      	mov	r2, r5
   148e2:	f000 ffef 	bl	158c4 <d_print_subexpr>
   148e6:	f7fd bf2f 	b.w	12748 <d_print_comp.part.10+0xe8>
   148ea:	2700      	movs	r7, #0
   148ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   148f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   148f4:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   148f8:	4620      	mov	r0, r4
   148fa:	4798      	blx	r3
   148fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14900:	3301      	adds	r3, #1
   14902:	4639      	mov	r1, r7
   14904:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14908:	2201      	movs	r2, #1
   1490a:	e462      	b.n	141d2 <d_print_comp.part.10+0x1b72>
   1490c:	f04f 0800 	mov.w	r8, #0
   14910:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   14914:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   14918:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
   1491c:	4798      	blx	r3
   1491e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14922:	3301      	adds	r3, #1
   14924:	4641      	mov	r1, r8
   14926:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1492a:	2201      	movs	r2, #1
   1492c:	e440      	b.n	141b0 <d_print_comp.part.10+0x1b50>
   1492e:	2500      	movs	r5, #0
   14930:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14934:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14938:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1493c:	4620      	mov	r0, r4
   1493e:	4798      	blx	r3
   14940:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14944:	3301      	adds	r3, #1
   14946:	4629      	mov	r1, r5
   14948:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1494c:	2201      	movs	r2, #1
   1494e:	f7ff bbce 	b.w	140ee <d_print_comp.part.10+0x1a8e>
   14952:	686b      	ldr	r3, [r5, #4]
   14954:	781a      	ldrb	r2, [r3, #0]
   14956:	2a01      	cmp	r2, #1
   14958:	f47f abed 	bne.w	14136 <d_print_comp.part.10+0x1ad6>
   1495c:	68aa      	ldr	r2, [r5, #8]
   1495e:	7812      	ldrb	r2, [r2, #0]
   14960:	2a29      	cmp	r2, #41	; 0x29
   14962:	bf08      	it	eq
   14964:	461d      	moveq	r5, r3
   14966:	f7ff bbe6 	b.w	14136 <d_print_comp.part.10+0x1ad6>
   1496a:	ab16      	add	r3, sp, #88	; 0x58
   1496c:	9705      	str	r7, [sp, #20]
   1496e:	f843 ad48 	str.w	sl, [r3, #-72]!
   14972:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   14976:	f7fe ba05 	b.w	12d84 <d_print_comp.part.10+0x724>
   1497a:	4631      	mov	r1, r6
   1497c:	4620      	mov	r0, r4
   1497e:	686a      	ldr	r2, [r5, #4]
   14980:	f000 ffa0 	bl	158c4 <d_print_subexpr>
   14984:	4620      	mov	r0, r4
   14986:	4951      	ldr	r1, [pc, #324]	; (14acc <d_print_comp.part.10+0x246c>)
   14988:	f7fd fe36 	bl	125f8 <d_append_string>
   1498c:	f7fd bedc 	b.w	12748 <d_print_comp.part.10+0xe8>
   14990:	2500      	movs	r5, #0
   14992:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14996:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1499a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1499e:	4620      	mov	r0, r4
   149a0:	4798      	blx	r3
   149a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   149a6:	3301      	adds	r3, #1
   149a8:	4629      	mov	r1, r5
   149aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   149ae:	f7ff bbf0 	b.w	14192 <d_print_comp.part.10+0x1b32>
   149b2:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
   149b6:	4619      	mov	r1, r3
   149b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   149bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   149c0:	4620      	mov	r0, r4
   149c2:	4798      	blx	r3
   149c4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   149c8:	1c5a      	adds	r2, r3, #1
   149ca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   149ce:	463b      	mov	r3, r7
   149d0:	f7ff bbce 	b.w	14170 <d_print_comp.part.10+0x1b10>
   149d4:	1cf3      	adds	r3, r6, #3
   149d6:	429f      	cmp	r7, r3
   149d8:	f67f acac 	bls.w	14334 <d_print_comp.part.10+0x1cd4>
   149dc:	2100      	movs	r1, #0
   149de:	e004      	b.n	149ea <d_print_comp.part.10+0x238a>
   149e0:	4615      	mov	r5, r2
   149e2:	42bb      	cmp	r3, r7
   149e4:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   149e8:	d015      	beq.n	14a16 <d_print_comp.part.10+0x23b6>
   149ea:	469c      	mov	ip, r3
   149ec:	f813 5b01 	ldrb.w	r5, [r3], #1
   149f0:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
   149f4:	b2d0      	uxtb	r0, r2
   149f6:	2809      	cmp	r0, #9
   149f8:	f1a5 0941 	sub.w	r9, r5, #65	; 0x41
   149fc:	d9f0      	bls.n	149e0 <d_print_comp.part.10+0x2380>
   149fe:	f1b9 0f05 	cmp.w	r9, #5
   14a02:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
   14a06:	d801      	bhi.n	14a0c <d_print_comp.part.10+0x23ac>
   14a08:	3d37      	subs	r5, #55	; 0x37
   14a0a:	e7ea      	b.n	149e2 <d_print_comp.part.10+0x2382>
   14a0c:	2a05      	cmp	r2, #5
   14a0e:	f200 8087 	bhi.w	14b20 <d_print_comp.part.10+0x24c0>
   14a12:	3d57      	subs	r5, #87	; 0x57
   14a14:	e7e5      	b.n	149e2 <d_print_comp.part.10+0x2382>
   14a16:	255f      	movs	r5, #95	; 0x5f
   14a18:	e471      	b.n	142fe <d_print_comp.part.10+0x1c9e>
   14a1a:	464c      	mov	r4, r9
   14a1c:	2301      	movs	r3, #1
   14a1e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   14a22:	f7fd be91 	b.w	12748 <d_print_comp.part.10+0xe8>
   14a26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14a2a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   14a2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14a32:	4620      	mov	r0, r4
   14a34:	4798      	blx	r3
   14a36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14a3a:	3301      	adds	r3, #1
   14a3c:	4631      	mov	r1, r6
   14a3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14a42:	e636      	b.n	146b2 <d_print_comp.part.10+0x2052>
   14a44:	686a      	ldr	r2, [r5, #4]
   14a46:	4620      	mov	r0, r4
   14a48:	4631      	mov	r1, r6
   14a4a:	f000 ff3b 	bl	158c4 <d_print_subexpr>
   14a4e:	4620      	mov	r0, r4
   14a50:	4631      	mov	r1, r6
   14a52:	463a      	mov	r2, r7
   14a54:	f000 fefc 	bl	15850 <d_print_expr_op>
   14a58:	f7fd be76 	b.w	12748 <d_print_comp.part.10+0xe8>
   14a5c:	2b3b      	cmp	r3, #59	; 0x3b
   14a5e:	f47e ac50 	bne.w	13302 <d_print_comp.part.10+0xca2>
   14a62:	6853      	ldr	r3, [r2, #4]
   14a64:	781b      	ldrb	r3, [r3, #0]
   14a66:	2b30      	cmp	r3, #48	; 0x30
   14a68:	f000 8088 	beq.w	14b7c <d_print_comp.part.10+0x251c>
   14a6c:	2b31      	cmp	r3, #49	; 0x31
   14a6e:	f47e ac48 	bne.w	13302 <d_print_comp.part.10+0xca2>
   14a72:	4917      	ldr	r1, [pc, #92]	; (14ad0 <d_print_comp.part.10+0x2470>)
   14a74:	f7fd fdc0 	bl	125f8 <d_append_string>
   14a78:	f7fd be66 	b.w	12748 <d_print_comp.part.10+0xe8>
   14a7c:	2500      	movs	r5, #0
   14a7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14a82:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14a86:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14a8a:	4620      	mov	r0, r4
   14a8c:	4798      	blx	r3
   14a8e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14a92:	3301      	adds	r3, #1
   14a94:	4629      	mov	r1, r5
   14a96:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14a9a:	e650      	b.n	1473e <d_print_comp.part.10+0x20de>
   14a9c:	2500      	movs	r5, #0
   14a9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14aa2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   14aa6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14aaa:	4620      	mov	r0, r4
   14aac:	4798      	blx	r3
   14aae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14ab2:	3301      	adds	r3, #1
   14ab4:	4629      	mov	r1, r5
   14ab6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14aba:	e613      	b.n	146e4 <d_print_comp.part.10+0x2084>
   14abc:	0001a80c 	.word	0x0001a80c
   14ac0:	0001a5b4 	.word	0x0001a5b4
   14ac4:	0001a5bc 	.word	0x0001a5bc
   14ac8:	0001a748 	.word	0x0001a748
   14acc:	0001a78c 	.word	0x0001a78c
   14ad0:	0001a768 	.word	0x0001a768
   14ad4:	2700      	movs	r7, #0
   14ad6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14ada:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   14ade:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14ae2:	4620      	mov	r0, r4
   14ae4:	4798      	blx	r3
   14ae6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14aea:	3301      	adds	r3, #1
   14aec:	4639      	mov	r1, r7
   14aee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14af2:	e605      	b.n	14700 <d_print_comp.part.10+0x20a0>
   14af4:	2700      	movs	r7, #0
   14af6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14afa:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   14afe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14b02:	4620      	mov	r0, r4
   14b04:	4798      	blx	r3
   14b06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14b0a:	3301      	adds	r3, #1
   14b0c:	4639      	mov	r1, r7
   14b0e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14b12:	e603      	b.n	1471c <d_print_comp.part.10+0x20bc>
   14b14:	212d      	movs	r1, #45	; 0x2d
   14b16:	f7fb fea9 	bl	1086c <d_append_char>
   14b1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
   14b1e:	e569      	b.n	145f4 <d_print_comp.part.10+0x1f94>
   14b20:	4567      	cmp	r7, ip
   14b22:	f67f af78 	bls.w	14a16 <d_print_comp.part.10+0x23b6>
   14b26:	2d5f      	cmp	r5, #95	; 0x5f
   14b28:	f47f af75 	bne.w	14a16 <d_print_comp.part.10+0x23b6>
   14b2c:	29ff      	cmp	r1, #255	; 0xff
   14b2e:	f63f abe6 	bhi.w	142fe <d_print_comp.part.10+0x1c9e>
   14b32:	b2c9      	uxtb	r1, r1
   14b34:	4620      	mov	r0, r4
   14b36:	4666      	mov	r6, ip
   14b38:	f7fb fe98 	bl	1086c <d_append_char>
   14b3c:	f7ff bbe9 	b.w	14312 <d_print_comp.part.10+0x1cb2>
   14b40:	6840      	ldr	r0, [r0, #4]
   14b42:	2800      	cmp	r0, #0
   14b44:	f43f adab 	beq.w	1469e <d_print_comp.part.10+0x203e>
   14b48:	7803      	ldrb	r3, [r0, #0]
   14b4a:	f7fe be87 	b.w	1385c <d_print_comp.part.10+0x11fc>
   14b4e:	f47f aa8c 	bne.w	1406a <d_print_comp.part.10+0x1a0a>
   14b52:	6840      	ldr	r0, [r0, #4]
   14b54:	2800      	cmp	r0, #0
   14b56:	f47e aa79 	bne.w	1304c <d_print_comp.part.10+0x9ec>
   14b5a:	f7ff ba86 	b.w	1406a <d_print_comp.part.10+0x1a0a>
   14b5e:	4631      	mov	r1, r6
   14b60:	4620      	mov	r0, r4
   14b62:	68aa      	ldr	r2, [r5, #8]
   14b64:	f000 f812 	bl	14b8c <d_print_comp>
   14b68:	9b08      	ldr	r3, [sp, #32]
   14b6a:	9902      	ldr	r1, [sp, #8]
   14b6c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
   14b70:	2b00      	cmp	r3, #0
   14b72:	f47d ade9 	bne.w	12748 <d_print_comp.part.10+0xe8>
   14b76:	460b      	mov	r3, r1
   14b78:	f7fe bd2a 	b.w	135d0 <d_print_comp.part.10+0xf70>
   14b7c:	4902      	ldr	r1, [pc, #8]	; (14b88 <d_print_comp.part.10+0x2528>)
   14b7e:	f7fd fd3b 	bl	125f8 <d_append_string>
   14b82:	f7fd bde1 	b.w	12748 <d_print_comp.part.10+0xe8>
   14b86:	bf00      	nop
   14b88:	0001a760 	.word	0x0001a760

00014b8c <d_print_comp>:
d_print_comp():
   14b8c:	b12a      	cbz	r2, 14b9a <d_print_comp+0xe>
   14b8e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   14b92:	b90b      	cbnz	r3, 14b98 <d_print_comp+0xc>
   14b94:	f7fd bd64 	b.w	12660 <d_print_comp.part.10>
   14b98:	4770      	bx	lr
   14b9a:	2201      	movs	r2, #1
   14b9c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   14ba0:	4770      	bx	lr
   14ba2:	bf00      	nop

00014ba4 <d_print_mod>:
d_print_mod():
   14ba4:	7813      	ldrb	r3, [r2, #0]
   14ba6:	3b03      	subs	r3, #3
   14ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14bac:	4615      	mov	r5, r2
   14bae:	4604      	mov	r4, r0
   14bb0:	4689      	mov	r9, r1
   14bb2:	2b2a      	cmp	r3, #42	; 0x2a
   14bb4:	f200 81d3 	bhi.w	14f5e <d_print_mod+0x3ba>
   14bb8:	e8df f013 	tbh	[pc, r3, lsl #1]
   14bbc:	01d10052 	.word	0x01d10052
   14bc0:	01d101d1 	.word	0x01d101d1
   14bc4:	01d101d1 	.word	0x01d101d1
   14bc8:	01d101d1 	.word	0x01d101d1
   14bcc:	01d101d1 	.word	0x01d101d1
   14bd0:	01d101d1 	.word	0x01d101d1
   14bd4:	01d101d1 	.word	0x01d101d1
   14bd8:	01d101d1 	.word	0x01d101d1
   14bdc:	01d101d1 	.word	0x01d101d1
   14be0:	01d101d1 	.word	0x01d101d1
   14be4:	01d101d1 	.word	0x01d101d1
   14be8:	0083005d 	.word	0x0083005d
   14bec:	005d00a9 	.word	0x005d00a9
   14bf0:	00a90083 	.word	0x00a90083
   14bf4:	00e600ce 	.word	0x00e600ce
   14bf8:	0132011d 	.word	0x0132011d
   14bfc:	01470144 	.word	0x01470144
   14c00:	0170014a 	.word	0x0170014a
   14c04:	01d101d1 	.word	0x01d101d1
   14c08:	01d101d1 	.word	0x01d101d1
   14c0c:	01d10195 	.word	0x01d10195
   14c10:	002b      	.short	0x002b
   14c12:	4ed9      	ldr	r6, [pc, #868]	; (14f78 <d_print_mod+0x3d4>)
   14c14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   14c18:	f106 0a0a 	add.w	sl, r6, #10
   14c1c:	f04f 0800 	mov.w	r8, #0
   14c20:	e009      	b.n	14c36 <d_print_mod+0x92>
   14c22:	461a      	mov	r2, r3
   14c24:	3301      	adds	r3, #1
   14c26:	4556      	cmp	r6, sl
   14c28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   14c2c:	54a7      	strb	r7, [r4, r2]
   14c2e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   14c32:	f000 81b9 	beq.w	14fa8 <d_print_mod+0x404>
   14c36:	2bff      	cmp	r3, #255	; 0xff
   14c38:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   14c3c:	d1f1      	bne.n	14c22 <d_print_mod+0x7e>
   14c3e:	4619      	mov	r1, r3
   14c40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14c44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14c48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14c4c:	4620      	mov	r0, r4
   14c4e:	4798      	blx	r3
   14c50:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14c54:	3301      	adds	r3, #1
   14c56:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14c5a:	2200      	movs	r2, #0
   14c5c:	2301      	movs	r3, #1
   14c5e:	e7e2      	b.n	14c26 <d_print_mod+0x82>
   14c60:	686a      	ldr	r2, [r5, #4]
   14c62:	2a00      	cmp	r2, #0
   14c64:	f000 80d7 	beq.w	14e16 <d_print_mod+0x272>
   14c68:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	f000 81ba 	beq.w	14fe6 <d_print_mod+0x442>
   14c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c76:	4dc1      	ldr	r5, [pc, #772]	; (14f7c <d_print_mod+0x3d8>)
   14c78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14c7c:	f105 0709 	add.w	r7, r5, #9
   14c80:	f04f 0800 	mov.w	r8, #0
   14c84:	e009      	b.n	14c9a <d_print_mod+0xf6>
   14c86:	460b      	mov	r3, r1
   14c88:	3101      	adds	r1, #1
   14c8a:	42bd      	cmp	r5, r7
   14c8c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14c90:	54e6      	strb	r6, [r4, r3]
   14c92:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14c96:	f000 8183 	beq.w	14fa0 <d_print_mod+0x3fc>
   14c9a:	29ff      	cmp	r1, #255	; 0xff
   14c9c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14ca0:	d1f1      	bne.n	14c86 <d_print_mod+0xe2>
   14ca2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14ca6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14caa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14cae:	4620      	mov	r0, r4
   14cb0:	4798      	blx	r3
   14cb2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14cb6:	3301      	adds	r3, #1
   14cb8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14cbc:	2101      	movs	r1, #1
   14cbe:	2300      	movs	r3, #0
   14cc0:	e7e3      	b.n	14c8a <d_print_mod+0xe6>
   14cc2:	4daf      	ldr	r5, [pc, #700]	; (14f80 <d_print_mod+0x3dc>)
   14cc4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14cc8:	f105 0709 	add.w	r7, r5, #9
   14ccc:	f04f 0800 	mov.w	r8, #0
   14cd0:	e009      	b.n	14ce6 <d_print_mod+0x142>
   14cd2:	460b      	mov	r3, r1
   14cd4:	3101      	adds	r1, #1
   14cd6:	42bd      	cmp	r5, r7
   14cd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14cdc:	54e6      	strb	r6, [r4, r3]
   14cde:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14ce2:	f000 815f 	beq.w	14fa4 <d_print_mod+0x400>
   14ce6:	29ff      	cmp	r1, #255	; 0xff
   14ce8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14cec:	d1f1      	bne.n	14cd2 <d_print_mod+0x12e>
   14cee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14cf2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14cf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14cfa:	4620      	mov	r0, r4
   14cfc:	4798      	blx	r3
   14cfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14d02:	3301      	adds	r3, #1
   14d04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14d08:	2101      	movs	r1, #1
   14d0a:	2300      	movs	r3, #0
   14d0c:	e7e3      	b.n	14cd6 <d_print_mod+0x132>
   14d0e:	4d9d      	ldr	r5, [pc, #628]	; (14f84 <d_print_mod+0x3e0>)
   14d10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14d14:	1daf      	adds	r7, r5, #6
   14d16:	f04f 0800 	mov.w	r8, #0
   14d1a:	e009      	b.n	14d30 <d_print_mod+0x18c>
   14d1c:	460b      	mov	r3, r1
   14d1e:	3101      	adds	r1, #1
   14d20:	42bd      	cmp	r5, r7
   14d22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d26:	54e6      	strb	r6, [r4, r3]
   14d28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14d2c:	f000 8121 	beq.w	14f72 <d_print_mod+0x3ce>
   14d30:	29ff      	cmp	r1, #255	; 0xff
   14d32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14d36:	d1f1      	bne.n	14d1c <d_print_mod+0x178>
   14d38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14d3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14d40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14d44:	4620      	mov	r0, r4
   14d46:	4798      	blx	r3
   14d48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14d4c:	3301      	adds	r3, #1
   14d4e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14d52:	2101      	movs	r1, #1
   14d54:	2300      	movs	r3, #0
   14d56:	e7e3      	b.n	14d20 <d_print_mod+0x17c>
   14d58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   14d5c:	2bff      	cmp	r3, #255	; 0xff
   14d5e:	f000 8159 	beq.w	15014 <d_print_mod+0x470>
   14d62:	1c59      	adds	r1, r3, #1
   14d64:	2220      	movs	r2, #32
   14d66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d6a:	54e2      	strb	r2, [r4, r3]
   14d6c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   14d70:	29ff      	cmp	r1, #255	; 0xff
   14d72:	f000 813e 	beq.w	14ff2 <d_print_mod+0x44e>
   14d76:	1c4a      	adds	r2, r1, #1
   14d78:	2326      	movs	r3, #38	; 0x26
   14d7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14d7e:	5463      	strb	r3, [r4, r1]
   14d80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14d88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   14d8c:	2bff      	cmp	r3, #255	; 0xff
   14d8e:	f000 8162 	beq.w	15056 <d_print_mod+0x4b2>
   14d92:	1c59      	adds	r1, r3, #1
   14d94:	2220      	movs	r2, #32
   14d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14d9a:	54e2      	strb	r2, [r4, r3]
   14d9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   14da0:	4d79      	ldr	r5, [pc, #484]	; (14f88 <d_print_mod+0x3e4>)
   14da2:	f04f 0800 	mov.w	r8, #0
   14da6:	1caf      	adds	r7, r5, #2
   14da8:	e009      	b.n	14dbe <d_print_mod+0x21a>
   14daa:	460b      	mov	r3, r1
   14dac:	42bd      	cmp	r5, r7
   14dae:	f101 0101 	add.w	r1, r1, #1
   14db2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14db6:	54e6      	strb	r6, [r4, r3]
   14db8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14dbc:	d019      	beq.n	14df2 <d_print_mod+0x24e>
   14dbe:	29ff      	cmp	r1, #255	; 0xff
   14dc0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14dc4:	d1f1      	bne.n	14daa <d_print_mod+0x206>
   14dc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14dca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14dce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14dd2:	4620      	mov	r0, r4
   14dd4:	4798      	blx	r3
   14dd6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14dda:	3301      	adds	r3, #1
   14ddc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14de0:	2300      	movs	r3, #0
   14de2:	2101      	movs	r1, #1
   14de4:	42bd      	cmp	r5, r7
   14de6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14dea:	54e6      	strb	r6, [r4, r3]
   14dec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14df0:	d1e5      	bne.n	14dbe <d_print_mod+0x21a>
   14df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14df6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14dfa:	29ff      	cmp	r1, #255	; 0xff
   14dfc:	f000 811b 	beq.w	15036 <d_print_mod+0x492>
   14e00:	1c4a      	adds	r2, r1, #1
   14e02:	2320      	movs	r3, #32
   14e04:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14e08:	5463      	strb	r3, [r4, r1]
   14e0a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14e0e:	68aa      	ldr	r2, [r5, #8]
   14e10:	2a00      	cmp	r2, #0
   14e12:	f47f af29 	bne.w	14c68 <d_print_mod+0xc4>
   14e16:	2301      	movs	r3, #1
   14e18:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   14e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e20:	f011 0904 	ands.w	r9, r1, #4
   14e24:	f47f af25 	bne.w	14c72 <d_print_mod+0xce>
   14e28:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14e2c:	29ff      	cmp	r1, #255	; 0xff
   14e2e:	f000 814d 	beq.w	150cc <d_print_mod+0x528>
   14e32:	1c4a      	adds	r2, r1, #1
   14e34:	232a      	movs	r3, #42	; 0x2a
   14e36:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14e3a:	5463      	strb	r3, [r4, r1]
   14e3c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e44:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14e48:	e792      	b.n	14d70 <d_print_mod+0x1cc>
   14e4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14e4e:	e7a7      	b.n	14da0 <d_print_mod+0x1fc>
   14e50:	4d4e      	ldr	r5, [pc, #312]	; (14f8c <d_print_mod+0x3e8>)
   14e52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14e56:	f105 0708 	add.w	r7, r5, #8
   14e5a:	f04f 0800 	mov.w	r8, #0
   14e5e:	e009      	b.n	14e74 <d_print_mod+0x2d0>
   14e60:	460b      	mov	r3, r1
   14e62:	3101      	adds	r1, #1
   14e64:	42bd      	cmp	r5, r7
   14e66:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14e6a:	54e6      	strb	r6, [r4, r3]
   14e6c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14e70:	f000 8094 	beq.w	14f9c <d_print_mod+0x3f8>
   14e74:	29ff      	cmp	r1, #255	; 0xff
   14e76:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14e7a:	d1f1      	bne.n	14e60 <d_print_mod+0x2bc>
   14e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14e80:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14e88:	4620      	mov	r0, r4
   14e8a:	4798      	blx	r3
   14e8c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14e90:	3301      	adds	r3, #1
   14e92:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14e96:	2101      	movs	r1, #1
   14e98:	2300      	movs	r3, #0
   14e9a:	e7e3      	b.n	14e64 <d_print_mod+0x2c0>
   14e9c:	4d3c      	ldr	r5, [pc, #240]	; (14f90 <d_print_mod+0x3ec>)
   14e9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14ea2:	f105 070a 	add.w	r7, r5, #10
   14ea6:	f04f 0800 	mov.w	r8, #0
   14eaa:	e008      	b.n	14ebe <d_print_mod+0x31a>
   14eac:	460b      	mov	r3, r1
   14eae:	3101      	adds	r1, #1
   14eb0:	42bd      	cmp	r5, r7
   14eb2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14eb6:	54e6      	strb	r6, [r4, r3]
   14eb8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14ebc:	d06c      	beq.n	14f98 <d_print_mod+0x3f4>
   14ebe:	29ff      	cmp	r1, #255	; 0xff
   14ec0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14ec4:	d1f2      	bne.n	14eac <d_print_mod+0x308>
   14ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14eca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14ece:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14ed2:	4620      	mov	r0, r4
   14ed4:	4798      	blx	r3
   14ed6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14eda:	3301      	adds	r3, #1
   14edc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14ee0:	2101      	movs	r1, #1
   14ee2:	2300      	movs	r3, #0
   14ee4:	e7e4      	b.n	14eb0 <d_print_mod+0x30c>
   14ee6:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   14eea:	2b28      	cmp	r3, #40	; 0x28
   14eec:	d00b      	beq.n	14f06 <d_print_mod+0x362>
   14eee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   14ef2:	29ff      	cmp	r1, #255	; 0xff
   14ef4:	f000 80da 	beq.w	150ac <d_print_mod+0x508>
   14ef8:	1c4a      	adds	r2, r1, #1
   14efa:	2320      	movs	r3, #32
   14efc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   14f00:	5463      	strb	r3, [r4, r1]
   14f02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   14f06:	686a      	ldr	r2, [r5, #4]
   14f08:	2a00      	cmp	r2, #0
   14f0a:	f000 80c7 	beq.w	1509c <d_print_mod+0x4f8>
   14f0e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   14f12:	2b00      	cmp	r3, #0
   14f14:	d062      	beq.n	14fdc <d_print_mod+0x438>
   14f16:	4d1f      	ldr	r5, [pc, #124]	; (14f94 <d_print_mod+0x3f0>)
   14f18:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   14f1c:	1cef      	adds	r7, r5, #3
   14f1e:	f04f 0800 	mov.w	r8, #0
   14f22:	e008      	b.n	14f36 <d_print_mod+0x392>
   14f24:	460b      	mov	r3, r1
   14f26:	3101      	adds	r1, #1
   14f28:	42bd      	cmp	r5, r7
   14f2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14f2e:	54e6      	strb	r6, [r4, r3]
   14f30:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   14f34:	d049      	beq.n	14fca <d_print_mod+0x426>
   14f36:	29ff      	cmp	r1, #255	; 0xff
   14f38:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   14f3c:	d1f2      	bne.n	14f24 <d_print_mod+0x380>
   14f3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14f42:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   14f46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14f4a:	4620      	mov	r0, r4
   14f4c:	4798      	blx	r3
   14f4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14f52:	3301      	adds	r3, #1
   14f54:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   14f58:	2101      	movs	r1, #1
   14f5a:	2300      	movs	r3, #0
   14f5c:	e7e4      	b.n	14f28 <d_print_mod+0x384>
   14f5e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   14f62:	2b00      	cmp	r3, #0
   14f64:	f47f ae85 	bne.w	14c72 <d_print_mod+0xce>
   14f68:	462a      	mov	r2, r5
   14f6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f6e:	f7fd bb77 	b.w	12660 <d_print_comp.part.10>
   14f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f76:	bf00      	nop
   14f78:	0001a84f 	.word	0x0001a84f
   14f7c:	0001a80f 	.word	0x0001a80f
   14f80:	0001a81b 	.word	0x0001a81b
   14f84:	0001a827 	.word	0x0001a827
   14f88:	0001a82f 	.word	0x0001a82f
   14f8c:	0001a833 	.word	0x0001a833
   14f90:	0001a83f 	.word	0x0001a83f
   14f94:	0001a84b 	.word	0x0001a84b
   14f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fa8:	686a      	ldr	r2, [r5, #4]
   14faa:	2a00      	cmp	r2, #0
   14fac:	d07a      	beq.n	150a4 <d_print_mod+0x500>
   14fae:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   14fb2:	b161      	cbz	r1, 14fce <d_print_mod+0x42a>
   14fb4:	2bff      	cmp	r3, #255	; 0xff
   14fb6:	d05f      	beq.n	15078 <d_print_mod+0x4d4>
   14fb8:	1c59      	adds	r1, r3, #1
   14fba:	2229      	movs	r2, #41	; 0x29
   14fbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   14fc0:	54e2      	strb	r2, [r4, r3]
   14fc2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   14fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fce:	4649      	mov	r1, r9
   14fd0:	4620      	mov	r0, r4
   14fd2:	f7fd fb45 	bl	12660 <d_print_comp.part.10>
   14fd6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14fda:	e7eb      	b.n	14fb4 <d_print_mod+0x410>
   14fdc:	4649      	mov	r1, r9
   14fde:	4620      	mov	r0, r4
   14fe0:	f7fd fb3e 	bl	12660 <d_print_comp.part.10>
   14fe4:	e797      	b.n	14f16 <d_print_mod+0x372>
   14fe6:	4620      	mov	r0, r4
   14fe8:	4649      	mov	r1, r9
   14fea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14fee:	f7fd bb37 	b.w	12660 <d_print_comp.part.10>
   14ff2:	2500      	movs	r5, #0
   14ff4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14ff8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14ffc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   15000:	4620      	mov	r0, r4
   15002:	4798      	blx	r3
   15004:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15008:	3301      	adds	r3, #1
   1500a:	4629      	mov	r1, r5
   1500c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   15010:	2201      	movs	r2, #1
   15012:	e6b1      	b.n	14d78 <d_print_mod+0x1d4>
   15014:	2500      	movs	r5, #0
   15016:	4619      	mov	r1, r3
   15018:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1501c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   15020:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   15024:	4798      	blx	r3
   15026:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1502a:	1c5a      	adds	r2, r3, #1
   1502c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   15030:	462b      	mov	r3, r5
   15032:	2101      	movs	r1, #1
   15034:	e696      	b.n	14d64 <d_print_mod+0x1c0>
   15036:	2600      	movs	r6, #0
   15038:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1503c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   15040:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   15044:	4798      	blx	r3
   15046:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1504a:	3301      	adds	r3, #1
   1504c:	4631      	mov	r1, r6
   1504e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   15052:	2201      	movs	r2, #1
   15054:	e6d5      	b.n	14e02 <d_print_mod+0x25e>
   15056:	2500      	movs	r5, #0
   15058:	4619      	mov	r1, r3
   1505a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1505e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   15062:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   15066:	4798      	blx	r3
   15068:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1506c:	1c5a      	adds	r2, r3, #1
   1506e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   15072:	462b      	mov	r3, r5
   15074:	2101      	movs	r1, #1
   15076:	e68d      	b.n	14d94 <d_print_mod+0x1f0>
   15078:	2500      	movs	r5, #0
   1507a:	4619      	mov	r1, r3
   1507c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15084:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   15088:	4620      	mov	r0, r4
   1508a:	4798      	blx	r3
   1508c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15090:	1c5a      	adds	r2, r3, #1
   15092:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   15096:	462b      	mov	r3, r5
   15098:	2101      	movs	r1, #1
   1509a:	e78e      	b.n	14fba <d_print_mod+0x416>
   1509c:	2301      	movs	r3, #1
   1509e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   150a2:	e738      	b.n	14f16 <d_print_mod+0x372>
   150a4:	2201      	movs	r2, #1
   150a6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   150aa:	e783      	b.n	14fb4 <d_print_mod+0x410>
   150ac:	2600      	movs	r6, #0
   150ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   150b2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   150b6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   150ba:	4798      	blx	r3
   150bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   150c0:	3301      	adds	r3, #1
   150c2:	4631      	mov	r1, r6
   150c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   150c8:	2201      	movs	r2, #1
   150ca:	e716      	b.n	14efa <d_print_mod+0x356>
   150cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   150d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   150d4:	f880 90ff 	strb.w	r9, [r0, #255]	; 0xff
   150d8:	4798      	blx	r3
   150da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   150de:	3301      	adds	r3, #1
   150e0:	4649      	mov	r1, r9
   150e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   150e6:	2201      	movs	r2, #1
   150e8:	e6a4      	b.n	14e34 <d_print_mod+0x290>
$t():
   150ea:	bf00      	nop

000150ec <d_print_mod_list>:
d_print_mod_list():
   150ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f0:	4614      	mov	r4, r2
   150f2:	b089      	sub	sp, #36	; 0x24
   150f4:	4605      	mov	r5, r0
   150f6:	460f      	mov	r7, r1
   150f8:	461e      	mov	r6, r3
   150fa:	b33a      	cbz	r2, 1514c <d_print_mod_list+0x60>
   150fc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   15100:	bb23      	cbnz	r3, 1514c <d_print_mod_list+0x60>
   15102:	f04f 0801 	mov.w	r8, #1
   15106:	e002      	b.n	1510e <d_print_mod_list+0x22>
   15108:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1510c:	b9f2      	cbnz	r2, 1514c <d_print_mod_list+0x60>
   1510e:	68a2      	ldr	r2, [r4, #8]
   15110:	b9ca      	cbnz	r2, 15146 <d_print_mod_list+0x5a>
   15112:	6862      	ldr	r2, [r4, #4]
   15114:	7810      	ldrb	r0, [r2, #0]
   15116:	b91e      	cbnz	r6, 15120 <d_print_mod_list+0x34>
   15118:	f1a0 031c 	sub.w	r3, r0, #28
   1511c:	2b04      	cmp	r3, #4
   1511e:	d912      	bls.n	15146 <d_print_mod_list+0x5a>
   15120:	68e3      	ldr	r3, [r4, #12]
   15122:	f8c4 8008 	str.w	r8, [r4, #8]
   15126:	2829      	cmp	r0, #41	; 0x29
   15128:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
   1512c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   15130:	d00f      	beq.n	15152 <d_print_mod_list+0x66>
   15132:	282a      	cmp	r0, #42	; 0x2a
   15134:	d018      	beq.n	15168 <d_print_mod_list+0x7c>
   15136:	2802      	cmp	r0, #2
   15138:	d021      	beq.n	1517e <d_print_mod_list+0x92>
   1513a:	4628      	mov	r0, r5
   1513c:	4639      	mov	r1, r7
   1513e:	f7ff fd31 	bl	14ba4 <d_print_mod>
   15142:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   15146:	6824      	ldr	r4, [r4, #0]
   15148:	2c00      	cmp	r4, #0
   1514a:	d1dd      	bne.n	15108 <d_print_mod_list+0x1c>
   1514c:	b009      	add	sp, #36	; 0x24
   1514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15152:	4639      	mov	r1, r7
   15154:	3208      	adds	r2, #8
   15156:	6823      	ldr	r3, [r4, #0]
   15158:	4628      	mov	r0, r5
   1515a:	f000 f9c9 	bl	154f0 <d_print_function_type.isra.11>
   1515e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   15162:	b009      	add	sp, #36	; 0x24
   15164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	4639      	mov	r1, r7
   1516a:	3204      	adds	r2, #4
   1516c:	6823      	ldr	r3, [r4, #0]
   1516e:	4628      	mov	r0, r5
   15170:	f000 f8ee 	bl	15350 <d_print_array_type.isra.9>
   15174:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   15178:	b009      	add	sp, #36	; 0x24
   1517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1517e:	2600      	movs	r6, #0
   15180:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
   15184:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
   15188:	6852      	ldr	r2, [r2, #4]
   1518a:	4628      	mov	r0, r5
   1518c:	4639      	mov	r1, r7
   1518e:	f7ff fcfd 	bl	14b8c <d_print_comp>
   15192:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
   15196:	f017 0804 	ands.w	r8, r7, #4
   1519a:	d123      	bne.n	151e4 <d_print_mod_list+0xf8>
   1519c:	4e68      	ldr	r6, [pc, #416]	; (15340 <d_print_mod_list+0x254>)
   1519e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   151a2:	f106 0b02 	add.w	fp, r6, #2
   151a6:	e009      	b.n	151bc <d_print_mod_list+0xd0>
   151a8:	460b      	mov	r3, r1
   151aa:	3101      	adds	r1, #1
   151ac:	455e      	cmp	r6, fp
   151ae:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   151b2:	f805 a003 	strb.w	sl, [r5, r3]
   151b6:	f885 a104 	strb.w	sl, [r5, #260]	; 0x104
   151ba:	d01e      	beq.n	151fa <d_print_mod_list+0x10e>
   151bc:	29ff      	cmp	r1, #255	; 0xff
   151be:	f816 af01 	ldrb.w	sl, [r6, #1]!
   151c2:	d1f1      	bne.n	151a8 <d_print_mod_list+0xbc>
   151c4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   151c8:	f885 80ff 	strb.w	r8, [r5, #255]	; 0xff
   151cc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   151d0:	4628      	mov	r0, r5
   151d2:	4798      	blx	r3
   151d4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   151d8:	3301      	adds	r3, #1
   151da:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   151de:	2101      	movs	r1, #1
   151e0:	2300      	movs	r3, #0
   151e2:	e7e3      	b.n	151ac <d_print_mod_list+0xc0>
   151e4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   151e8:	29ff      	cmp	r1, #255	; 0xff
   151ea:	d01b      	beq.n	15224 <d_print_mod_list+0x138>
   151ec:	1c4a      	adds	r2, r1, #1
   151ee:	232e      	movs	r3, #46	; 0x2e
   151f0:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
   151f4:	546b      	strb	r3, [r5, r1]
   151f6:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
   151fa:	6863      	ldr	r3, [r4, #4]
   151fc:	689c      	ldr	r4, [r3, #8]
   151fe:	7823      	ldrb	r3, [r4, #0]
   15200:	2b45      	cmp	r3, #69	; 0x45
   15202:	d102      	bne.n	1520a <d_print_mod_list+0x11e>
   15204:	e01e      	b.n	15244 <d_print_mod_list+0x158>
   15206:	6864      	ldr	r4, [r4, #4]
   15208:	7823      	ldrb	r3, [r4, #0]
   1520a:	3b1c      	subs	r3, #28
   1520c:	2b04      	cmp	r3, #4
   1520e:	d9fa      	bls.n	15206 <d_print_mod_list+0x11a>
   15210:	4639      	mov	r1, r7
   15212:	4622      	mov	r2, r4
   15214:	4628      	mov	r0, r5
   15216:	f7ff fcb9 	bl	14b8c <d_print_comp>
   1521a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
   1521e:	b009      	add	sp, #36	; 0x24
   15220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15224:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   15228:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1522c:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
   15230:	4628      	mov	r0, r5
   15232:	4798      	blx	r3
   15234:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15238:	3301      	adds	r3, #1
   1523a:	4631      	mov	r1, r6
   1523c:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   15240:	2201      	movs	r2, #1
   15242:	e7d4      	b.n	151ee <d_print_mod_list+0x102>
   15244:	4e3f      	ldr	r6, [pc, #252]	; (15344 <d_print_mod_list+0x258>)
   15246:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1524a:	f106 0a0d 	add.w	sl, r6, #13
   1524e:	f04f 0b00 	mov.w	fp, #0
   15252:	e009      	b.n	15268 <d_print_mod_list+0x17c>
   15254:	460b      	mov	r3, r1
   15256:	3101      	adds	r1, #1
   15258:	4556      	cmp	r6, sl
   1525a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1525e:	f805 8003 	strb.w	r8, [r5, r3]
   15262:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   15266:	d013      	beq.n	15290 <d_print_mod_list+0x1a4>
   15268:	29ff      	cmp	r1, #255	; 0xff
   1526a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
   1526e:	d1f1      	bne.n	15254 <d_print_mod_list+0x168>
   15270:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   15274:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   15278:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1527c:	4628      	mov	r0, r5
   1527e:	4798      	blx	r3
   15280:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15284:	3301      	adds	r3, #1
   15286:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1528a:	2101      	movs	r1, #1
   1528c:	2300      	movs	r3, #0
   1528e:	e7e3      	b.n	15258 <d_print_mod_list+0x16c>
   15290:	68a2      	ldr	r2, [r4, #8]
   15292:	492d      	ldr	r1, [pc, #180]	; (15348 <d_print_mod_list+0x25c>)
   15294:	3201      	adds	r2, #1
   15296:	a801      	add	r0, sp, #4
   15298:	f003 fcae 	bl	18bf8 <siprintf>
   1529c:	a801      	add	r0, sp, #4
   1529e:	f003 fccf 	bl	18c40 <strlen>
   152a2:	b330      	cbz	r0, 152f2 <d_print_mod_list+0x206>
   152a4:	f10d 0603 	add.w	r6, sp, #3
   152a8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   152ac:	eb06 0a00 	add.w	sl, r6, r0
   152b0:	f04f 0b00 	mov.w	fp, #0
   152b4:	e009      	b.n	152ca <d_print_mod_list+0x1de>
   152b6:	460b      	mov	r3, r1
   152b8:	3101      	adds	r1, #1
   152ba:	4556      	cmp	r6, sl
   152bc:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   152c0:	f805 8003 	strb.w	r8, [r5, r3]
   152c4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   152c8:	d015      	beq.n	152f6 <d_print_mod_list+0x20a>
   152ca:	29ff      	cmp	r1, #255	; 0xff
   152cc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
   152d0:	d1f1      	bne.n	152b6 <d_print_mod_list+0x1ca>
   152d2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   152d6:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   152da:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   152de:	4628      	mov	r0, r5
   152e0:	4798      	blx	r3
   152e2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   152e6:	3301      	adds	r3, #1
   152e8:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   152ec:	2101      	movs	r1, #1
   152ee:	2300      	movs	r3, #0
   152f0:	e7e3      	b.n	152ba <d_print_mod_list+0x1ce>
   152f2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   152f6:	4e15      	ldr	r6, [pc, #84]	; (1534c <d_print_mod_list+0x260>)
   152f8:	f04f 0b00 	mov.w	fp, #0
   152fc:	f106 0a03 	add.w	sl, r6, #3
   15300:	e00a      	b.n	15318 <d_print_mod_list+0x22c>
   15302:	460b      	mov	r3, r1
   15304:	3101      	adds	r1, #1
   15306:	4556      	cmp	r6, sl
   15308:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1530c:	f805 8003 	strb.w	r8, [r5, r3]
   15310:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
   15314:	f43f af77 	beq.w	15206 <d_print_mod_list+0x11a>
   15318:	29ff      	cmp	r1, #255	; 0xff
   1531a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
   1531e:	d1f0      	bne.n	15302 <d_print_mod_list+0x216>
   15320:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   15324:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
   15328:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1532c:	4628      	mov	r0, r5
   1532e:	4798      	blx	r3
   15330:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15334:	3301      	adds	r3, #1
   15336:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1533a:	2101      	movs	r1, #1
   1533c:	2300      	movs	r3, #0
   1533e:	e7e2      	b.n	15306 <d_print_mod_list+0x21a>
   15340:	0001a597 	.word	0x0001a597
   15344:	0001a59b 	.word	0x0001a59b
   15348:	0001a5ac 	.word	0x0001a5ac
   1534c:	0001a5af 	.word	0x0001a5af

00015350 <d_print_array_type.isra.9>:
d_print_array_type.isra.9():
   15350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15354:	4699      	mov	r9, r3
   15356:	4605      	mov	r5, r0
   15358:	460f      	mov	r7, r1
   1535a:	4690      	mov	r8, r2
   1535c:	b14b      	cbz	r3, 15372 <d_print_array_type.isra.9+0x22>
   1535e:	6898      	ldr	r0, [r3, #8]
   15360:	b380      	cbz	r0, 153c4 <d_print_array_type.isra.9+0x74>
   15362:	681b      	ldr	r3, [r3, #0]
   15364:	2b00      	cmp	r3, #0
   15366:	d1fa      	bne.n	1535e <d_print_array_type.isra.9+0xe>
   15368:	464a      	mov	r2, r9
   1536a:	4628      	mov	r0, r5
   1536c:	4639      	mov	r1, r7
   1536e:	f7ff febd 	bl	150ec <d_print_mod_list>
   15372:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   15376:	2bff      	cmp	r3, #255	; 0xff
   15378:	d069      	beq.n	1544e <d_print_array_type.isra.9+0xfe>
   1537a:	1c59      	adds	r1, r3, #1
   1537c:	2220      	movs	r2, #32
   1537e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   15382:	54ea      	strb	r2, [r5, r3]
   15384:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
   15388:	29ff      	cmp	r1, #255	; 0xff
   1538a:	f000 8095 	beq.w	154b8 <d_print_array_type.isra.9+0x168>
   1538e:	1c4b      	adds	r3, r1, #1
   15390:	225b      	movs	r2, #91	; 0x5b
   15392:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   15396:	546a      	strb	r2, [r5, r1]
   15398:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
   1539c:	f8d8 2000 	ldr.w	r2, [r8]
   153a0:	b12a      	cbz	r2, 153ae <d_print_array_type.isra.9+0x5e>
   153a2:	4639      	mov	r1, r7
   153a4:	4628      	mov	r0, r5
   153a6:	f7ff fbf1 	bl	14b8c <d_print_comp>
   153aa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   153ae:	2bff      	cmp	r3, #255	; 0xff
   153b0:	d070      	beq.n	15494 <d_print_array_type.isra.9+0x144>
   153b2:	1c59      	adds	r1, r3, #1
   153b4:	225d      	movs	r2, #93	; 0x5d
   153b6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   153ba:	54ea      	strb	r2, [r5, r3]
   153bc:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
   153c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153c4:	685b      	ldr	r3, [r3, #4]
   153c6:	781b      	ldrb	r3, [r3, #0]
   153c8:	2b2a      	cmp	r3, #42	; 0x2a
   153ca:	f000 8086 	beq.w	154da <d_print_array_type.isra.9+0x18a>
   153ce:	4e47      	ldr	r6, [pc, #284]	; (154ec <d_print_array_type.isra.9+0x19c>)
   153d0:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   153d4:	f106 0a02 	add.w	sl, r6, #2
   153d8:	e00a      	b.n	153f0 <d_print_array_type.isra.9+0xa0>
   153da:	460a      	mov	r2, r1
   153dc:	4556      	cmp	r6, sl
   153de:	f101 0101 	add.w	r1, r1, #1
   153e2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   153e6:	f805 b002 	strb.w	fp, [r5, r2]
   153ea:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
   153ee:	d01c      	beq.n	1542a <d_print_array_type.isra.9+0xda>
   153f0:	29ff      	cmp	r1, #255	; 0xff
   153f2:	f816 bf01 	ldrb.w	fp, [r6, #1]!
   153f6:	d1f0      	bne.n	153da <d_print_array_type.isra.9+0x8a>
   153f8:	f04f 0300 	mov.w	r3, #0
   153fc:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   15400:	f885 30ff 	strb.w	r3, [r5, #255]	; 0xff
   15404:	f8d5 4108 	ldr.w	r4, [r5, #264]	; 0x108
   15408:	4628      	mov	r0, r5
   1540a:	47a0      	blx	r4
   1540c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   15410:	3201      	adds	r2, #1
   15412:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   15416:	2200      	movs	r2, #0
   15418:	2101      	movs	r1, #1
   1541a:	4556      	cmp	r6, sl
   1541c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   15420:	f805 b002 	strb.w	fp, [r5, r2]
   15424:	f885 b104 	strb.w	fp, [r5, #260]	; 0x104
   15428:	d1e2      	bne.n	153f0 <d_print_array_type.isra.9+0xa0>
   1542a:	4639      	mov	r1, r7
   1542c:	464a      	mov	r2, r9
   1542e:	4628      	mov	r0, r5
   15430:	2300      	movs	r3, #0
   15432:	f7ff fe5b 	bl	150ec <d_print_mod_list>
   15436:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1543a:	29ff      	cmp	r1, #255	; 0xff
   1543c:	d019      	beq.n	15472 <d_print_array_type.isra.9+0x122>
   1543e:	1c4b      	adds	r3, r1, #1
   15440:	2229      	movs	r2, #41	; 0x29
   15442:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   15446:	546a      	strb	r2, [r5, r1]
   15448:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
   1544c:	e793      	b.n	15376 <d_print_array_type.isra.9+0x26>
   1544e:	2400      	movs	r4, #0
   15450:	4619      	mov	r1, r3
   15452:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   15456:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1545a:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
   1545e:	4628      	mov	r0, r5
   15460:	4798      	blx	r3
   15462:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15466:	1c5a      	adds	r2, r3, #1
   15468:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1546c:	4623      	mov	r3, r4
   1546e:	2101      	movs	r1, #1
   15470:	e784      	b.n	1537c <d_print_array_type.isra.9+0x2c>
   15472:	2400      	movs	r4, #0
   15474:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   15478:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
   1547c:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   15480:	4628      	mov	r0, r5
   15482:	4798      	blx	r3
   15484:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   15488:	3301      	adds	r3, #1
   1548a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1548e:	4621      	mov	r1, r4
   15490:	2301      	movs	r3, #1
   15492:	e7d5      	b.n	15440 <d_print_array_type.isra.9+0xf0>
   15494:	2400      	movs	r4, #0
   15496:	4619      	mov	r1, r3
   15498:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1549c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   154a0:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
   154a4:	4628      	mov	r0, r5
   154a6:	4798      	blx	r3
   154a8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   154ac:	1c5a      	adds	r2, r3, #1
   154ae:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   154b2:	4623      	mov	r3, r4
   154b4:	2101      	movs	r1, #1
   154b6:	e77d      	b.n	153b4 <d_print_array_type.isra.9+0x64>
   154b8:	2400      	movs	r4, #0
   154ba:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   154be:	f885 40ff 	strb.w	r4, [r5, #255]	; 0xff
   154c2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   154c6:	4628      	mov	r0, r5
   154c8:	4798      	blx	r3
   154ca:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   154ce:	3301      	adds	r3, #1
   154d0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   154d4:	4621      	mov	r1, r4
   154d6:	2301      	movs	r3, #1
   154d8:	e75a      	b.n	15390 <d_print_array_type.isra.9+0x40>
   154da:	4603      	mov	r3, r0
   154dc:	4639      	mov	r1, r7
   154de:	464a      	mov	r2, r9
   154e0:	4628      	mov	r0, r5
   154e2:	f7ff fe03 	bl	150ec <d_print_mod_list>
   154e6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   154ea:	e74d      	b.n	15388 <d_print_array_type.isra.9+0x38>
   154ec:	0001a787 	.word	0x0001a787

000154f0 <d_print_function_type.isra.11>:
d_print_function_type.isra.11():
   154f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   154f4:	469a      	mov	sl, r3
   154f6:	4607      	mov	r7, r0
   154f8:	4688      	mov	r8, r1
   154fa:	4691      	mov	r9, r2
   154fc:	2b00      	cmp	r3, #0
   154fe:	d03b      	beq.n	15578 <d_print_function_type.isra.11+0x88>
   15500:	689b      	ldr	r3, [r3, #8]
   15502:	2b00      	cmp	r3, #0
   15504:	d138      	bne.n	15578 <d_print_function_type.isra.11+0x88>
   15506:	4654      	mov	r4, sl
   15508:	2201      	movs	r2, #1
   1550a:	e006      	b.n	1551a <d_print_function_type.isra.11+0x2a>
   1550c:	f416 6f60 	tst.w	r6, #3584	; 0xe00
   15510:	d17a      	bne.n	15608 <d_print_function_type.isra.11+0x118>
   15512:	6824      	ldr	r4, [r4, #0]
   15514:	b384      	cbz	r4, 15578 <d_print_function_type.isra.11+0x88>
   15516:	68a3      	ldr	r3, [r4, #8]
   15518:	bb73      	cbnz	r3, 15578 <d_print_function_type.isra.11+0x88>
   1551a:	6860      	ldr	r0, [r4, #4]
   1551c:	4d69      	ldr	r5, [pc, #420]	; (156c4 <d_print_function_type.isra.11+0x1d4>)
   1551e:	7806      	ldrb	r6, [r0, #0]
   15520:	3e19      	subs	r6, #25
   15522:	b2f6      	uxtb	r6, r6
   15524:	2e12      	cmp	r6, #18
   15526:	d8f4      	bhi.n	15512 <d_print_function_type.isra.11+0x22>
   15528:	fa02 f606 	lsl.w	r6, r2, r6
   1552c:	4035      	ands	r5, r6
   1552e:	2d00      	cmp	r5, #0
   15530:	d0ec      	beq.n	1550c <d_print_function_type.isra.11+0x1c>
   15532:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
   15536:	2b20      	cmp	r3, #32
   15538:	d06c      	beq.n	15614 <d_print_function_type.isra.11+0x124>
   1553a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   1553e:	2bff      	cmp	r3, #255	; 0xff
   15540:	f000 80ad 	beq.w	1569e <d_print_function_type.isra.11+0x1ae>
   15544:	1c59      	adds	r1, r3, #1
   15546:	2220      	movs	r2, #32
   15548:	29ff      	cmp	r1, #255	; 0xff
   1554a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
   1554e:	54fa      	strb	r2, [r7, r3]
   15550:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
   15554:	d162      	bne.n	1561c <d_print_function_type.isra.11+0x12c>
   15556:	2400      	movs	r4, #0
   15558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   1555c:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
   15560:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
   15564:	4638      	mov	r0, r7
   15566:	4798      	blx	r3
   15568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   1556c:	3301      	adds	r3, #1
   1556e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   15572:	4621      	mov	r1, r4
   15574:	2301      	movs	r3, #1
   15576:	e052      	b.n	1561e <d_print_function_type.isra.11+0x12e>
   15578:	2300      	movs	r3, #0
   1557a:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
   1557e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   15582:	4641      	mov	r1, r8
   15584:	4638      	mov	r0, r7
   15586:	4652      	mov	r2, sl
   15588:	f7ff fdb0 	bl	150ec <d_print_mod_list>
   1558c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
   15590:	29ff      	cmp	r1, #255	; 0xff
   15592:	d062      	beq.n	1565a <d_print_function_type.isra.11+0x16a>
   15594:	1c4b      	adds	r3, r1, #1
   15596:	2228      	movs	r2, #40	; 0x28
   15598:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   1559c:	547a      	strb	r2, [r7, r1]
   1559e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
   155a2:	f8d9 2000 	ldr.w	r2, [r9]
   155a6:	b112      	cbz	r2, 155ae <d_print_function_type.isra.11+0xbe>
   155a8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
   155ac:	b191      	cbz	r1, 155d4 <d_print_function_type.isra.11+0xe4>
   155ae:	2bff      	cmp	r3, #255	; 0xff
   155b0:	d018      	beq.n	155e4 <d_print_function_type.isra.11+0xf4>
   155b2:	1c5a      	adds	r2, r3, #1
   155b4:	2429      	movs	r4, #41	; 0x29
   155b6:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
   155ba:	4641      	mov	r1, r8
   155bc:	54fc      	strb	r4, [r7, r3]
   155be:	4652      	mov	r2, sl
   155c0:	4638      	mov	r0, r7
   155c2:	f887 4104 	strb.w	r4, [r7, #260]	; 0x104
   155c6:	2301      	movs	r3, #1
   155c8:	f7ff fd90 	bl	150ec <d_print_mod_list>
   155cc:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
   155d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   155d4:	4638      	mov	r0, r7
   155d6:	4641      	mov	r1, r8
   155d8:	f7fd f842 	bl	12660 <d_print_comp.part.10>
   155dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   155e0:	2bff      	cmp	r3, #255	; 0xff
   155e2:	d1e6      	bne.n	155b2 <d_print_function_type.isra.11+0xc2>
   155e4:	2400      	movs	r4, #0
   155e6:	4619      	mov	r1, r3
   155e8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
   155ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   155f0:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
   155f4:	4638      	mov	r0, r7
   155f6:	4798      	blx	r3
   155f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   155fc:	1c5a      	adds	r2, r3, #1
   155fe:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
   15602:	4623      	mov	r3, r4
   15604:	2201      	movs	r2, #1
   15606:	e7d5      	b.n	155b4 <d_print_function_type.isra.11+0xc4>
   15608:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
   1560c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   15610:	2a28      	cmp	r2, #40	; 0x28
   15612:	d190      	bne.n	15536 <d_print_function_type.isra.11+0x46>
   15614:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
   15618:	29ff      	cmp	r1, #255	; 0xff
   1561a:	d09c      	beq.n	15556 <d_print_function_type.isra.11+0x66>
   1561c:	1c4b      	adds	r3, r1, #1
   1561e:	2228      	movs	r2, #40	; 0x28
   15620:	2400      	movs	r4, #0
   15622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   15626:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
   1562a:	547a      	strb	r2, [r7, r1]
   1562c:	4623      	mov	r3, r4
   1562e:	f887 2104 	strb.w	r2, [r7, #260]	; 0x104
   15632:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
   15636:	4652      	mov	r2, sl
   15638:	4638      	mov	r0, r7
   1563a:	4641      	mov	r1, r8
   1563c:	f7ff fd56 	bl	150ec <d_print_mod_list>
   15640:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
   15644:	2aff      	cmp	r2, #255	; 0xff
   15646:	d019      	beq.n	1567c <d_print_function_type.isra.11+0x18c>
   15648:	1c51      	adds	r1, r2, #1
   1564a:	2329      	movs	r3, #41	; 0x29
   1564c:	29ff      	cmp	r1, #255	; 0xff
   1564e:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
   15652:	54bb      	strb	r3, [r7, r2]
   15654:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
   15658:	d19c      	bne.n	15594 <d_print_function_type.isra.11+0xa4>
   1565a:	2400      	movs	r4, #0
   1565c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   15660:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
   15664:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
   15668:	4638      	mov	r0, r7
   1566a:	4798      	blx	r3
   1566c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   15670:	3301      	adds	r3, #1
   15672:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   15676:	4621      	mov	r1, r4
   15678:	2301      	movs	r3, #1
   1567a:	e78c      	b.n	15596 <d_print_function_type.isra.11+0xa6>
   1567c:	4611      	mov	r1, r2
   1567e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   15682:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
   15686:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
   1568a:	4638      	mov	r0, r7
   1568c:	4798      	blx	r3
   1568e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   15692:	3301      	adds	r3, #1
   15694:	4622      	mov	r2, r4
   15696:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   1569a:	2101      	movs	r1, #1
   1569c:	e7d5      	b.n	1564a <d_print_function_type.isra.11+0x15a>
   1569e:	2400      	movs	r4, #0
   156a0:	4619      	mov	r1, r3
   156a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
   156a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   156aa:	f887 40ff 	strb.w	r4, [r7, #255]	; 0xff
   156ae:	4638      	mov	r0, r7
   156b0:	4798      	blx	r3
   156b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
   156b6:	1c5a      	adds	r2, r3, #1
   156b8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
   156bc:	4623      	mov	r3, r4
   156be:	2101      	movs	r1, #1
   156c0:	e741      	b.n	15546 <d_print_function_type.isra.11+0x56>
   156c2:	bf00      	nop
   156c4:	00043107 	.word	0x00043107

000156c8 <d_print_cast.isra.12>:
d_print_cast.isra.12():
   156c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156cc:	4615      	mov	r5, r2
   156ce:	6812      	ldr	r2, [r2, #0]
   156d0:	7813      	ldrb	r3, [r2, #0]
   156d2:	2b04      	cmp	r3, #4
   156d4:	b082      	sub	sp, #8
   156d6:	4604      	mov	r4, r0
   156d8:	460e      	mov	r6, r1
   156da:	d006      	beq.n	156ea <d_print_cast.isra.12+0x22>
   156dc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   156e0:	2b00      	cmp	r3, #0
   156e2:	d03d      	beq.n	15760 <d_print_cast.isra.12+0x98>
   156e4:	b002      	add	sp, #8
   156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156ea:	ab02      	add	r3, sp, #8
   156ec:	f8d0 7110 	ldr.w	r7, [r0, #272]	; 0x110
   156f0:	f843 7d08 	str.w	r7, [r3, #-8]!
   156f4:	2200      	movs	r2, #0
   156f6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   156fa:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   156fe:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   15702:	682b      	ldr	r3, [r5, #0]
   15704:	9301      	str	r3, [sp, #4]
   15706:	685a      	ldr	r2, [r3, #4]
   15708:	2a00      	cmp	r2, #0
   1570a:	d06f      	beq.n	157ec <d_print_cast.isra.12+0x124>
   1570c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   15710:	2b00      	cmp	r3, #0
   15712:	d03f      	beq.n	15794 <d_print_cast.isra.12+0xcc>
   15714:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   15718:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   1571c:	2b3c      	cmp	r3, #60	; 0x3c
   1571e:	d069      	beq.n	157f4 <d_print_cast.isra.12+0x12c>
   15720:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   15724:	2aff      	cmp	r2, #255	; 0xff
   15726:	d04b      	beq.n	157c0 <d_print_cast.isra.12+0xf8>
   15728:	1c53      	adds	r3, r2, #1
   1572a:	213c      	movs	r1, #60	; 0x3c
   1572c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   15730:	54a1      	strb	r1, [r4, r2]
   15732:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
   15736:	682a      	ldr	r2, [r5, #0]
   15738:	6892      	ldr	r2, [r2, #8]
   1573a:	2a00      	cmp	r2, #0
   1573c:	d052      	beq.n	157e4 <d_print_cast.isra.12+0x11c>
   1573e:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
   15742:	b195      	cbz	r5, 1576a <d_print_cast.isra.12+0xa2>
   15744:	2bff      	cmp	r3, #255	; 0xff
   15746:	d029      	beq.n	1579c <d_print_cast.isra.12+0xd4>
   15748:	1c59      	adds	r1, r3, #1
   1574a:	223e      	movs	r2, #62	; 0x3e
   1574c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15750:	54e2      	strb	r2, [r4, r3]
   15752:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   15756:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1575a:	b002      	add	sp, #8
   1575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15760:	f7fc ff7e 	bl	12660 <d_print_comp.part.10>
   15764:	b002      	add	sp, #8
   15766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1576a:	4631      	mov	r1, r6
   1576c:	4620      	mov	r0, r4
   1576e:	f7fc ff77 	bl	12660 <d_print_comp.part.10>
   15772:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   15776:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1577a:	2a3e      	cmp	r2, #62	; 0x3e
   1577c:	d1e2      	bne.n	15744 <d_print_cast.isra.12+0x7c>
   1577e:	2bff      	cmp	r3, #255	; 0xff
   15780:	d044      	beq.n	1580c <d_print_cast.isra.12+0x144>
   15782:	461d      	mov	r5, r3
   15784:	3301      	adds	r3, #1
   15786:	2220      	movs	r2, #32
   15788:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1578c:	5562      	strb	r2, [r4, r5]
   1578e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   15792:	e7d7      	b.n	15744 <d_print_cast.isra.12+0x7c>
   15794:	f7fc ff64 	bl	12660 <d_print_comp.part.10>
   15798:	9f00      	ldr	r7, [sp, #0]
   1579a:	e7bb      	b.n	15714 <d_print_cast.isra.12+0x4c>
   1579c:	2500      	movs	r5, #0
   1579e:	4619      	mov	r1, r3
   157a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   157a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   157a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   157ac:	4620      	mov	r0, r4
   157ae:	4798      	blx	r3
   157b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   157b4:	1c5a      	adds	r2, r3, #1
   157b6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   157ba:	462b      	mov	r3, r5
   157bc:	2101      	movs	r1, #1
   157be:	e7c4      	b.n	1574a <d_print_cast.isra.12+0x82>
   157c0:	2700      	movs	r7, #0
   157c2:	4611      	mov	r1, r2
   157c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   157c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   157cc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   157d0:	4620      	mov	r0, r4
   157d2:	4798      	blx	r3
   157d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   157d8:	3301      	adds	r3, #1
   157da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   157de:	463a      	mov	r2, r7
   157e0:	2301      	movs	r3, #1
   157e2:	e7a2      	b.n	1572a <d_print_cast.isra.12+0x62>
   157e4:	2201      	movs	r2, #1
   157e6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   157ea:	e7ab      	b.n	15744 <d_print_cast.isra.12+0x7c>
   157ec:	2301      	movs	r3, #1
   157ee:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   157f2:	e78f      	b.n	15714 <d_print_cast.isra.12+0x4c>
   157f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   157f8:	29ff      	cmp	r1, #255	; 0xff
   157fa:	d017      	beq.n	1582c <d_print_cast.isra.12+0x164>
   157fc:	1c4a      	adds	r2, r1, #1
   157fe:	2320      	movs	r3, #32
   15800:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   15804:	5463      	strb	r3, [r4, r1]
   15806:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1580a:	e78b      	b.n	15724 <d_print_cast.isra.12+0x5c>
   1580c:	4619      	mov	r1, r3
   1580e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   15812:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15816:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1581a:	4620      	mov	r0, r4
   1581c:	4798      	blx	r3
   1581e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15822:	3301      	adds	r3, #1
   15824:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   15828:	2301      	movs	r3, #1
   1582a:	e7ac      	b.n	15786 <d_print_cast.isra.12+0xbe>
   1582c:	2700      	movs	r7, #0
   1582e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15836:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1583a:	4620      	mov	r0, r4
   1583c:	4798      	blx	r3
   1583e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15842:	3301      	adds	r3, #1
   15844:	4639      	mov	r1, r7
   15846:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1584a:	2201      	movs	r2, #1
   1584c:	e7d7      	b.n	157fe <d_print_cast.isra.12+0x136>
   1584e:	bf00      	nop

00015850 <d_print_expr_op>:
d_print_expr_op():
   15850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15854:	7815      	ldrb	r5, [r2, #0]
   15856:	2d31      	cmp	r5, #49	; 0x31
   15858:	4604      	mov	r4, r0
   1585a:	d008      	beq.n	1586e <d_print_expr_op+0x1e>
   1585c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
   15860:	b10b      	cbz	r3, 15866 <d_print_expr_op+0x16>
   15862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15866:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1586a:	f7fc bef9 	b.w	12660 <d_print_comp.part.10>
   1586e:	6853      	ldr	r3, [r2, #4]
   15870:	689f      	ldr	r7, [r3, #8]
   15872:	f8d3 9004 	ldr.w	r9, [r3, #4]
   15876:	2f00      	cmp	r7, #0
   15878:	d0f3      	beq.n	15862 <d_print_expr_op+0x12>
   1587a:	2500      	movs	r5, #0
   1587c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   15880:	46a8      	mov	r8, r5
   15882:	e009      	b.n	15898 <d_print_expr_op+0x48>
   15884:	460b      	mov	r3, r1
   15886:	3101      	adds	r1, #1
   15888:	3501      	adds	r5, #1
   1588a:	42af      	cmp	r7, r5
   1588c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   15890:	54e6      	strb	r6, [r4, r3]
   15892:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   15896:	d013      	beq.n	158c0 <d_print_expr_op+0x70>
   15898:	29ff      	cmp	r1, #255	; 0xff
   1589a:	f819 6005 	ldrb.w	r6, [r9, r5]
   1589e:	d1f1      	bne.n	15884 <d_print_expr_op+0x34>
   158a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   158a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   158a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   158ac:	4620      	mov	r0, r4
   158ae:	4798      	blx	r3
   158b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   158b4:	3301      	adds	r3, #1
   158b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   158ba:	2101      	movs	r1, #1
   158bc:	2300      	movs	r3, #0
   158be:	e7e3      	b.n	15888 <d_print_expr_op+0x38>
   158c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000158c4 <d_print_subexpr>:
d_print_subexpr():
   158c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   158c6:	7813      	ldrb	r3, [r2, #0]
   158c8:	2b01      	cmp	r3, #1
   158ca:	4615      	mov	r5, r2
   158cc:	460f      	mov	r7, r1
   158ce:	4604      	mov	r4, r0
   158d0:	d914      	bls.n	158fc <d_print_subexpr+0x38>
   158d2:	2b30      	cmp	r3, #48	; 0x30
   158d4:	d012      	beq.n	158fc <d_print_subexpr+0x38>
   158d6:	2b06      	cmp	r3, #6
   158d8:	d010      	beq.n	158fc <d_print_subexpr+0x38>
   158da:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   158de:	2bff      	cmp	r3, #255	; 0xff
   158e0:	d034      	beq.n	1594c <d_print_subexpr+0x88>
   158e2:	1c59      	adds	r1, r3, #1
   158e4:	2228      	movs	r2, #40	; 0x28
   158e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   158ea:	54e2      	strb	r2, [r4, r3]
   158ec:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   158f0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   158f4:	2600      	movs	r6, #0
   158f6:	b133      	cbz	r3, 15906 <d_print_subexpr+0x42>
   158f8:	b166      	cbz	r6, 15914 <d_print_subexpr+0x50>
   158fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158fc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   15900:	2601      	movs	r6, #1
   15902:	2b00      	cmp	r3, #0
   15904:	d1f8      	bne.n	158f8 <d_print_subexpr+0x34>
   15906:	4639      	mov	r1, r7
   15908:	462a      	mov	r2, r5
   1590a:	4620      	mov	r0, r4
   1590c:	f7fc fea8 	bl	12660 <d_print_comp.part.10>
   15910:	2e00      	cmp	r6, #0
   15912:	d1f2      	bne.n	158fa <d_print_subexpr+0x36>
   15914:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   15918:	29ff      	cmp	r1, #255	; 0xff
   1591a:	d007      	beq.n	1592c <d_print_subexpr+0x68>
   1591c:	1c4a      	adds	r2, r1, #1
   1591e:	2329      	movs	r3, #41	; 0x29
   15920:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   15924:	5463      	strb	r3, [r4, r1]
   15926:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1592c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15934:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   15938:	4620      	mov	r0, r4
   1593a:	4798      	blx	r3
   1593c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15940:	3301      	adds	r3, #1
   15942:	4631      	mov	r1, r6
   15944:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   15948:	2201      	movs	r2, #1
   1594a:	e7e8      	b.n	1591e <d_print_subexpr+0x5a>
   1594c:	2600      	movs	r6, #0
   1594e:	4619      	mov	r1, r3
   15950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15954:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   15958:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1595c:	4798      	blx	r3
   1595e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   15962:	1c5a      	adds	r2, r3, #1
   15964:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   15968:	4633      	mov	r3, r6
   1596a:	2101      	movs	r1, #1
   1596c:	e7ba      	b.n	158e4 <d_print_subexpr+0x20>
   1596e:	bf00      	nop

00015970 <d_demangle_callback.constprop.16>:
d_demangle_callback.constprop.16():
   15970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15974:	b0d7      	sub	sp, #348	; 0x15c
   15976:	4604      	mov	r4, r0
   15978:	7805      	ldrb	r5, [r0, #0]
   1597a:	2d5f      	cmp	r5, #95	; 0x5f
   1597c:	af00      	add	r7, sp, #0
   1597e:	460e      	mov	r6, r1
   15980:	4690      	mov	r8, r2
   15982:	d072      	beq.n	15a6a <d_demangle_callback.constprop.16+0xfa>
   15984:	4620      	mov	r0, r4
   15986:	497c      	ldr	r1, [pc, #496]	; (15b78 <d_demangle_callback.constprop.16+0x208>)
   15988:	2208      	movs	r2, #8
   1598a:	f003 f961 	bl	18c50 <strncmp>
   1598e:	b978      	cbnz	r0, 159b0 <d_demangle_callback.constprop.16+0x40>
   15990:	7a23      	ldrb	r3, [r4, #8]
   15992:	2b2e      	cmp	r3, #46	; 0x2e
   15994:	d005      	beq.n	159a2 <d_demangle_callback.constprop.16+0x32>
   15996:	2b5f      	cmp	r3, #95	; 0x5f
   15998:	d003      	beq.n	159a2 <d_demangle_callback.constprop.16+0x32>
   1599a:	2b24      	cmp	r3, #36	; 0x24
   1599c:	d001      	beq.n	159a2 <d_demangle_callback.constprop.16+0x32>
   1599e:	4681      	mov	r9, r0
   159a0:	e008      	b.n	159b4 <d_demangle_callback.constprop.16+0x44>
   159a2:	7a63      	ldrb	r3, [r4, #9]
   159a4:	2b44      	cmp	r3, #68	; 0x44
   159a6:	f000 80df 	beq.w	15b68 <d_demangle_callback.constprop.16+0x1f8>
   159aa:	2b49      	cmp	r3, #73	; 0x49
   159ac:	f000 8098 	beq.w	15ae0 <d_demangle_callback.constprop.16+0x170>
   159b0:	f04f 0900 	mov.w	r9, #0
   159b4:	4620      	mov	r0, r4
   159b6:	f003 f943 	bl	18c40 <strlen>
   159ba:	0042      	lsls	r2, r0, #1
   159bc:	0083      	lsls	r3, r0, #2
   159be:	1899      	adds	r1, r3, r2
   159c0:	0089      	lsls	r1, r1, #2
   159c2:	3108      	adds	r1, #8
   159c4:	330a      	adds	r3, #10
   159c6:	ebad 0d01 	sub.w	sp, sp, r1
   159ca:	f023 0307 	bic.w	r3, r3, #7
   159ce:	46ea      	mov	sl, sp
   159d0:	eb04 0c00 	add.w	ip, r4, r0
   159d4:	ebad 0d03 	sub.w	sp, sp, r3
   159d8:	f04f 0b11 	mov.w	fp, #17
   159dc:	2300      	movs	r3, #0
   159de:	f1b9 0f01 	cmp.w	r9, #1
   159e2:	f8c7 a010 	str.w	sl, [r7, #16]
   159e6:	f8c7 d01c 	str.w	sp, [r7, #28]
   159ea:	61ba      	str	r2, [r7, #24]
   159ec:	603c      	str	r4, [r7, #0]
   159ee:	60fc      	str	r4, [r7, #12]
   159f0:	6278      	str	r0, [r7, #36]	; 0x24
   159f2:	f8c7 c004 	str.w	ip, [r7, #4]
   159f6:	f8c7 b008 	str.w	fp, [r7, #8]
   159fa:	617b      	str	r3, [r7, #20]
   159fc:	623b      	str	r3, [r7, #32]
   159fe:	62bb      	str	r3, [r7, #40]	; 0x28
   15a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   15a02:	633b      	str	r3, [r7, #48]	; 0x30
   15a04:	d037      	beq.n	15a76 <d_demangle_callback.constprop.16+0x106>
   15a06:	d373      	bcc.n	15af0 <d_demangle_callback.constprop.16+0x180>
   15a08:	f1b9 0f03 	cmp.w	r9, #3
   15a0c:	d870      	bhi.n	15af0 <d_demangle_callback.constprop.16+0x180>
   15a0e:	7ae2      	ldrb	r2, [r4, #11]
   15a10:	f1b9 0f02 	cmp.w	r9, #2
   15a14:	f104 050b 	add.w	r5, r4, #11
   15a18:	bf14      	ite	ne
   15a1a:	f04f 0943 	movne.w	r9, #67	; 0x43
   15a1e:	f04f 0942 	moveq.w	r9, #66	; 0x42
   15a22:	2a5f      	cmp	r2, #95	; 0x5f
   15a24:	60fd      	str	r5, [r7, #12]
   15a26:	d103      	bne.n	15a30 <d_demangle_callback.constprop.16+0xc0>
   15a28:	7b22      	ldrb	r2, [r4, #12]
   15a2a:	2a5a      	cmp	r2, #90	; 0x5a
   15a2c:	f000 8091 	beq.w	15b52 <d_demangle_callback.constprop.16+0x1e2>
   15a30:	4628      	mov	r0, r5
   15a32:	f003 f905 	bl	18c40 <strlen>
   15a36:	4629      	mov	r1, r5
   15a38:	4602      	mov	r2, r0
   15a3a:	4638      	mov	r0, r7
   15a3c:	f7fa fd98 	bl	10570 <d_make_name>
   15a40:	4602      	mov	r2, r0
   15a42:	4649      	mov	r1, r9
   15a44:	2300      	movs	r3, #0
   15a46:	4638      	mov	r0, r7
   15a48:	f7fa fd46 	bl	104d8 <d_make_comp>
   15a4c:	68fc      	ldr	r4, [r7, #12]
   15a4e:	4681      	mov	r9, r0
   15a50:	4620      	mov	r0, r4
   15a52:	f003 f8f5 	bl	18c40 <strlen>
   15a56:	1823      	adds	r3, r4, r0
   15a58:	60fb      	str	r3, [r7, #12]
   15a5a:	5c25      	ldrb	r5, [r4, r0]
   15a5c:	b185      	cbz	r5, 15a80 <d_demangle_callback.constprop.16+0x110>
   15a5e:	2000      	movs	r0, #0
   15a60:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   15a64:	46bd      	mov	sp, r7
   15a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a6a:	7843      	ldrb	r3, [r0, #1]
   15a6c:	2b5a      	cmp	r3, #90	; 0x5a
   15a6e:	d189      	bne.n	15984 <d_demangle_callback.constprop.16+0x14>
   15a70:	f04f 0901 	mov.w	r9, #1
   15a74:	e79e      	b.n	159b4 <d_demangle_callback.constprop.16+0x44>
   15a76:	2d5f      	cmp	r5, #95	; 0x5f
   15a78:	d041      	beq.n	15afe <d_demangle_callback.constprop.16+0x18e>
   15a7a:	4699      	mov	r9, r3
   15a7c:	2d00      	cmp	r5, #0
   15a7e:	d1ee      	bne.n	15a5e <d_demangle_callback.constprop.16+0xee>
   15a80:	f1b9 0f00 	cmp.w	r9, #0
   15a84:	d063      	beq.n	15b4e <d_demangle_callback.constprop.16+0x1de>
   15a86:	f107 0434 	add.w	r4, r7, #52	; 0x34
   15a8a:	464a      	mov	r2, r9
   15a8c:	4620      	mov	r0, r4
   15a8e:	2111      	movs	r1, #17
   15a90:	f8c7 5134 	str.w	r5, [r7, #308]	; 0x134
   15a94:	f887 5138 	strb.w	r5, [r7, #312]	; 0x138
   15a98:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
   15a9c:	f8c7 5148 	str.w	r5, [r7, #328]	; 0x148
   15aa0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
   15aa4:	f8c7 5154 	str.w	r5, [r7, #340]	; 0x154
   15aa8:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
   15aac:	f8c7 8140 	str.w	r8, [r7, #320]	; 0x140
   15ab0:	f8c7 514c 	str.w	r5, [r7, #332]	; 0x14c
   15ab4:	f7fc fdd4 	bl	12660 <d_print_comp.part.10>
   15ab8:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
   15abc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
   15ac0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
   15ac4:	5465      	strb	r5, [r4, r1]
   15ac6:	4620      	mov	r0, r4
   15ac8:	4798      	blx	r3
   15aca:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
   15ace:	f1d0 0001 	rsbs	r0, r0, #1
   15ad2:	bf38      	it	cc
   15ad4:	2000      	movcc	r0, #0
   15ad6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   15ada:	46bd      	mov	sp, r7
   15adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ae0:	7aa3      	ldrb	r3, [r4, #10]
   15ae2:	2b5f      	cmp	r3, #95	; 0x5f
   15ae4:	bf14      	ite	ne
   15ae6:	f04f 0900 	movne.w	r9, #0
   15aea:	f04f 0902 	moveq.w	r9, #2
   15aee:	e761      	b.n	159b4 <d_demangle_callback.constprop.16+0x44>
   15af0:	4638      	mov	r0, r7
   15af2:	f7fb fa9f 	bl	11034 <d_type>
   15af6:	68fb      	ldr	r3, [r7, #12]
   15af8:	4681      	mov	r9, r0
   15afa:	781d      	ldrb	r5, [r3, #0]
   15afc:	e7ae      	b.n	15a5c <d_demangle_callback.constprop.16+0xec>
   15afe:	7865      	ldrb	r5, [r4, #1]
   15b00:	1c62      	adds	r2, r4, #1
   15b02:	2d5a      	cmp	r5, #90	; 0x5a
   15b04:	60fa      	str	r2, [r7, #12]
   15b06:	d1b8      	bne.n	15a7a <d_demangle_callback.constprop.16+0x10a>
   15b08:	4649      	mov	r1, r9
   15b0a:	3402      	adds	r4, #2
   15b0c:	4638      	mov	r0, r7
   15b0e:	60fc      	str	r4, [r7, #12]
   15b10:	f7fb fe76 	bl	11800 <d_encoding>
   15b14:	68bb      	ldr	r3, [r7, #8]
   15b16:	f013 0f01 	tst.w	r3, #1
   15b1a:	68fb      	ldr	r3, [r7, #12]
   15b1c:	4681      	mov	r9, r0
   15b1e:	781d      	ldrb	r5, [r3, #0]
   15b20:	d112      	bne.n	15b48 <d_demangle_callback.constprop.16+0x1d8>
   15b22:	e79b      	b.n	15a5c <d_demangle_callback.constprop.16+0xec>
   15b24:	785b      	ldrb	r3, [r3, #1]
   15b26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   15b2a:	2a19      	cmp	r2, #25
   15b2c:	4638      	mov	r0, r7
   15b2e:	4649      	mov	r1, r9
   15b30:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   15b34:	d903      	bls.n	15b3e <d_demangle_callback.constprop.16+0x1ce>
   15b36:	2b5f      	cmp	r3, #95	; 0x5f
   15b38:	d001      	beq.n	15b3e <d_demangle_callback.constprop.16+0x1ce>
   15b3a:	2c09      	cmp	r4, #9
   15b3c:	d811      	bhi.n	15b62 <d_demangle_callback.constprop.16+0x1f2>
   15b3e:	f7fa fda7 	bl	10690 <d_clone_suffix>
   15b42:	68fb      	ldr	r3, [r7, #12]
   15b44:	781d      	ldrb	r5, [r3, #0]
   15b46:	4681      	mov	r9, r0
   15b48:	2d2e      	cmp	r5, #46	; 0x2e
   15b4a:	d0eb      	beq.n	15b24 <d_demangle_callback.constprop.16+0x1b4>
   15b4c:	e786      	b.n	15a5c <d_demangle_callback.constprop.16+0xec>
   15b4e:	4648      	mov	r0, r9
   15b50:	e786      	b.n	15a60 <d_demangle_callback.constprop.16+0xf0>
   15b52:	340d      	adds	r4, #13
   15b54:	4619      	mov	r1, r3
   15b56:	4638      	mov	r0, r7
   15b58:	60fc      	str	r4, [r7, #12]
   15b5a:	f7fb fe51 	bl	11800 <d_encoding>
   15b5e:	4602      	mov	r2, r0
   15b60:	e76f      	b.n	15a42 <d_demangle_callback.constprop.16+0xd2>
   15b62:	68fb      	ldr	r3, [r7, #12]
   15b64:	781d      	ldrb	r5, [r3, #0]
   15b66:	e779      	b.n	15a5c <d_demangle_callback.constprop.16+0xec>
   15b68:	7aa3      	ldrb	r3, [r4, #10]
   15b6a:	2b5f      	cmp	r3, #95	; 0x5f
   15b6c:	bf0c      	ite	eq
   15b6e:	f04f 0903 	moveq.w	r9, #3
   15b72:	f04f 0900 	movne.w	r9, #0
   15b76:	e71d      	b.n	159b4 <d_demangle_callback.constprop.16+0x44>
   15b78:	0001a53c 	.word	0x0001a53c

00015b7c <__cxa_demangle>:
__cxa_demangle():
   15b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b80:	460d      	mov	r5, r1
   15b82:	b084      	sub	sp, #16
   15b84:	4617      	mov	r7, r2
   15b86:	461e      	mov	r6, r3
   15b88:	2800      	cmp	r0, #0
   15b8a:	d02e      	beq.n	15bea <__cxa_demangle+0x6e>
   15b8c:	b109      	cbz	r1, 15b92 <__cxa_demangle+0x16>
   15b8e:	2a00      	cmp	r2, #0
   15b90:	d02b      	beq.n	15bea <__cxa_demangle+0x6e>
   15b92:	2400      	movs	r4, #0
   15b94:	4929      	ldr	r1, [pc, #164]	; (15c3c <__cxa_demangle+0xc0>)
   15b96:	9400      	str	r4, [sp, #0]
   15b98:	466a      	mov	r2, sp
   15b9a:	9401      	str	r4, [sp, #4]
   15b9c:	9402      	str	r4, [sp, #8]
   15b9e:	9403      	str	r4, [sp, #12]
   15ba0:	f7ff fee6 	bl	15970 <d_demangle_callback.constprop.16>
   15ba4:	2800      	cmp	r0, #0
   15ba6:	d03e      	beq.n	15c26 <__cxa_demangle+0xaa>
   15ba8:	9b03      	ldr	r3, [sp, #12]
   15baa:	b1db      	cbz	r3, 15be4 <__cxa_demangle+0x68>
   15bac:	f04f 0801 	mov.w	r8, #1
   15bb0:	9c00      	ldr	r4, [sp, #0]
   15bb2:	b344      	cbz	r4, 15c06 <__cxa_demangle+0x8a>
   15bb4:	2d00      	cmp	r5, #0
   15bb6:	d033      	beq.n	15c20 <__cxa_demangle+0xa4>
   15bb8:	4620      	mov	r0, r4
   15bba:	f003 f841 	bl	18c40 <strlen>
   15bbe:	683b      	ldr	r3, [r7, #0]
   15bc0:	4298      	cmp	r0, r3
   15bc2:	d21a      	bcs.n	15bfa <__cxa_demangle+0x7e>
   15bc4:	1c42      	adds	r2, r0, #1
   15bc6:	4621      	mov	r1, r4
   15bc8:	4628      	mov	r0, r5
   15bca:	f002 fef3 	bl	189b4 <memcpy>
   15bce:	4620      	mov	r0, r4
   15bd0:	f002 feca 	bl	18968 <free>
   15bd4:	462c      	mov	r4, r5
   15bd6:	b30e      	cbz	r6, 15c1c <__cxa_demangle+0xa0>
   15bd8:	2300      	movs	r3, #0
   15bda:	4620      	mov	r0, r4
   15bdc:	6033      	str	r3, [r6, #0]
   15bde:	b004      	add	sp, #16
   15be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15be4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15be8:	e7e2      	b.n	15bb0 <__cxa_demangle+0x34>
   15bea:	b19e      	cbz	r6, 15c14 <__cxa_demangle+0x98>
   15bec:	f06f 0302 	mvn.w	r3, #2
   15bf0:	2000      	movs	r0, #0
   15bf2:	6033      	str	r3, [r6, #0]
   15bf4:	b004      	add	sp, #16
   15bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bfa:	4628      	mov	r0, r5
   15bfc:	f002 feb4 	bl	18968 <free>
   15c00:	f8c7 8000 	str.w	r8, [r7]
   15c04:	e7e7      	b.n	15bd6 <__cxa_demangle+0x5a>
   15c06:	b12e      	cbz	r6, 15c14 <__cxa_demangle+0x98>
   15c08:	f1b8 0f01 	cmp.w	r8, #1
   15c0c:	d011      	beq.n	15c32 <__cxa_demangle+0xb6>
   15c0e:	f06f 0301 	mvn.w	r3, #1
   15c12:	6033      	str	r3, [r6, #0]
   15c14:	2000      	movs	r0, #0
   15c16:	b004      	add	sp, #16
   15c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15c1c:	4620      	mov	r0, r4
   15c1e:	e7de      	b.n	15bde <__cxa_demangle+0x62>
   15c20:	2f00      	cmp	r7, #0
   15c22:	d1ed      	bne.n	15c00 <__cxa_demangle+0x84>
   15c24:	e7d7      	b.n	15bd6 <__cxa_demangle+0x5a>
   15c26:	9800      	ldr	r0, [sp, #0]
   15c28:	f002 fe9e 	bl	18968 <free>
   15c2c:	2e00      	cmp	r6, #0
   15c2e:	d1ee      	bne.n	15c0e <__cxa_demangle+0x92>
   15c30:	e7f0      	b.n	15c14 <__cxa_demangle+0x98>
   15c32:	f04f 33ff 	mov.w	r3, #4294967295
   15c36:	4620      	mov	r0, r4
   15c38:	6033      	str	r3, [r6, #0]
   15c3a:	e7d0      	b.n	15bde <__cxa_demangle+0x62>
   15c3c:	00010b71 	.word	0x00010b71

00015c40 <__gcclibcxx_demangle_callback>:
__gcclibcxx_demangle_callback():
   15c40:	b508      	push	{r3, lr}
   15c42:	b140      	cbz	r0, 15c56 <__gcclibcxx_demangle_callback+0x16>
   15c44:	b139      	cbz	r1, 15c56 <__gcclibcxx_demangle_callback+0x16>
   15c46:	f7ff fe93 	bl	15970 <d_demangle_callback.constprop.16>
   15c4a:	2800      	cmp	r0, #0
   15c4c:	bf14      	ite	ne
   15c4e:	2000      	movne	r0, #0
   15c50:	f06f 0001 	mvneq.w	r0, #1
   15c54:	bd08      	pop	{r3, pc}
   15c56:	f06f 0002 	mvn.w	r0, #2
   15c5a:	bd08      	pop	{r3, pc}

00015c5c <__aeabi_drsub>:
$t():
   15c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   15c60:	e002      	b.n	15c68 <__adddf3>
   15c62:	bf00      	nop

00015c64 <__aeabi_dsub>:
__aeabi_dsub():
   15c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00015c68 <__adddf3>:
   15c68:	b530      	push	{r4, r5, lr}
   15c6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   15c6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   15c72:	ea94 0f05 	teq	r4, r5
   15c76:	bf08      	it	eq
   15c78:	ea90 0f02 	teqeq	r0, r2
   15c7c:	bf1f      	itttt	ne
   15c7e:	ea54 0c00 	orrsne.w	ip, r4, r0
   15c82:	ea55 0c02 	orrsne.w	ip, r5, r2
   15c86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   15c8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15c8e:	f000 80e2 	beq.w	15e56 <__adddf3+0x1ee>
   15c92:	ea4f 5454 	mov.w	r4, r4, lsr #21
   15c96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   15c9a:	bfb8      	it	lt
   15c9c:	426d      	neglt	r5, r5
   15c9e:	dd0c      	ble.n	15cba <__adddf3+0x52>
   15ca0:	442c      	add	r4, r5
   15ca2:	ea80 0202 	eor.w	r2, r0, r2
   15ca6:	ea81 0303 	eor.w	r3, r1, r3
   15caa:	ea82 0000 	eor.w	r0, r2, r0
   15cae:	ea83 0101 	eor.w	r1, r3, r1
   15cb2:	ea80 0202 	eor.w	r2, r0, r2
   15cb6:	ea81 0303 	eor.w	r3, r1, r3
   15cba:	2d36      	cmp	r5, #54	; 0x36
   15cbc:	bf88      	it	hi
   15cbe:	bd30      	pophi	{r4, r5, pc}
   15cc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   15cc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   15ccc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   15cd0:	d002      	beq.n	15cd8 <__adddf3+0x70>
   15cd2:	4240      	negs	r0, r0
   15cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15cd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   15cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   15ce0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   15ce4:	d002      	beq.n	15cec <__adddf3+0x84>
   15ce6:	4252      	negs	r2, r2
   15ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15cec:	ea94 0f05 	teq	r4, r5
   15cf0:	f000 80a7 	beq.w	15e42 <__adddf3+0x1da>
   15cf4:	f1a4 0401 	sub.w	r4, r4, #1
   15cf8:	f1d5 0e20 	rsbs	lr, r5, #32
   15cfc:	db0d      	blt.n	15d1a <__adddf3+0xb2>
   15cfe:	fa02 fc0e 	lsl.w	ip, r2, lr
   15d02:	fa22 f205 	lsr.w	r2, r2, r5
   15d06:	1880      	adds	r0, r0, r2
   15d08:	f141 0100 	adc.w	r1, r1, #0
   15d0c:	fa03 f20e 	lsl.w	r2, r3, lr
   15d10:	1880      	adds	r0, r0, r2
   15d12:	fa43 f305 	asr.w	r3, r3, r5
   15d16:	4159      	adcs	r1, r3
   15d18:	e00e      	b.n	15d38 <__adddf3+0xd0>
   15d1a:	f1a5 0520 	sub.w	r5, r5, #32
   15d1e:	f10e 0e20 	add.w	lr, lr, #32
   15d22:	2a01      	cmp	r2, #1
   15d24:	fa03 fc0e 	lsl.w	ip, r3, lr
   15d28:	bf28      	it	cs
   15d2a:	f04c 0c02 	orrcs.w	ip, ip, #2
   15d2e:	fa43 f305 	asr.w	r3, r3, r5
   15d32:	18c0      	adds	r0, r0, r3
   15d34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   15d38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15d3c:	d507      	bpl.n	15d4e <__adddf3+0xe6>
   15d3e:	f04f 0e00 	mov.w	lr, #0
   15d42:	f1dc 0c00 	rsbs	ip, ip, #0
   15d46:	eb7e 0000 	sbcs.w	r0, lr, r0
   15d4a:	eb6e 0101 	sbc.w	r1, lr, r1
   15d4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   15d52:	d31b      	bcc.n	15d8c <__adddf3+0x124>
   15d54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   15d58:	d30c      	bcc.n	15d74 <__adddf3+0x10c>
   15d5a:	0849      	lsrs	r1, r1, #1
   15d5c:	ea5f 0030 	movs.w	r0, r0, rrx
   15d60:	ea4f 0c3c 	mov.w	ip, ip, rrx
   15d64:	f104 0401 	add.w	r4, r4, #1
   15d68:	ea4f 5244 	mov.w	r2, r4, lsl #21
   15d6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   15d70:	f080 809a 	bcs.w	15ea8 <__adddf3+0x240>
   15d74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   15d78:	bf08      	it	eq
   15d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   15d7e:	f150 0000 	adcs.w	r0, r0, #0
   15d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   15d86:	ea41 0105 	orr.w	r1, r1, r5
   15d8a:	bd30      	pop	{r4, r5, pc}
   15d8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   15d90:	4140      	adcs	r0, r0
   15d92:	eb41 0101 	adc.w	r1, r1, r1
   15d96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   15d9a:	f1a4 0401 	sub.w	r4, r4, #1
   15d9e:	d1e9      	bne.n	15d74 <__adddf3+0x10c>
   15da0:	f091 0f00 	teq	r1, #0
   15da4:	bf04      	itt	eq
   15da6:	4601      	moveq	r1, r0
   15da8:	2000      	moveq	r0, #0
   15daa:	fab1 f381 	clz	r3, r1
   15dae:	bf08      	it	eq
   15db0:	3320      	addeq	r3, #32
   15db2:	f1a3 030b 	sub.w	r3, r3, #11
   15db6:	f1b3 0220 	subs.w	r2, r3, #32
   15dba:	da0c      	bge.n	15dd6 <__adddf3+0x16e>
   15dbc:	320c      	adds	r2, #12
   15dbe:	dd08      	ble.n	15dd2 <__adddf3+0x16a>
   15dc0:	f102 0c14 	add.w	ip, r2, #20
   15dc4:	f1c2 020c 	rsb	r2, r2, #12
   15dc8:	fa01 f00c 	lsl.w	r0, r1, ip
   15dcc:	fa21 f102 	lsr.w	r1, r1, r2
   15dd0:	e00c      	b.n	15dec <__adddf3+0x184>
   15dd2:	f102 0214 	add.w	r2, r2, #20
   15dd6:	bfd8      	it	le
   15dd8:	f1c2 0c20 	rsble	ip, r2, #32
   15ddc:	fa01 f102 	lsl.w	r1, r1, r2
   15de0:	fa20 fc0c 	lsr.w	ip, r0, ip
   15de4:	bfdc      	itt	le
   15de6:	ea41 010c 	orrle.w	r1, r1, ip
   15dea:	4090      	lslle	r0, r2
   15dec:	1ae4      	subs	r4, r4, r3
   15dee:	bfa2      	ittt	ge
   15df0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   15df4:	4329      	orrge	r1, r5
   15df6:	bd30      	popge	{r4, r5, pc}
   15df8:	ea6f 0404 	mvn.w	r4, r4
   15dfc:	3c1f      	subs	r4, #31
   15dfe:	da1c      	bge.n	15e3a <__adddf3+0x1d2>
   15e00:	340c      	adds	r4, #12
   15e02:	dc0e      	bgt.n	15e22 <__adddf3+0x1ba>
   15e04:	f104 0414 	add.w	r4, r4, #20
   15e08:	f1c4 0220 	rsb	r2, r4, #32
   15e0c:	fa20 f004 	lsr.w	r0, r0, r4
   15e10:	fa01 f302 	lsl.w	r3, r1, r2
   15e14:	ea40 0003 	orr.w	r0, r0, r3
   15e18:	fa21 f304 	lsr.w	r3, r1, r4
   15e1c:	ea45 0103 	orr.w	r1, r5, r3
   15e20:	bd30      	pop	{r4, r5, pc}
   15e22:	f1c4 040c 	rsb	r4, r4, #12
   15e26:	f1c4 0220 	rsb	r2, r4, #32
   15e2a:	fa20 f002 	lsr.w	r0, r0, r2
   15e2e:	fa01 f304 	lsl.w	r3, r1, r4
   15e32:	ea40 0003 	orr.w	r0, r0, r3
   15e36:	4629      	mov	r1, r5
   15e38:	bd30      	pop	{r4, r5, pc}
   15e3a:	fa21 f004 	lsr.w	r0, r1, r4
   15e3e:	4629      	mov	r1, r5
   15e40:	bd30      	pop	{r4, r5, pc}
   15e42:	f094 0f00 	teq	r4, #0
   15e46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   15e4a:	bf06      	itte	eq
   15e4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   15e50:	3401      	addeq	r4, #1
   15e52:	3d01      	subne	r5, #1
   15e54:	e74e      	b.n	15cf4 <__adddf3+0x8c>
   15e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15e5a:	bf18      	it	ne
   15e5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   15e60:	d029      	beq.n	15eb6 <__adddf3+0x24e>
   15e62:	ea94 0f05 	teq	r4, r5
   15e66:	bf08      	it	eq
   15e68:	ea90 0f02 	teqeq	r0, r2
   15e6c:	d005      	beq.n	15e7a <__adddf3+0x212>
   15e6e:	ea54 0c00 	orrs.w	ip, r4, r0
   15e72:	bf04      	itt	eq
   15e74:	4619      	moveq	r1, r3
   15e76:	4610      	moveq	r0, r2
   15e78:	bd30      	pop	{r4, r5, pc}
   15e7a:	ea91 0f03 	teq	r1, r3
   15e7e:	bf1e      	ittt	ne
   15e80:	2100      	movne	r1, #0
   15e82:	2000      	movne	r0, #0
   15e84:	bd30      	popne	{r4, r5, pc}
   15e86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   15e8a:	d105      	bne.n	15e98 <__adddf3+0x230>
   15e8c:	0040      	lsls	r0, r0, #1
   15e8e:	4149      	adcs	r1, r1
   15e90:	bf28      	it	cs
   15e92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15e96:	bd30      	pop	{r4, r5, pc}
   15e98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   15e9c:	bf3c      	itt	cc
   15e9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   15ea2:	bd30      	popcc	{r4, r5, pc}
   15ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15ea8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   15eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   15eb0:	f04f 0000 	mov.w	r0, #0
   15eb4:	bd30      	pop	{r4, r5, pc}
   15eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   15eba:	bf1a      	itte	ne
   15ebc:	4619      	movne	r1, r3
   15ebe:	4610      	movne	r0, r2
   15ec0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   15ec4:	bf1c      	itt	ne
   15ec6:	460b      	movne	r3, r1
   15ec8:	4602      	movne	r2, r0
   15eca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   15ece:	bf06      	itte	eq
   15ed0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   15ed4:	ea91 0f03 	teqeq	r1, r3
   15ed8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   15edc:	bd30      	pop	{r4, r5, pc}
__adddf3():
   15ede:	bf00      	nop

00015ee0 <__aeabi_ui2d>:
__aeabi_ui2d():
   15ee0:	f090 0f00 	teq	r0, #0
   15ee4:	bf04      	itt	eq
   15ee6:	2100      	moveq	r1, #0
   15ee8:	4770      	bxeq	lr
   15eea:	b530      	push	{r4, r5, lr}
   15eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15ef4:	f04f 0500 	mov.w	r5, #0
   15ef8:	f04f 0100 	mov.w	r1, #0
   15efc:	e750      	b.n	15da0 <__adddf3+0x138>
   15efe:	bf00      	nop

00015f00 <__aeabi_i2d>:
__floatsidf():
   15f00:	f090 0f00 	teq	r0, #0
   15f04:	bf04      	itt	eq
   15f06:	2100      	moveq	r1, #0
   15f08:	4770      	bxeq	lr
   15f0a:	b530      	push	{r4, r5, lr}
   15f0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15f10:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15f14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   15f18:	bf48      	it	mi
   15f1a:	4240      	negmi	r0, r0
   15f1c:	f04f 0100 	mov.w	r1, #0
   15f20:	e73e      	b.n	15da0 <__adddf3+0x138>
   15f22:	bf00      	nop

00015f24 <__aeabi_f2d>:
__extendsfdf2():
   15f24:	0042      	lsls	r2, r0, #1
   15f26:	ea4f 01e2 	mov.w	r1, r2, asr #3
   15f2a:	ea4f 0131 	mov.w	r1, r1, rrx
   15f2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   15f32:	bf1f      	itttt	ne
   15f34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   15f38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15f3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   15f40:	4770      	bxne	lr
   15f42:	f092 0f00 	teq	r2, #0
   15f46:	bf14      	ite	ne
   15f48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   15f4c:	4770      	bxeq	lr
   15f4e:	b530      	push	{r4, r5, lr}
   15f50:	f44f 7460 	mov.w	r4, #896	; 0x380
   15f54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   15f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   15f5c:	e720      	b.n	15da0 <__adddf3+0x138>
   15f5e:	bf00      	nop

00015f60 <__aeabi_ul2d>:
__aeabi_ul2d():
   15f60:	ea50 0201 	orrs.w	r2, r0, r1
   15f64:	bf08      	it	eq
   15f66:	4770      	bxeq	lr
   15f68:	b530      	push	{r4, r5, lr}
   15f6a:	f04f 0500 	mov.w	r5, #0
   15f6e:	e00a      	b.n	15f86 <__aeabi_l2d+0x16>

00015f70 <__aeabi_l2d>:
   15f70:	ea50 0201 	orrs.w	r2, r0, r1
   15f74:	bf08      	it	eq
   15f76:	4770      	bxeq	lr
   15f78:	b530      	push	{r4, r5, lr}
   15f7a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   15f7e:	d502      	bpl.n	15f86 <__aeabi_l2d+0x16>
   15f80:	4240      	negs	r0, r0
   15f82:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15f86:	f44f 6480 	mov.w	r4, #1024	; 0x400
   15f8a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   15f8e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   15f92:	f43f aedc 	beq.w	15d4e <__adddf3+0xe6>
   15f96:	f04f 0203 	mov.w	r2, #3
   15f9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15f9e:	bf18      	it	ne
   15fa0:	3203      	addne	r2, #3
   15fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   15fa6:	bf18      	it	ne
   15fa8:	3203      	addne	r2, #3
   15faa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   15fae:	f1c2 0320 	rsb	r3, r2, #32
   15fb2:	fa00 fc03 	lsl.w	ip, r0, r3
   15fb6:	fa20 f002 	lsr.w	r0, r0, r2
   15fba:	fa01 fe03 	lsl.w	lr, r1, r3
   15fbe:	ea40 000e 	orr.w	r0, r0, lr
   15fc2:	fa21 f102 	lsr.w	r1, r1, r2
   15fc6:	4414      	add	r4, r2
   15fc8:	e6c1      	b.n	15d4e <__adddf3+0xe6>
__floatdidf():
   15fca:	bf00      	nop

00015fcc <__aeabi_dmul>:
__aeabi_dmul():
   15fcc:	b570      	push	{r4, r5, r6, lr}
   15fce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   15fd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   15fd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   15fda:	bf1d      	ittte	ne
   15fdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   15fe0:	ea94 0f0c 	teqne	r4, ip
   15fe4:	ea95 0f0c 	teqne	r5, ip
   15fe8:	f000 f8de 	bleq	161a8 <__aeabi_dmul+0x1dc>
   15fec:	442c      	add	r4, r5
   15fee:	ea81 0603 	eor.w	r6, r1, r3
   15ff2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   15ff6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   15ffa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   15ffe:	bf18      	it	ne
   16000:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   16004:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1600c:	d038      	beq.n	16080 <__aeabi_dmul+0xb4>
   1600e:	fba0 ce02 	umull	ip, lr, r0, r2
   16012:	f04f 0500 	mov.w	r5, #0
   16016:	fbe1 e502 	umlal	lr, r5, r1, r2
   1601a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1601e:	fbe0 e503 	umlal	lr, r5, r0, r3
   16022:	f04f 0600 	mov.w	r6, #0
   16026:	fbe1 5603 	umlal	r5, r6, r1, r3
   1602a:	f09c 0f00 	teq	ip, #0
   1602e:	bf18      	it	ne
   16030:	f04e 0e01 	orrne.w	lr, lr, #1
   16034:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   16038:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1603c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   16040:	d204      	bcs.n	1604c <__aeabi_dmul+0x80>
   16042:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   16046:	416d      	adcs	r5, r5
   16048:	eb46 0606 	adc.w	r6, r6, r6
   1604c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   16050:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   16054:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   16058:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1605c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   16060:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16064:	bf88      	it	hi
   16066:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1606a:	d81e      	bhi.n	160aa <__aeabi_dmul+0xde>
   1606c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   16070:	bf08      	it	eq
   16072:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   16076:	f150 0000 	adcs.w	r0, r0, #0
   1607a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1607e:	bd70      	pop	{r4, r5, r6, pc}
   16080:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   16084:	ea46 0101 	orr.w	r1, r6, r1
   16088:	ea40 0002 	orr.w	r0, r0, r2
   1608c:	ea81 0103 	eor.w	r1, r1, r3
   16090:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   16094:	bfc2      	ittt	gt
   16096:	ebd4 050c 	rsbsgt	r5, r4, ip
   1609a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1609e:	bd70      	popgt	{r4, r5, r6, pc}
   160a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   160a4:	f04f 0e00 	mov.w	lr, #0
   160a8:	3c01      	subs	r4, #1
   160aa:	f300 80ab 	bgt.w	16204 <__aeabi_dmul+0x238>
   160ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   160b2:	bfde      	ittt	le
   160b4:	2000      	movle	r0, #0
   160b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   160ba:	bd70      	pople	{r4, r5, r6, pc}
   160bc:	f1c4 0400 	rsb	r4, r4, #0
   160c0:	3c20      	subs	r4, #32
   160c2:	da35      	bge.n	16130 <__aeabi_dmul+0x164>
   160c4:	340c      	adds	r4, #12
   160c6:	dc1b      	bgt.n	16100 <__aeabi_dmul+0x134>
   160c8:	f104 0414 	add.w	r4, r4, #20
   160cc:	f1c4 0520 	rsb	r5, r4, #32
   160d0:	fa00 f305 	lsl.w	r3, r0, r5
   160d4:	fa20 f004 	lsr.w	r0, r0, r4
   160d8:	fa01 f205 	lsl.w	r2, r1, r5
   160dc:	ea40 0002 	orr.w	r0, r0, r2
   160e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   160e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   160e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   160ec:	fa21 f604 	lsr.w	r6, r1, r4
   160f0:	eb42 0106 	adc.w	r1, r2, r6
   160f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   160f8:	bf08      	it	eq
   160fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   160fe:	bd70      	pop	{r4, r5, r6, pc}
   16100:	f1c4 040c 	rsb	r4, r4, #12
   16104:	f1c4 0520 	rsb	r5, r4, #32
   16108:	fa00 f304 	lsl.w	r3, r0, r4
   1610c:	fa20 f005 	lsr.w	r0, r0, r5
   16110:	fa01 f204 	lsl.w	r2, r1, r4
   16114:	ea40 0002 	orr.w	r0, r0, r2
   16118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1611c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   16120:	f141 0100 	adc.w	r1, r1, #0
   16124:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16128:	bf08      	it	eq
   1612a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1612e:	bd70      	pop	{r4, r5, r6, pc}
   16130:	f1c4 0520 	rsb	r5, r4, #32
   16134:	fa00 f205 	lsl.w	r2, r0, r5
   16138:	ea4e 0e02 	orr.w	lr, lr, r2
   1613c:	fa20 f304 	lsr.w	r3, r0, r4
   16140:	fa01 f205 	lsl.w	r2, r1, r5
   16144:	ea43 0302 	orr.w	r3, r3, r2
   16148:	fa21 f004 	lsr.w	r0, r1, r4
   1614c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16150:	fa21 f204 	lsr.w	r2, r1, r4
   16154:	ea20 0002 	bic.w	r0, r0, r2
   16158:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1615c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   16160:	bf08      	it	eq
   16162:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   16166:	bd70      	pop	{r4, r5, r6, pc}
   16168:	f094 0f00 	teq	r4, #0
   1616c:	d10f      	bne.n	1618e <__aeabi_dmul+0x1c2>
   1616e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   16172:	0040      	lsls	r0, r0, #1
   16174:	eb41 0101 	adc.w	r1, r1, r1
   16178:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1617c:	bf08      	it	eq
   1617e:	3c01      	subeq	r4, #1
   16180:	d0f7      	beq.n	16172 <__aeabi_dmul+0x1a6>
   16182:	ea41 0106 	orr.w	r1, r1, r6
   16186:	f095 0f00 	teq	r5, #0
   1618a:	bf18      	it	ne
   1618c:	4770      	bxne	lr
   1618e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   16192:	0052      	lsls	r2, r2, #1
   16194:	eb43 0303 	adc.w	r3, r3, r3
   16198:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1619c:	bf08      	it	eq
   1619e:	3d01      	subeq	r5, #1
   161a0:	d0f7      	beq.n	16192 <__aeabi_dmul+0x1c6>
   161a2:	ea43 0306 	orr.w	r3, r3, r6
   161a6:	4770      	bx	lr
   161a8:	ea94 0f0c 	teq	r4, ip
   161ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   161b0:	bf18      	it	ne
   161b2:	ea95 0f0c 	teqne	r5, ip
   161b6:	d00c      	beq.n	161d2 <__aeabi_dmul+0x206>
   161b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   161bc:	bf18      	it	ne
   161be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   161c2:	d1d1      	bne.n	16168 <__aeabi_dmul+0x19c>
   161c4:	ea81 0103 	eor.w	r1, r1, r3
   161c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   161cc:	f04f 0000 	mov.w	r0, #0
   161d0:	bd70      	pop	{r4, r5, r6, pc}
   161d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   161d6:	bf06      	itte	eq
   161d8:	4610      	moveq	r0, r2
   161da:	4619      	moveq	r1, r3
   161dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   161e0:	d019      	beq.n	16216 <__aeabi_dmul+0x24a>
   161e2:	ea94 0f0c 	teq	r4, ip
   161e6:	d102      	bne.n	161ee <__aeabi_dmul+0x222>
   161e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   161ec:	d113      	bne.n	16216 <__aeabi_dmul+0x24a>
   161ee:	ea95 0f0c 	teq	r5, ip
   161f2:	d105      	bne.n	16200 <__aeabi_dmul+0x234>
   161f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   161f8:	bf1c      	itt	ne
   161fa:	4610      	movne	r0, r2
   161fc:	4619      	movne	r1, r3
   161fe:	d10a      	bne.n	16216 <__aeabi_dmul+0x24a>
   16200:	ea81 0103 	eor.w	r1, r1, r3
   16204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   16208:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1620c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   16210:	f04f 0000 	mov.w	r0, #0
   16214:	bd70      	pop	{r4, r5, r6, pc}
   16216:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1621a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1621e:	bd70      	pop	{r4, r5, r6, pc}

00016220 <__aeabi_ddiv>:
__aeabi_ddiv():
   16220:	b570      	push	{r4, r5, r6, lr}
   16222:	f04f 0cff 	mov.w	ip, #255	; 0xff
   16226:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1622a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1622e:	bf1d      	ittte	ne
   16230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   16234:	ea94 0f0c 	teqne	r4, ip
   16238:	ea95 0f0c 	teqne	r5, ip
   1623c:	f000 f8a7 	bleq	1638e <__aeabi_ddiv+0x16e>
   16240:	eba4 0405 	sub.w	r4, r4, r5
   16244:	ea81 0e03 	eor.w	lr, r1, r3
   16248:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1624c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   16250:	f000 8088 	beq.w	16364 <__aeabi_ddiv+0x144>
   16254:	ea4f 3303 	mov.w	r3, r3, lsl #12
   16258:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1625c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   16260:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   16264:	ea4f 2202 	mov.w	r2, r2, lsl #8
   16268:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1626c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   16270:	ea4f 2600 	mov.w	r6, r0, lsl #8
   16274:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   16278:	429d      	cmp	r5, r3
   1627a:	bf08      	it	eq
   1627c:	4296      	cmpeq	r6, r2
   1627e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   16282:	f504 7440 	add.w	r4, r4, #768	; 0x300
   16286:	d202      	bcs.n	1628e <__aeabi_ddiv+0x6e>
   16288:	085b      	lsrs	r3, r3, #1
   1628a:	ea4f 0232 	mov.w	r2, r2, rrx
   1628e:	1ab6      	subs	r6, r6, r2
   16290:	eb65 0503 	sbc.w	r5, r5, r3
   16294:	085b      	lsrs	r3, r3, #1
   16296:	ea4f 0232 	mov.w	r2, r2, rrx
   1629a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1629e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   162a2:	ebb6 0e02 	subs.w	lr, r6, r2
   162a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   162aa:	bf22      	ittt	cs
   162ac:	1ab6      	subcs	r6, r6, r2
   162ae:	4675      	movcs	r5, lr
   162b0:	ea40 000c 	orrcs.w	r0, r0, ip
   162b4:	085b      	lsrs	r3, r3, #1
   162b6:	ea4f 0232 	mov.w	r2, r2, rrx
   162ba:	ebb6 0e02 	subs.w	lr, r6, r2
   162be:	eb75 0e03 	sbcs.w	lr, r5, r3
   162c2:	bf22      	ittt	cs
   162c4:	1ab6      	subcs	r6, r6, r2
   162c6:	4675      	movcs	r5, lr
   162c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   162cc:	085b      	lsrs	r3, r3, #1
   162ce:	ea4f 0232 	mov.w	r2, r2, rrx
   162d2:	ebb6 0e02 	subs.w	lr, r6, r2
   162d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   162da:	bf22      	ittt	cs
   162dc:	1ab6      	subcs	r6, r6, r2
   162de:	4675      	movcs	r5, lr
   162e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   162e4:	085b      	lsrs	r3, r3, #1
   162e6:	ea4f 0232 	mov.w	r2, r2, rrx
   162ea:	ebb6 0e02 	subs.w	lr, r6, r2
   162ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   162f2:	bf22      	ittt	cs
   162f4:	1ab6      	subcs	r6, r6, r2
   162f6:	4675      	movcs	r5, lr
   162f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   162fc:	ea55 0e06 	orrs.w	lr, r5, r6
   16300:	d018      	beq.n	16334 <__aeabi_ddiv+0x114>
   16302:	ea4f 1505 	mov.w	r5, r5, lsl #4
   16306:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1630a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1630e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   16312:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   16316:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1631a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1631e:	d1c0      	bne.n	162a2 <__aeabi_ddiv+0x82>
   16320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16324:	d10b      	bne.n	1633e <__aeabi_ddiv+0x11e>
   16326:	ea41 0100 	orr.w	r1, r1, r0
   1632a:	f04f 0000 	mov.w	r0, #0
   1632e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   16332:	e7b6      	b.n	162a2 <__aeabi_ddiv+0x82>
   16334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   16338:	bf04      	itt	eq
   1633a:	4301      	orreq	r1, r0
   1633c:	2000      	moveq	r0, #0
   1633e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   16342:	bf88      	it	hi
   16344:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   16348:	f63f aeaf 	bhi.w	160aa <__aeabi_dmul+0xde>
   1634c:	ebb5 0c03 	subs.w	ip, r5, r3
   16350:	bf04      	itt	eq
   16352:	ebb6 0c02 	subseq.w	ip, r6, r2
   16356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1635a:	f150 0000 	adcs.w	r0, r0, #0
   1635e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   16362:	bd70      	pop	{r4, r5, r6, pc}
   16364:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   16368:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1636c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   16370:	bfc2      	ittt	gt
   16372:	ebd4 050c 	rsbsgt	r5, r4, ip
   16376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1637a:	bd70      	popgt	{r4, r5, r6, pc}
   1637c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   16380:	f04f 0e00 	mov.w	lr, #0
   16384:	3c01      	subs	r4, #1
   16386:	e690      	b.n	160aa <__aeabi_dmul+0xde>
   16388:	ea45 0e06 	orr.w	lr, r5, r6
   1638c:	e68d      	b.n	160aa <__aeabi_dmul+0xde>
   1638e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   16392:	ea94 0f0c 	teq	r4, ip
   16396:	bf08      	it	eq
   16398:	ea95 0f0c 	teqeq	r5, ip
   1639c:	f43f af3b 	beq.w	16216 <__aeabi_dmul+0x24a>
   163a0:	ea94 0f0c 	teq	r4, ip
   163a4:	d10a      	bne.n	163bc <__aeabi_ddiv+0x19c>
   163a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   163aa:	f47f af34 	bne.w	16216 <__aeabi_dmul+0x24a>
   163ae:	ea95 0f0c 	teq	r5, ip
   163b2:	f47f af25 	bne.w	16200 <__aeabi_dmul+0x234>
   163b6:	4610      	mov	r0, r2
   163b8:	4619      	mov	r1, r3
   163ba:	e72c      	b.n	16216 <__aeabi_dmul+0x24a>
   163bc:	ea95 0f0c 	teq	r5, ip
   163c0:	d106      	bne.n	163d0 <__aeabi_ddiv+0x1b0>
   163c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   163c6:	f43f aefd 	beq.w	161c4 <__aeabi_dmul+0x1f8>
   163ca:	4610      	mov	r0, r2
   163cc:	4619      	mov	r1, r3
   163ce:	e722      	b.n	16216 <__aeabi_dmul+0x24a>
   163d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   163d4:	bf18      	it	ne
   163d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   163da:	f47f aec5 	bne.w	16168 <__aeabi_dmul+0x19c>
   163de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   163e2:	f47f af0d 	bne.w	16200 <__aeabi_dmul+0x234>
   163e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   163ea:	f47f aeeb 	bne.w	161c4 <__aeabi_dmul+0x1f8>
   163ee:	e712      	b.n	16216 <__aeabi_dmul+0x24a>

000163f0 <__gedf2>:
__gtdf2():
   163f0:	f04f 3cff 	mov.w	ip, #4294967295
   163f4:	e006      	b.n	16404 <__cmpdf2+0x4>
   163f6:	bf00      	nop

000163f8 <__ledf2>:
   163f8:	f04f 0c01 	mov.w	ip, #1
   163fc:	e002      	b.n	16404 <__cmpdf2+0x4>
   163fe:	bf00      	nop

00016400 <__cmpdf2>:
   16400:	f04f 0c01 	mov.w	ip, #1
   16404:	f84d cd04 	str.w	ip, [sp, #-4]!
   16408:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1640c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   16410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16414:	bf18      	it	ne
   16416:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1641a:	d01b      	beq.n	16454 <__cmpdf2+0x54>
   1641c:	b001      	add	sp, #4
   1641e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   16422:	bf0c      	ite	eq
   16424:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   16428:	ea91 0f03 	teqne	r1, r3
   1642c:	bf02      	ittt	eq
   1642e:	ea90 0f02 	teqeq	r0, r2
   16432:	2000      	moveq	r0, #0
   16434:	4770      	bxeq	lr
   16436:	f110 0f00 	cmn.w	r0, #0
   1643a:	ea91 0f03 	teq	r1, r3
   1643e:	bf58      	it	pl
   16440:	4299      	cmppl	r1, r3
   16442:	bf08      	it	eq
   16444:	4290      	cmpeq	r0, r2
   16446:	bf2c      	ite	cs
   16448:	17d8      	asrcs	r0, r3, #31
   1644a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1644e:	f040 0001 	orr.w	r0, r0, #1
   16452:	4770      	bx	lr
   16454:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   16458:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1645c:	d102      	bne.n	16464 <__cmpdf2+0x64>
   1645e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   16462:	d107      	bne.n	16474 <__cmpdf2+0x74>
   16464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   16468:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1646c:	d1d6      	bne.n	1641c <__cmpdf2+0x1c>
   1646e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   16472:	d0d3      	beq.n	1641c <__cmpdf2+0x1c>
   16474:	f85d 0b04 	ldr.w	r0, [sp], #4
   16478:	4770      	bx	lr
__cmpdf2():
   1647a:	bf00      	nop

0001647c <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
   1647c:	4684      	mov	ip, r0
   1647e:	4610      	mov	r0, r2
   16480:	4662      	mov	r2, ip
   16482:	468c      	mov	ip, r1
   16484:	4619      	mov	r1, r3
   16486:	4663      	mov	r3, ip
   16488:	e000      	b.n	1648c <__aeabi_cdcmpeq>
   1648a:	bf00      	nop

0001648c <__aeabi_cdcmpeq>:
   1648c:	b501      	push	{r0, lr}
   1648e:	f7ff ffb7 	bl	16400 <__cmpdf2>
   16492:	2800      	cmp	r0, #0
   16494:	bf48      	it	mi
   16496:	f110 0f00 	cmnmi.w	r0, #0
   1649a:	bd01      	pop	{r0, pc}

0001649c <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
   1649c:	f84d ed08 	str.w	lr, [sp, #-8]!
   164a0:	f7ff fff4 	bl	1648c <__aeabi_cdcmpeq>
   164a4:	bf0c      	ite	eq
   164a6:	2001      	moveq	r0, #1
   164a8:	2000      	movne	r0, #0
   164aa:	f85d fb08 	ldr.w	pc, [sp], #8
   164ae:	bf00      	nop

000164b0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
   164b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   164b4:	f7ff ffea 	bl	1648c <__aeabi_cdcmpeq>
   164b8:	bf34      	ite	cc
   164ba:	2001      	movcc	r0, #1
   164bc:	2000      	movcs	r0, #0
   164be:	f85d fb08 	ldr.w	pc, [sp], #8
   164c2:	bf00      	nop

000164c4 <__aeabi_dcmple>:
__aeabi_dcmple():
   164c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   164c8:	f7ff ffe0 	bl	1648c <__aeabi_cdcmpeq>
   164cc:	bf94      	ite	ls
   164ce:	2001      	movls	r0, #1
   164d0:	2000      	movhi	r0, #0
   164d2:	f85d fb08 	ldr.w	pc, [sp], #8
   164d6:	bf00      	nop

000164d8 <__aeabi_dcmpge>:
__aeabi_dcmpge():
   164d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   164dc:	f7ff ffce 	bl	1647c <__aeabi_cdrcmple>
   164e0:	bf94      	ite	ls
   164e2:	2001      	movls	r0, #1
   164e4:	2000      	movhi	r0, #0
   164e6:	f85d fb08 	ldr.w	pc, [sp], #8
   164ea:	bf00      	nop

000164ec <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
   164ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   164f0:	f7ff ffc4 	bl	1647c <__aeabi_cdrcmple>
   164f4:	bf34      	ite	cc
   164f6:	2001      	movcc	r0, #1
   164f8:	2000      	movcs	r0, #0
   164fa:	f85d fb08 	ldr.w	pc, [sp], #8
   164fe:	bf00      	nop

00016500 <__aeabi_d2iz>:
__fixdfsi():
   16500:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16508:	d215      	bcs.n	16536 <__aeabi_d2iz+0x36>
   1650a:	d511      	bpl.n	16530 <__aeabi_d2iz+0x30>
   1650c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   16510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16514:	d912      	bls.n	1653c <__aeabi_d2iz+0x3c>
   16516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1651a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1651e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   16522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   16526:	fa23 f002 	lsr.w	r0, r3, r2
   1652a:	bf18      	it	ne
   1652c:	4240      	negne	r0, r0
   1652e:	4770      	bx	lr
   16530:	f04f 0000 	mov.w	r0, #0
   16534:	4770      	bx	lr
   16536:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1653a:	d105      	bne.n	16548 <__aeabi_d2iz+0x48>
   1653c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   16540:	bf08      	it	eq
   16542:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   16546:	4770      	bx	lr
   16548:	f04f 0000 	mov.w	r0, #0
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop

00016550 <__aeabi_d2uiz>:
__fixunsdfsi():
   16550:	004a      	lsls	r2, r1, #1
   16552:	d211      	bcs.n	16578 <__aeabi_d2uiz+0x28>
   16554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   16558:	d211      	bcs.n	1657e <__aeabi_d2uiz+0x2e>
   1655a:	d50d      	bpl.n	16578 <__aeabi_d2uiz+0x28>
   1655c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   16560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   16564:	d40e      	bmi.n	16584 <__aeabi_d2uiz+0x34>
   16566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1656a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1656e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   16572:	fa23 f002 	lsr.w	r0, r3, r2
   16576:	4770      	bx	lr
   16578:	f04f 0000 	mov.w	r0, #0
   1657c:	4770      	bx	lr
   1657e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   16582:	d102      	bne.n	1658a <__aeabi_d2uiz+0x3a>
   16584:	f04f 30ff 	mov.w	r0, #4294967295
   16588:	4770      	bx	lr
   1658a:	f04f 0000 	mov.w	r0, #0
   1658e:	4770      	bx	lr

00016590 <__aeabi_d2f>:
__aeabi_d2f():
   16590:	ea4f 0241 	mov.w	r2, r1, lsl #1
   16594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   16598:	bf24      	itt	cs
   1659a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1659e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   165a2:	d90d      	bls.n	165c0 <__aeabi_d2f+0x30>
   165a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   165a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   165ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   165b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   165b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   165b8:	bf08      	it	eq
   165ba:	f020 0001 	biceq.w	r0, r0, #1
   165be:	4770      	bx	lr
   165c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   165c4:	d121      	bne.n	1660a <__aeabi_d2f+0x7a>
   165c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   165ca:	bfbc      	itt	lt
   165cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   165d0:	4770      	bxlt	lr
   165d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   165d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   165da:	f1c2 0218 	rsb	r2, r2, #24
   165de:	f1c2 0c20 	rsb	ip, r2, #32
   165e2:	fa10 f30c 	lsls.w	r3, r0, ip
   165e6:	fa20 f002 	lsr.w	r0, r0, r2
   165ea:	bf18      	it	ne
   165ec:	f040 0001 	orrne.w	r0, r0, #1
   165f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   165f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   165f8:	fa03 fc0c 	lsl.w	ip, r3, ip
   165fc:	ea40 000c 	orr.w	r0, r0, ip
   16600:	fa23 f302 	lsr.w	r3, r3, r2
   16604:	ea4f 0343 	mov.w	r3, r3, lsl #1
   16608:	e7cc      	b.n	165a4 <__aeabi_d2f+0x14>
   1660a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1660e:	d107      	bne.n	16620 <__aeabi_d2f+0x90>
   16610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   16614:	bf1e      	ittt	ne
   16616:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1661a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1661e:	4770      	bxne	lr
   16620:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   16624:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   16628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1662c:	4770      	bx	lr
   1662e:	bf00      	nop

00016630 <__aeabi_f2lz>:
__aeabi_f2lz():
   16630:	ee07 0a90 	vmov	s15, r0
   16634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   16638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1663c:	b508      	push	{r3, lr}
   1663e:	d403      	bmi.n	16648 <__aeabi_f2lz+0x18>
   16640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16644:	f000 b822 	b.w	1668c <__aeabi_f2ulz>
   16648:	eef1 7a67 	vneg.f32	s15, s15
   1664c:	ee17 0a90 	vmov	r0, s15
   16650:	f000 f81c 	bl	1668c <__aeabi_f2ulz>
   16654:	4240      	negs	r0, r0
   16656:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1665a:	bd08      	pop	{r3, pc}

0001665c <__aeabi_d2lz>:
__aeabi_d2lz():
   1665c:	b538      	push	{r3, r4, r5, lr}
   1665e:	2200      	movs	r2, #0
   16660:	2300      	movs	r3, #0
   16662:	4604      	mov	r4, r0
   16664:	460d      	mov	r5, r1
   16666:	f7ff ff23 	bl	164b0 <__aeabi_dcmplt>
   1666a:	b928      	cbnz	r0, 16678 <__aeabi_d2lz+0x1c>
   1666c:	4620      	mov	r0, r4
   1666e:	4629      	mov	r1, r5
   16670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16674:	f000 b82e 	b.w	166d4 <__aeabi_d2ulz>
   16678:	4620      	mov	r0, r4
   1667a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1667e:	f000 f829 	bl	166d4 <__aeabi_d2ulz>
   16682:	4240      	negs	r0, r0
   16684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   16688:	bd38      	pop	{r3, r4, r5, pc}
   1668a:	bf00      	nop

0001668c <__aeabi_f2ulz>:
__aeabi_f2ulz():
   1668c:	b570      	push	{r4, r5, r6, lr}
   1668e:	f7ff fc49 	bl	15f24 <__aeabi_f2d>
   16692:	2200      	movs	r2, #0
   16694:	4b0d      	ldr	r3, [pc, #52]	; (166cc <__aeabi_f2ulz+0x40>)
   16696:	4604      	mov	r4, r0
   16698:	460d      	mov	r5, r1
   1669a:	f7ff fc97 	bl	15fcc <__aeabi_dmul>
   1669e:	f7ff ff57 	bl	16550 <__aeabi_d2uiz>
   166a2:	4606      	mov	r6, r0
   166a4:	f7ff fc1c 	bl	15ee0 <__aeabi_ui2d>
   166a8:	2200      	movs	r2, #0
   166aa:	4b09      	ldr	r3, [pc, #36]	; (166d0 <__aeabi_f2ulz+0x44>)
   166ac:	f7ff fc8e 	bl	15fcc <__aeabi_dmul>
   166b0:	4602      	mov	r2, r0
   166b2:	460b      	mov	r3, r1
   166b4:	4620      	mov	r0, r4
   166b6:	4629      	mov	r1, r5
   166b8:	f7ff fad4 	bl	15c64 <__aeabi_dsub>
   166bc:	f7ff ff48 	bl	16550 <__aeabi_d2uiz>
   166c0:	2200      	movs	r2, #0
   166c2:	ea42 0400 	orr.w	r4, r2, r0
   166c6:	4620      	mov	r0, r4
   166c8:	4631      	mov	r1, r6
   166ca:	bd70      	pop	{r4, r5, r6, pc}
   166cc:	3df00000 	.word	0x3df00000
   166d0:	41f00000 	.word	0x41f00000

000166d4 <__aeabi_d2ulz>:
__aeabi_d2ulz():
   166d4:	b570      	push	{r4, r5, r6, lr}
   166d6:	2200      	movs	r2, #0
   166d8:	4b0d      	ldr	r3, [pc, #52]	; (16710 <__aeabi_d2ulz+0x3c>)
   166da:	4604      	mov	r4, r0
   166dc:	460d      	mov	r5, r1
   166de:	f7ff fc75 	bl	15fcc <__aeabi_dmul>
   166e2:	f7ff ff35 	bl	16550 <__aeabi_d2uiz>
   166e6:	4606      	mov	r6, r0
   166e8:	f7ff fbfa 	bl	15ee0 <__aeabi_ui2d>
   166ec:	2200      	movs	r2, #0
   166ee:	4b09      	ldr	r3, [pc, #36]	; (16714 <__aeabi_d2ulz+0x40>)
   166f0:	f7ff fc6c 	bl	15fcc <__aeabi_dmul>
   166f4:	4602      	mov	r2, r0
   166f6:	460b      	mov	r3, r1
   166f8:	4620      	mov	r0, r4
   166fa:	4629      	mov	r1, r5
   166fc:	f7ff fab2 	bl	15c64 <__aeabi_dsub>
   16700:	f7ff ff26 	bl	16550 <__aeabi_d2uiz>
   16704:	2200      	movs	r2, #0
   16706:	ea42 0400 	orr.w	r4, r2, r0
   1670a:	4620      	mov	r0, r4
   1670c:	4631      	mov	r1, r6
   1670e:	bd70      	pop	{r4, r5, r6, pc}
   16710:	3df00000 	.word	0x3df00000
   16714:	41f00000 	.word	0x41f00000

00016718 <strcmp>:
$t():
   16718:	f810 2b01 	ldrb.w	r2, [r0], #1
   1671c:	f811 3b01 	ldrb.w	r3, [r1], #1
   16720:	2a01      	cmp	r2, #1
   16722:	bf28      	it	cs
   16724:	429a      	cmpcs	r2, r3
   16726:	d0f7      	beq.n	16718 <strcmp>
   16728:	1ad0      	subs	r0, r2, r3
   1672a:	4770      	bx	lr

0001672c <main>:
main():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:42
//==============================================================================
/*!-----------------------------------------------------------------------------
Main program function.
*/
int main(void)
{
   1672c:	b510      	push	{r4, lr}
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:44
	//Create the appropriate application class object and initialise
	CApp::Application = (PApp)(new COculusHubMain());
   1672e:	2028      	movs	r0, #40	; 0x28
   16730:	f001 ff5a 	bl	185e8 <operator new(unsigned int)>
   16734:	4604      	mov	r4, r0
   16736:	f000 f953 	bl	169e0 <COculusHubMain::COculusHubMain()>
   1673a:	4b04      	ldr	r3, [pc, #16]	; (1674c <main+0x20>)
   1673c:	601c      	str	r4, [r3, #0]
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:47

	//Run the program
	CApp::Application->Run();
   1673e:	6823      	ldr	r3, [r4, #0]
   16740:	681b      	ldr	r3, [r3, #0]
   16742:	4620      	mov	r0, r4
   16744:	4798      	blx	r3
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:51

	//This should never be reached
	return false;
}
   16746:	2000      	movs	r0, #0
   16748:	bd10      	pop	{r4, pc}
   1674a:	bf00      	nop
   1674c:	1fff0314 	.word	0x1fff0314

00016750 <ISR_NMI>:
ISR_NMI():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:64

/*!-----------------------------------------------------------------------------
Function called when a Non-Maskable interrupt occurs
*/
void ISR_NMI()
{
   16750:	4668      	mov	r0, sp
   16752:	f020 0107 	bic.w	r1, r0, #7
   16756:	468d      	mov	sp, r1
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:65
	HALT;
   16758:	beff      	bkpt	0x00ff
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:66
	REBOOT;
   1675a:	4a02      	ldr	r2, [pc, #8]	; (16764 <ISR_NMI+0x14>)
   1675c:	4b02      	ldr	r3, [pc, #8]	; (16768 <ISR_NMI+0x18>)
   1675e:	60da      	str	r2, [r3, #12]
   16760:	e7fe      	b.n	16760 <ISR_NMI+0x10>
   16762:	bf00      	nop
   16764:	05fa0004 	.word	0x05fa0004
   16768:	e000ed00 	.word	0xe000ed00

0001676c <ISR_Hard_Fault>:
ISR_Hard_Fault():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:73

/*!-----------------------------------------------------------------------------
Function called when a Hard Fault interrupt occurs
*/
void ISR_Hard_Fault()
{
   1676c:	4668      	mov	r0, sp
   1676e:	f020 0107 	bic.w	r1, r0, #7
   16772:	468d      	mov	sp, r1
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:74
	HALT;
   16774:	beff      	bkpt	0x00ff
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:75
	REBOOT;
   16776:	4a02      	ldr	r2, [pc, #8]	; (16780 <ISR_Hard_Fault+0x14>)
   16778:	4b02      	ldr	r3, [pc, #8]	; (16784 <ISR_Hard_Fault+0x18>)
   1677a:	60da      	str	r2, [r3, #12]
   1677c:	e7fe      	b.n	1677c <ISR_Hard_Fault+0x10>
   1677e:	bf00      	nop
   16780:	05fa0004 	.word	0x05fa0004
   16784:	e000ed00 	.word	0xe000ed00

00016788 <ISR_Mem_Manage_Fault>:
ISR_Mem_Manage_Fault():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:82

/*!-----------------------------------------------------------------------------
Function called when a Menory Manager Fault interrupt occurs
*/
void ISR_Mem_Manage_Fault()
{
   16788:	4668      	mov	r0, sp
   1678a:	f020 0107 	bic.w	r1, r0, #7
   1678e:	468d      	mov	sp, r1
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:83
	HALT;
   16790:	beff      	bkpt	0x00ff
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:84
	REBOOT;
   16792:	4a02      	ldr	r2, [pc, #8]	; (1679c <ISR_Mem_Manage_Fault+0x14>)
   16794:	4b02      	ldr	r3, [pc, #8]	; (167a0 <ISR_Mem_Manage_Fault+0x18>)
   16796:	60da      	str	r2, [r3, #12]
   16798:	e7fe      	b.n	16798 <ISR_Mem_Manage_Fault+0x10>
   1679a:	bf00      	nop
   1679c:	05fa0004 	.word	0x05fa0004
   167a0:	e000ed00 	.word	0xe000ed00

000167a4 <ISR_Bus_Fault>:
ISR_Bus_Fault():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:91

/*!-----------------------------------------------------------------------------
Function called when a Bus Fault interrupt occurs
*/
void ISR_Bus_Fault()
{
   167a4:	4668      	mov	r0, sp
   167a6:	f020 0107 	bic.w	r1, r0, #7
   167aa:	468d      	mov	sp, r1
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:92
	HALT;
   167ac:	beff      	bkpt	0x00ff
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:93
	REBOOT;
   167ae:	4a02      	ldr	r2, [pc, #8]	; (167b8 <ISR_Bus_Fault+0x14>)
   167b0:	4b02      	ldr	r3, [pc, #8]	; (167bc <ISR_Bus_Fault+0x18>)
   167b2:	60da      	str	r2, [r3, #12]
   167b4:	e7fe      	b.n	167b4 <ISR_Bus_Fault+0x10>
   167b6:	bf00      	nop
   167b8:	05fa0004 	.word	0x05fa0004
   167bc:	e000ed00 	.word	0xe000ed00

000167c0 <ISR_Usage_Fault>:
ISR_Usage_Fault():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:100

/*!-----------------------------------------------------------------------------
Function called when a Usage Fault interrupt occurs
*/
void ISR_Usage_Fault()
{
   167c0:	4668      	mov	r0, sp
   167c2:	f020 0107 	bic.w	r1, r0, #7
   167c6:	468d      	mov	sp, r1
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:101
	HALT;
   167c8:	beff      	bkpt	0x00ff
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/main.cpp:102
	REBOOT;
   167ca:	4a02      	ldr	r2, [pc, #8]	; (167d4 <ISR_Usage_Fault+0x14>)
   167cc:	4b02      	ldr	r3, [pc, #8]	; (167d8 <ISR_Usage_Fault+0x18>)
   167ce:	60da      	str	r2, [r3, #12]
   167d0:	e7fe      	b.n	167d0 <ISR_Usage_Fault+0x10>
   167d2:	bf00      	nop
   167d4:	05fa0004 	.word	0x05fa0004
   167d8:	e000ed00 	.word	0xe000ed00

000167dc <COculusHubMain::DoReboot()>:
_ZN14COculusHubMain8DoRebootEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:36
/*!-----------------------------------------------------------------------------
Function called when a CID_SYS_REBOOT command has been issued, allowing the
system to shut down services.
*/
void COculusHubMain::DoReboot()
{
   167dc:	4770      	bx	lr
   167de:	bf00      	nop

000167e0 <COculusHubMain::FlashProgActionEvent(TFlashProgActionParams*)>:
_ZN14COculusHubMain20FlashProgActionEventEP22TFlashProgActionParams():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:79

/*!-----------------------------------------------------------------------------
Function that handles the action event from the flash programmer
*/
void COculusHubMain::FlashProgActionEvent(PFlashProgActionParams params)
{
   167e0:	4770      	bx	lr
   167e2:	bf00      	nop

000167e4 <COculusHubMain::~COculusHubMain()>:
_ZN14COculusHubMainD2Ev():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:27
	_tmrAlive->SetFrequency(2);
}

/*!-----------------------------------------------------------------------------
*/
COculusHubMain::~COculusHubMain()
   167e4:	b510      	push	{r4, lr}
   167e6:	4604      	mov	r4, r0
   167e8:	4b02      	ldr	r3, [pc, #8]	; (167f4 <COculusHubMain::~COculusHubMain()+0x10>)
   167ea:	6003      	str	r3, [r0, #0]
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:29
{
}
   167ec:	f000 f932 	bl	16a54 <COculusHub::~COculusHub()>
   167f0:	4620      	mov	r0, r4
   167f2:	bd10      	pop	{r4, pc}
   167f4:	0001a160 	.word	0x0001a160

000167f8 <COculusHubMain::~COculusHubMain()>:
_ZN14COculusHubMainD0Ev():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:27
	_tmrAlive->SetFrequency(2);
}

/*!-----------------------------------------------------------------------------
*/
COculusHubMain::~COculusHubMain()
   167f8:	b510      	push	{r4, lr}
   167fa:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:29
{
}
   167fc:	f7ff fff2 	bl	167e4 <COculusHubMain::~COculusHubMain()>
   16800:	4620      	mov	r0, r4
   16802:	f001 ff05 	bl	18610 <operator delete(void*)>
   16806:	4620      	mov	r0, r4
   16808:	bd10      	pop	{r4, pc}
   1680a:	bf00      	nop

0001680c <COculusHubMain::DoRun()>:
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:43

/*!-----------------------------------------------------------------------------
Function called to start the application running
*/
void COculusHubMain::DoRun()
{
   1680c:	b570      	push	{r4, r5, r6, lr}
   1680e:	b098      	sub	sp, #96	; 0x60
   16810:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:45
	//Initialise the WIFI Com port
	_comWifi->Open();
   16812:	6a00      	ldr	r0, [r0, #32]
   16814:	6803      	ldr	r3, [r0, #0]
   16816:	699b      	ldr	r3, [r3, #24]
   16818:	4798      	blx	r3
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:48

	//Output some status information
	COM_PRINT("%s\r\n", CSI_RESET_LINE);
   1681a:	4b64      	ldr	r3, [pc, #400]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   1681c:	681d      	ldr	r5, [r3, #0]
   1681e:	b1b5      	cbz	r5, 1684e <COculusHubMain::DoRun()+0x42>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:48 (discriminator 1)
   16820:	a803      	add	r0, sp, #12
   16822:	4963      	ldr	r1, [pc, #396]	; (169b0 <COculusHubMain::DoRun()+0x1a4>)
   16824:	aa04      	add	r2, sp, #16
   16826:	f001 ff71 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   1682a:	4628      	mov	r0, r5
   1682c:	a903      	add	r1, sp, #12
   1682e:	4a61      	ldr	r2, [pc, #388]	; (169b4 <COculusHubMain::DoRun()+0x1a8>)
   16830:	f000 fbee 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16834:	9803      	ldr	r0, [sp, #12]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   16836:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   16838:	4b5f      	ldr	r3, [pc, #380]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   1683a:	4298      	cmp	r0, r3
   1683c:	d007      	beq.n	1684e <COculusHubMain::DoRun()+0x42>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   1683e:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16840:	1e5a      	subs	r2, r3, #1
   16842:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16844:	2b00      	cmp	r3, #0
   16846:	dc02      	bgt.n	1684e <COculusHubMain::DoRun()+0x42>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   16848:	a911      	add	r1, sp, #68	; 0x44
   1684a:	f001 ff37 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:49
	COM_PRINT("OCULUS SURFACE HUB\r\n");
   1684e:	4b57      	ldr	r3, [pc, #348]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   16850:	681d      	ldr	r5, [r3, #0]
   16852:	b1ad      	cbz	r5, 16880 <COculusHubMain::DoRun()+0x74>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:49 (discriminator 1)
   16854:	a805      	add	r0, sp, #20
   16856:	4959      	ldr	r1, [pc, #356]	; (169bc <COculusHubMain::DoRun()+0x1b0>)
   16858:	aa06      	add	r2, sp, #24
   1685a:	f001 ff57 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   1685e:	4628      	mov	r0, r5
   16860:	a905      	add	r1, sp, #20
   16862:	f000 fbd5 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16866:	9805      	ldr	r0, [sp, #20]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   16868:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   1686a:	4b53      	ldr	r3, [pc, #332]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   1686c:	4298      	cmp	r0, r3
   1686e:	d007      	beq.n	16880 <COculusHubMain::DoRun()+0x74>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16870:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16872:	1e5a      	subs	r2, r3, #1
   16874:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16876:	2b00      	cmp	r3, #0
   16878:	dc02      	bgt.n	16880 <COculusHubMain::DoRun()+0x74>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   1687a:	a912      	add	r1, sp, #72	; 0x48
   1687c:	f001 ff1e 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:50
	COM_PRINT("Copyright (c) 2017 Blueprint Subsea. All rights reserved.\r\n");
   16880:	4b4a      	ldr	r3, [pc, #296]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   16882:	681d      	ldr	r5, [r3, #0]
   16884:	b1ad      	cbz	r5, 168b2 <COculusHubMain::DoRun()+0xa6>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:50 (discriminator 1)
   16886:	a807      	add	r0, sp, #28
   16888:	494d      	ldr	r1, [pc, #308]	; (169c0 <COculusHubMain::DoRun()+0x1b4>)
   1688a:	aa08      	add	r2, sp, #32
   1688c:	f001 ff3e 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16890:	4628      	mov	r0, r5
   16892:	a907      	add	r1, sp, #28
   16894:	f000 fbbc 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16898:	9807      	ldr	r0, [sp, #28]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   1689a:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   1689c:	4b46      	ldr	r3, [pc, #280]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   1689e:	4298      	cmp	r0, r3
   168a0:	d007      	beq.n	168b2 <COculusHubMain::DoRun()+0xa6>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   168a2:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   168a4:	1e5a      	subs	r2, r3, #1
   168a6:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   168a8:	2b00      	cmp	r3, #0
   168aa:	dc02      	bgt.n	168b2 <COculusHubMain::DoRun()+0xa6>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   168ac:	a913      	add	r1, sp, #76	; 0x4c
   168ae:	f001 ff05 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:51
	COM_PRINT("For further information, visit http://www.blueprintsubsea.com\r\n");
   168b2:	4b3e      	ldr	r3, [pc, #248]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   168b4:	681d      	ldr	r5, [r3, #0]
   168b6:	b1ad      	cbz	r5, 168e4 <COculusHubMain::DoRun()+0xd8>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:51 (discriminator 1)
   168b8:	a809      	add	r0, sp, #36	; 0x24
   168ba:	4942      	ldr	r1, [pc, #264]	; (169c4 <COculusHubMain::DoRun()+0x1b8>)
   168bc:	aa0a      	add	r2, sp, #40	; 0x28
   168be:	f001 ff25 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   168c2:	4628      	mov	r0, r5
   168c4:	a909      	add	r1, sp, #36	; 0x24
   168c6:	f000 fba3 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   168ca:	9809      	ldr	r0, [sp, #36]	; 0x24
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   168cc:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   168ce:	4b3a      	ldr	r3, [pc, #232]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   168d0:	4298      	cmp	r0, r3
   168d2:	d007      	beq.n	168e4 <COculusHubMain::DoRun()+0xd8>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   168d4:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   168d6:	1e5a      	subs	r2, r3, #1
   168d8:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   168da:	2b00      	cmp	r3, #0
   168dc:	dc02      	bgt.n	168e4 <COculusHubMain::DoRun()+0xd8>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   168de:	a914      	add	r1, sp, #80	; 0x50
   168e0:	f001 feec 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:52
	COM_PRINT("v%u.%u.%u (%s)", FIRMWARE_VERSION_MAJOR, FIRMWARE_VERSION_MINOR, FIRMWARE_VERSION_BUILD, FIRMWARE_DATE);
   168e4:	4b31      	ldr	r3, [pc, #196]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   168e6:	681d      	ldr	r5, [r3, #0]
   168e8:	b1dd      	cbz	r5, 16922 <COculusHubMain::DoRun()+0x116>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:52 (discriminator 1)
   168ea:	a80b      	add	r0, sp, #44	; 0x2c
   168ec:	4936      	ldr	r1, [pc, #216]	; (169c8 <COculusHubMain::DoRun()+0x1bc>)
   168ee:	aa0c      	add	r2, sp, #48	; 0x30
   168f0:	f001 ff0c 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   168f4:	231f      	movs	r3, #31
   168f6:	9300      	str	r3, [sp, #0]
   168f8:	4b34      	ldr	r3, [pc, #208]	; (169cc <COculusHubMain::DoRun()+0x1c0>)
   168fa:	9301      	str	r3, [sp, #4]
   168fc:	4628      	mov	r0, r5
   168fe:	a90b      	add	r1, sp, #44	; 0x2c
   16900:	2201      	movs	r2, #1
   16902:	2300      	movs	r3, #0
   16904:	f000 fb84 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16908:	980b      	ldr	r0, [sp, #44]	; 0x2c
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   1690a:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   1690c:	4b2a      	ldr	r3, [pc, #168]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   1690e:	4298      	cmp	r0, r3
   16910:	d007      	beq.n	16922 <COculusHubMain::DoRun()+0x116>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16912:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16914:	1e5a      	subs	r2, r3, #1
   16916:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16918:	2b00      	cmp	r3, #0
   1691a:	dc02      	bgt.n	16922 <COculusHubMain::DoRun()+0x116>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   1691c:	a915      	add	r1, sp, #84	; 0x54
   1691e:	f001 fecd 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:53
	DEBUG_PRINT(" [DEBUG]");
   16922:	4b22      	ldr	r3, [pc, #136]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   16924:	681d      	ldr	r5, [r3, #0]
   16926:	b1ad      	cbz	r5, 16954 <COculusHubMain::DoRun()+0x148>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:53 (discriminator 1)
   16928:	a80d      	add	r0, sp, #52	; 0x34
   1692a:	4929      	ldr	r1, [pc, #164]	; (169d0 <COculusHubMain::DoRun()+0x1c4>)
   1692c:	aa0e      	add	r2, sp, #56	; 0x38
   1692e:	f001 feed 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16932:	4628      	mov	r0, r5
   16934:	a90d      	add	r1, sp, #52	; 0x34
   16936:	f000 fb6b 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   1693a:	980d      	ldr	r0, [sp, #52]	; 0x34
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   1693c:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   1693e:	4b1e      	ldr	r3, [pc, #120]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   16940:	4298      	cmp	r0, r3
   16942:	d007      	beq.n	16954 <COculusHubMain::DoRun()+0x148>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16944:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16946:	1e5a      	subs	r2, r3, #1
   16948:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   1694a:	2b00      	cmp	r3, #0
   1694c:	dc02      	bgt.n	16954 <COculusHubMain::DoRun()+0x148>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   1694e:	a916      	add	r1, sp, #88	; 0x58
   16950:	f001 feb4 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:54
	COM_PRINT("\r\n");
   16954:	4b15      	ldr	r3, [pc, #84]	; (169ac <COculusHubMain::DoRun()+0x1a0>)
   16956:	681d      	ldr	r5, [r3, #0]
   16958:	b1ad      	cbz	r5, 16986 <COculusHubMain::DoRun()+0x17a>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:54 (discriminator 1)
   1695a:	a80f      	add	r0, sp, #60	; 0x3c
   1695c:	491d      	ldr	r1, [pc, #116]	; (169d4 <COculusHubMain::DoRun()+0x1c8>)
   1695e:	aa10      	add	r2, sp, #64	; 0x40
   16960:	f001 fed4 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16964:	4628      	mov	r0, r5
   16966:	a90f      	add	r1, sp, #60	; 0x3c
   16968:	f000 fb52 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   1696c:	980f      	ldr	r0, [sp, #60]	; 0x3c
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   1696e:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   16970:	4b11      	ldr	r3, [pc, #68]	; (169b8 <COculusHubMain::DoRun()+0x1ac>)
   16972:	4298      	cmp	r0, r3
   16974:	d007      	beq.n	16986 <COculusHubMain::DoRun()+0x17a>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16976:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16978:	1e5a      	subs	r2, r3, #1
   1697a:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   1697c:	2b00      	cmp	r3, #0
   1697e:	dc02      	bgt.n	16986 <COculusHubMain::DoRun()+0x17a>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   16980:	a917      	add	r1, sp, #92	; 0x5c
   16982:	f001 fe9b 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN14COculusHubMain5DoRunEv():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:59

	//_comWifi->Print("Send the number %u to the wifi\r\n", x);

	//Start the Alive Heartbeat LED timer
	_tmrAlive->Reset();
   16986:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16988:	f001 fdb8 	bl	184fc <CTickTimer::Reset()>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:70
		//_cmd->Service();


		//Poll the alive timer, and flash the heartbeat LED
		if(_tmrAlive->Poll()) {
			MCU_LED_TOGGLE;
   1698c:	4e12      	ldr	r6, [pc, #72]	; (169d8 <COculusHubMain::DoRun()+0x1cc>)
   1698e:	f44f 7580 	mov.w	r5, #256	; 0x100
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:62

	//Start the Alive Heartbeat LED timer
	_tmrAlive->Reset();

	//Start the main loop
	while(_run) {
   16992:	e004      	b.n	1699e <COculusHubMain::DoRun()+0x192>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:69
		//Service the command processor
		//_cmd->Service();


		//Poll the alive timer, and flash the heartbeat LED
		if(_tmrAlive->Poll()) {
   16994:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16996:	f001 fdbb 	bl	18510 <CTickTimer::Poll()>
   1699a:	b100      	cbz	r0, 1699e <COculusHubMain::DoRun()+0x192>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:70
			MCU_LED_TOGGLE;
   1699c:	60f5      	str	r5, [r6, #12]
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:62 (discriminator 1)

	//Start the Alive Heartbeat LED timer
	_tmrAlive->Reset();

	//Start the main loop
	while(_run) {
   1699e:	7f23      	ldrb	r3, [r4, #28]
   169a0:	f013 0fff 	tst.w	r3, #255	; 0xff
   169a4:	d1f6      	bne.n	16994 <COculusHubMain::DoRun()+0x188>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:73
		//Poll the alive timer, and flash the heartbeat LED
		if(_tmrAlive->Poll()) {
			MCU_LED_TOGGLE;
		}
	}
}
   169a6:	b018      	add	sp, #96	; 0x60
   169a8:	bd70      	pop	{r4, r5, r6, pc}
   169aa:	bf00      	nop
   169ac:	1fff00bc 	.word	0x1fff00bc
   169b0:	0001a180 	.word	0x0001a180
   169b4:	0001a188 	.word	0x0001a188
   169b8:	1fff031c 	.word	0x1fff031c
   169bc:	0001a190 	.word	0x0001a190
   169c0:	0001a1a8 	.word	0x0001a1a8
   169c4:	0001a1e4 	.word	0x0001a1e4
   169c8:	0001a224 	.word	0x0001a224
   169cc:	0001a234 	.word	0x0001a234
   169d0:	0001a240 	.word	0x0001a240
   169d4:	0001a24c 	.word	0x0001a24c
   169d8:	400ff080 	.word	0x400ff080
$d():
   169dc:	00000000 	.word	0x00000000

000169e0 <COculusHubMain::COculusHubMain()>:
_ZN14COculusHubMainC2Ev():
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:11
//COculusHubMain
//==============================================================================
/*!-----------------------------------------------------------------------------
Constructor that initialises the hardware and operating systems
*/
COculusHubMain::COculusHubMain()
   169e0:	b538      	push	{r3, r4, r5, lr}
   169e2:	4604      	mov	r4, r0
   169e4:	f000 f9b8 	bl	16d58 <COculusHub::COculusHub()>
   169e8:	4b17      	ldr	r3, [pc, #92]	; (16a48 <COculusHubMain::COculusHubMain()+0x68>)
   169ea:	6023      	str	r3, [r4, #0]
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:14
{
	//Setup the WIFI control Com Port
	_comWifi = new CComUart(UART_WIFICTRL, UART_WIFICTRL_RX_BUFFER, UART_WIFICTRL_TX_BUFFER);
   169ec:	201c      	movs	r0, #28
   169ee:	f001 fdfb 	bl	185e8 <operator new(unsigned int)>
   169f2:	4605      	mov	r5, r0
   169f4:	2101      	movs	r1, #1
   169f6:	2240      	movs	r2, #64	; 0x40
   169f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   169fc:	f000 ffce 	bl	1799c <CComUart::CComUart(unsigned char, unsigned int, unsigned int)>
   16a00:	6225      	str	r5, [r4, #32]
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:15
	_comWifi->Close();
   16a02:	682b      	ldr	r3, [r5, #0]
   16a04:	685b      	ldr	r3, [r3, #4]
   16a06:	4628      	mov	r0, r5
   16a08:	4798      	blx	r3
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:16
	_comWifi->SetBaudRate(UART_WIFICTRL_BAUD);
   16a0a:	6a20      	ldr	r0, [r4, #32]
   16a0c:	210c      	movs	r1, #12
   16a0e:	f000 fc3d 	bl	1728c <CComUart::SetBaudRate(EUartBaud)>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:17
	_comWifi->SetParity(PARITY_NONE);
   16a12:	6a20      	ldr	r0, [r4, #32]
   16a14:	2100      	movs	r1, #0
   16a16:	f000 fc3d 	bl	17294 <CComUart::SetParity(EUartParity)>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:20

	//Create a timer for the Heartbeat Alive LED
	_tmrAlive = new CTickTimer();
   16a1a:	2020      	movs	r0, #32
   16a1c:	f001 fde4 	bl	185e8 <operator new(unsigned int)>
   16a20:	4605      	mov	r5, r0
   16a22:	2100      	movs	r1, #0
   16a24:	f001 fd5a 	bl	184dc <CTickTimer::CTickTimer(bool)>
   16a28:	6265      	str	r5, [r4, #36]	; 0x24
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:21
	_tmrAlive->SetEnabled(true);
   16a2a:	4628      	mov	r0, r5
   16a2c:	2101      	movs	r1, #1
   16a2e:	f001 fdbd 	bl	185ac <CTickTimer::SetEnabled(bool)>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:22
	_tmrAlive->SetFrequency(2);
   16a32:	6a60      	ldr	r0, [r4, #36]	; 0x24
   16a34:	ed9f 0b02 	vldr	d0, [pc, #8]	; 16a40 <COculusHubMain::COculusHubMain()+0x60>
   16a38:	f001 fdba 	bl	185b0 <CTickTimer::SetFrequency(double)>
C:\Users\s.morris\OculusHub\OculusHubMain\Debug/../src/oculushub_main.cpp:23
}
   16a3c:	4620      	mov	r0, r4
   16a3e:	bd38      	pop	{r3, r4, r5, pc}
   16a40:	00000000 	.word	0x00000000
   16a44:	40000000 	.word	0x40000000
   16a48:	0001a160 	.word	0x0001a160
$t():
   16a4c:	f3af 8000 	nop.w

00016a50 <ISR_Default>:
ISR_Default():
C:/Users/s.morris/OculusHub/OculusHub/src/cpu.c:187
Define the default implementation of the ISR that executes for all undefined
ISR table vectors.
*/
void ISR_Default()
{
	HALT;
   16a50:	beff      	bkpt	0x00ff
   16a52:	4770      	bx	lr

00016a54 <COculusHub::~COculusHub()>:
_ZN10COculusHubD2Ev():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:86
	_run = true;
}

/*!-----------------------------------------------------------------------------
*/
COculusHub::~COculusHub()
   16a54:	4b01      	ldr	r3, [pc, #4]	; (16a5c <COculusHub::~COculusHub()+0x8>)
   16a56:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:88
{
}
   16a58:	4770      	bx	lr
   16a5a:	bf00      	nop
   16a5c:	0001a2c0 	.word	0x0001a2c0

00016a60 <COculusHub::DoInitialiseGpio()>:
_ZN10COculusHub16DoInitialiseGpioEv():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:392

/*!-----------------------------------------------------------------------------
Function that initialises the GPIO pins and clocks
*/
void COculusHub::DoInitialiseGpio()
{
   16a60:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:397

//### TODO - /*MUST remap the output ofSW.RST and  WIFI.GPIO_0 to digital pins*/

	// Turn on all the port clocks before we attempt to set up the registers
	SET_BITS(SIM->SCGC5, SIM_SCGC5_PORTE_MASK | SIM_SCGC5_PORTD_MASK | SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTA_MASK);
   16a64:	4a55      	ldr	r2, [pc, #340]	; (16bbc <COculusHub::DoInitialiseGpio()+0x15c>)
   16a66:	f241 0338 	movw	r3, #4152	; 0x1038
   16a6a:	58d1      	ldr	r1, [r2, r3]
   16a6c:	f441 5178 	orr.w	r1, r1, #15872	; 0x3e00
   16a70:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:401

	//--------------------------------------------------------------------------
	//Configure Port A GPIO...
	PORTA->PCR[0] = PORT_PCR_MUX(7); 											//JTAG_TCLK(I)
   16a72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
   16a76:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   16a7a:	6013      	str	r3, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:402
	PORTA->PCR[1] = PORT_PCR_MUX(7);											//JTAG_TDI(I)
   16a7c:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:403
	PORTA->PCR[2] = PORT_PCR_MUX(7);											//JTAG_TDO(O)
   16a7e:	6093      	str	r3, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:404
	PORTA->PCR[3] = PORT_PCR_MUX(7);											//JTAG_TMD(I)
   16a80:	60d3      	str	r3, [r2, #12]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:405
	PORTA->PCR[5] = PORT_PCR_MUX(4);											//RMII0_RXER
   16a82:	f44f 6080 	mov.w	r0, #1024	; 0x400
   16a86:	6150      	str	r0, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:406
	PORTA->PCR[12] = PORT_PCR_MUX(4);											//RMII0_RXD1
   16a88:	6310      	str	r0, [r2, #48]	; 0x30
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:407
	PORTA->PCR[13] = PORT_PCR_MUX(4);											//RMII0_RXD0
   16a8a:	6350      	str	r0, [r2, #52]	; 0x34
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:408
	PORTA->PCR[14] = PORT_PCR_MUX(4);											//RMII0_CRS_DV
   16a8c:	6390      	str	r0, [r2, #56]	; 0x38
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:409
	PORTA->PCR[15] = PORT_PCR_MUX(4);											//RMII0_TXEN
   16a8e:	63d0      	str	r0, [r2, #60]	; 0x3c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:410
	PORTA->PCR[16] = PORT_PCR_MUX(4);											//RMII0_TXD0
   16a90:	6410      	str	r0, [r2, #64]	; 0x40
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:411
	PORTA->PCR[17] = PORT_PCR_MUX(4);											//RMII0_TXD1
   16a92:	6450      	str	r0, [r2, #68]	; 0x44
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:412
	PORTA->PCR[18] = PORT_PCR_MUX(0);											//EXTAL0(I) : 50MHz
   16a94:	2400      	movs	r4, #0
   16a96:	6494      	str	r4, [r2, #72]	; 0x48
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:413
	PORTA->PCR[19] = PORT_PCR_MUX(1);											//IO(O) : "DSL.LED_R#"
   16a98:	f44f 7380 	mov.w	r3, #256	; 0x100
   16a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:414
	PORTA->PCR[24] = PORT_PCR_MUX(1);											//IO(O) : "SON.LED_R#"
   16a9e:	6613      	str	r3, [r2, #96]	; 0x60
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:415
	PORTA->PCR[25] = PORT_PCR_MUX(1);											//IO(O) : "SON.LED_G#"
   16aa0:	6653      	str	r3, [r2, #100]	; 0x64
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:416
	PORTA->PCR[26] = PORT_PCR_MUX(1);											//IO(O) : "SON.LED_B#"
   16aa2:	6693      	str	r3, [r2, #104]	; 0x68
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:417
	PORTA->PCR[27] = PORT_PCR_MUX(1);											//IO(I) : "DSL.PWR" (ext pullup)
   16aa4:	66d3      	str	r3, [r2, #108]	; 0x6c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:418
	PORTA->PCR[28] = PORT_PCR_MUX(1);											//IO(I) : "DSL.ETH" (ext pullup)
   16aa6:	6713      	str	r3, [r2, #112]	; 0x70
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:419
	PORTA->PCR[29] = PORT_PCR_MUX(1);											//IO(I) : "DSL.LINK" (ext pullup)
   16aa8:	6753      	str	r3, [r2, #116]	; 0x74
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:422

	//Configure Port A Default output levels...
	PTA->PDOR = 0;
   16aaa:	f502 2236 	add.w	r2, r2, #745472	; 0xb6000
   16aae:	6014      	str	r4, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:423
	DSL_LED_RED(false);
   16ab0:	f44f 2600 	mov.w	r6, #524288	; 0x80000
   16ab4:	6056      	str	r6, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:424
	SON_LED_RED(false);
   16ab6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   16aba:	6051      	str	r1, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:425
	SON_LED_GREEN(false);
   16abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   16ac0:	6051      	str	r1, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:426
	SON_LED_BLUE(false);
   16ac2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   16ac6:	6051      	str	r1, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:429

	//Configure Port A Data Direction Register (true = output, false = input)
	PTA->PDDR = BIT(19) | BIT(24) | BIT(25) | BIT(26);
   16ac8:	f04f 61e1 	mov.w	r1, #117964800	; 0x7080000
   16acc:	6151      	str	r1, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:433

	//--------------------------------------------------------------------------
	//Configure Port B GPIO...
	PORTB->PCR[0] = PORT_PCR_MUX(1);											//IO(O) : "DSL.LED_G#"
   16ace:	f5a2 2235 	sub.w	r2, r2, #741376	; 0xb5000
   16ad2:	6013      	str	r3, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:434
	PORTB->PCR[1] = PORT_PCR_MUX(1);											//IO(O) : "DSL.LED_B#"
   16ad4:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:435
	PORTB->PCR[2] = PORT_PCR_MUX(2);											//I2C0_SCL : "AUX.I2C.SCL"
   16ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
   16ada:	6091      	str	r1, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:436
	PORTB->PCR[3] = PORT_PCR_MUX(2);											//I2C0_SDA : "AUX.I2C.SDA"
   16adc:	60d1      	str	r1, [r2, #12]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:437
	PORTB->PCR[4] = PORT_PCR_MUX(1);											//IO(O) : "AUX.IO_0"
   16ade:	6113      	str	r3, [r2, #16]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:438
	PORTB->PCR[5] = PORT_PCR_MUX(1);											//IO(O) : "AUX.IO_1"
   16ae0:	6153      	str	r3, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:439
	PORTB->PCR[10] = PORT_PCR_MUX(3);											//UART3_RX(I) : "AUX.RXD"
   16ae2:	f44f 7540 	mov.w	r5, #768	; 0x300
   16ae6:	6295      	str	r5, [r2, #40]	; 0x28
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:440
	PORTB->PCR[11] = PORT_PCR_MUX(3);											//UART3_TX(O) : "AUX.TXD"
   16ae8:	62d5      	str	r5, [r2, #44]	; 0x2c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:443

	//Configure Port B Default output levels...
	PTB->PDOR = 0;
   16aea:	f502 2235 	add.w	r2, r2, #741376	; 0xb5000
   16aee:	3240      	adds	r2, #64	; 0x40
   16af0:	6014      	str	r4, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:444
	DSL_LED_GREEN(false);
   16af2:	2701      	movs	r7, #1
   16af4:	6057      	str	r7, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:445
	DSL_LED_BLUE(false);
   16af6:	2702      	movs	r7, #2
   16af8:	6057      	str	r7, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:446
	AUX_IO0(false);
   16afa:	f04f 0c10 	mov.w	ip, #16
   16afe:	f8c2 c008 	str.w	ip, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:447
	AUX_IO1(false);
   16b02:	2720      	movs	r7, #32
   16b04:	6097      	str	r7, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:450

	//Configure Port B Data Direction Register (true = output, false = input)
	PTB->PDDR = BIT(0) | BIT(1) | BIT(4) | BIT(5);
   16b06:	f04f 0833 	mov.w	r8, #51	; 0x33
   16b0a:	f8c2 8014 	str.w	r8, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:454

	//--------------------------------------------------------------------------
	//Configure Port C GPIO...
	PORTC->PCR[2] = PORT_PCR_MUX(2);											//SPI0_PCS2 : "SPI.CS.HDR#"
   16b0e:	4a2c      	ldr	r2, [pc, #176]	; (16bc0 <COculusHub::DoInitialiseGpio()+0x160>)
   16b10:	6091      	str	r1, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:455
	PORTC->PCR[3] = PORT_PCR_MUX(2);											//SPI0_PCS1 : "SPI.CS.SW#" (external pullup)
   16b12:	60d1      	str	r1, [r2, #12]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:456
	PORTC->PCR[4] = PORT_PCR_MUX(2);											//SPI0_PCS0 : "SPI.CS.CFG#"
   16b14:	6111      	str	r1, [r2, #16]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:457
	PORTC->PCR[5] = PORT_PCR_MUX(2);											//SPI0_SCK	: "SPI.SCK" (external pullup)
   16b16:	6151      	str	r1, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:458
	PORTC->PCR[6] = PORT_PCR_MUX(2);											//SPI0_SOUT	: "SPI.SDO" (external pullup)
   16b18:	6191      	str	r1, [r2, #24]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:459
	PORTC->PCR[7] = PORT_PCR_MUX(2);											//SPI0_SIN	: "SPI.SDI" (external pullup)
   16b1a:	61d1      	str	r1, [r2, #28]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:460
	PORTC->PCR[8] = PORT_PCR_MUX(1);											//IO(O)	: "MCU_LED_HB"
   16b1c:	6213      	str	r3, [r2, #32]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:461
	PORTC->PCR[17] = PORT_PCR_MUX(1);											//IO(I)	: "SW.INTR#"
   16b1e:	6453      	str	r3, [r2, #68]	; 0x44
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:462
	PORTC->PCR[19] = PORT_PCR_MUX(1);											//IO(O)	: "SW.PWRDN#"
   16b20:	64d3      	str	r3, [r2, #76]	; 0x4c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:465

	//Configure Port A Default output levels...
	PTC->PDOR = 0;
   16b22:	f502 2234 	add.w	r2, r2, #737280	; 0xb4000
   16b26:	3280      	adds	r2, #128	; 0x80
   16b28:	6014      	str	r4, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:466
	MCU_LED(false);
   16b2a:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:467
	LANSW_POWERDOWN(false);
   16b2c:	6056      	str	r6, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:470

	//Configure Port C Data Direction Register (true = output, false = input)
	PTC->PDDR = BIT(8) | BIT(19);
   16b2e:	f506 7680 	add.w	r6, r6, #256	; 0x100
   16b32:	6156      	str	r6, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:474

	//--------------------------------------------------------------------------
	//Configure Port D GPIO...
	PORTD->PCR[6] = PORT_PCR_MUX(3); 											//UART0_RX(I) : "WIFI.COM1.RXD"
   16b34:	4a23      	ldr	r2, [pc, #140]	; (16bc4 <COculusHub::DoInitialiseGpio()+0x164>)
   16b36:	6195      	str	r5, [r2, #24]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:475
	PORTD->PCR[7] = PORT_PCR_MUX(3); 											//UART0_TX(O) : "WIFI.COM1.TXD"
   16b38:	61d5      	str	r5, [r2, #28]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:476
	PORTD->PCR[8] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;		//IO(I) : "MCU.CFG1" (int pullup enabled)
   16b3a:	f240 1603 	movw	r6, #259	; 0x103
   16b3e:	6216      	str	r6, [r2, #32]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:477
	PORTD->PCR[9] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;		//IO(I) : "MCU.CFG2" (int pullup enabled)
   16b40:	6256      	str	r6, [r2, #36]	; 0x24
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:478
	PORTD->PCR[10] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;		//IO(I) : "MCU.CFG3" (int pullup enabled)
   16b42:	6296      	str	r6, [r2, #40]	; 0x28
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:479
	PORTD->PCR[11] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;		//IO(I) : "MCU.CFG4" (int pullup enabled)
   16b44:	62d6      	str	r6, [r2, #44]	; 0x2c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:480
	PORTD->PCR[12] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK	| PORT_PCR_PS_MASK;		//IO(I) : "WIFI.LINK#" (int pullup enabled)
   16b46:	6316      	str	r6, [r2, #48]	; 0x30
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:481
	PORTD->PCR[13] = PORT_PCR_MUX(1);											//IO(O) : "WIFI.RST#"
   16b48:	6353      	str	r3, [r2, #52]	; 0x34
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:482
	PORTD->PCR[14] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;		//IO(I) : "WIFI.READY#" (int pullup enabled)
   16b4a:	6396      	str	r6, [r2, #56]	; 0x38
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:483
	PORTD->PCR[15] = PORT_PCR_MUX(1);											//IO(O) : "WIFI.RELOAD#"
   16b4c:	63d3      	str	r3, [r2, #60]	; 0x3c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:486

	//Configure Port D Default output levels...
	PTD->PDOR = 0;
   16b4e:	f502 2233 	add.w	r2, r2, #733184	; 0xb3000
   16b52:	32c0      	adds	r2, #192	; 0xc0
   16b54:	6014      	str	r4, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:487
	WIFI_RELOAD(false);
   16b56:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16b5a:	6056      	str	r6, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:488
	WIFI_RESET(false);
   16b5c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
   16b60:	6056      	str	r6, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:491

	//Configure Port D Data Direction Register (true = output, false = input)
	PTD->PDDR = BIT(13) | BIT(15);
   16b62:	f44f 4620 	mov.w	r6, #40960	; 0xa000
   16b66:	6156      	str	r6, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:495

	//--------------------------------------------------------------------------
	//Configure Port E GPIO...
	PORTE->PCR[0] = PORT_PCR_MUX(3);											//UART1_TX(O) : "WIFI.COM2.TXD"
   16b68:	4a17      	ldr	r2, [pc, #92]	; (16bc8 <COculusHub::DoInitialiseGpio()+0x168>)
   16b6a:	6015      	str	r5, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:496
	PORTE->PCR[1] = PORT_PCR_MUX(3);											//UART1_RX(I) : "WIFI.COM2.RXD"
   16b6c:	6055      	str	r5, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:497
	PORTE->PCR[2] = PORT_PCR_MUX(1);											//IO(O)	: "WIFI.GPIO_1"
   16b6e:	6093      	str	r3, [r2, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:498
	PORTE->PCR[4] = PORT_PCR_MUX(1);											//IO(O) : "WIFI.LED_R#"
   16b70:	6113      	str	r3, [r2, #16]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:499
	PORTE->PCR[5] = PORT_PCR_MUX(1);											//IO(O) : "WIFI.LED_G#"
   16b72:	6153      	str	r3, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:500
	PORTE->PCR[6] = PORT_PCR_MUX(1);											//IO(O) : "WIFI.LED_B#"
   16b74:	6193      	str	r3, [r2, #24]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:501
	PORTE->PCR[7] = PORT_PCR_MUX(1);											//IO(O) : "PC.LED_R#"
   16b76:	61d3      	str	r3, [r2, #28]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:502
	PORTE->PCR[8] = PORT_PCR_MUX(1);											//IO(O) : "PC.LED_R#"
   16b78:	6213      	str	r3, [r2, #32]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:503
	PORTE->PCR[9] = PORT_PCR_MUX(1);											//IO(O) : "PC.LED_R#"
   16b7a:	6253      	str	r3, [r2, #36]	; 0x24
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:504
	PORTE->PCR[10] = PORT_PCR_MUX(1);											//IO(O) : "PWR.LED_R#"
   16b7c:	6293      	str	r3, [r2, #40]	; 0x28
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:505
	PORTE->PCR[11] = PORT_PCR_MUX(1);											//IO(O) : "PWR.LED_R#"
   16b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:506
	PORTE->PCR[12] = PORT_PCR_MUX(1);											//IO(O) : "PWR.LED_R#"
   16b80:	6313      	str	r3, [r2, #48]	; 0x30
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:509

	//Configure Port E Default output levels...
	PTE->PDOR = 0;
   16b82:	f502 2232 	add.w	r2, r2, #729088	; 0xb2000
   16b86:	f502 7280 	add.w	r2, r2, #256	; 0x100
   16b8a:	6014      	str	r4, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:510
	WIFI_LED_RED(false);
   16b8c:	f8c2 c004 	str.w	ip, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:511
	WIFI_LED_GREEN(false);
   16b90:	6057      	str	r7, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:512
	WIFI_LED_BLUE(false);
   16b92:	2440      	movs	r4, #64	; 0x40
   16b94:	6054      	str	r4, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:513
	NET_LED_RED(false);
   16b96:	2480      	movs	r4, #128	; 0x80
   16b98:	6054      	str	r4, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:514
	NET_LED_GREEN(false);
   16b9a:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:515
	NET_LED_BLUE(false);
   16b9c:	6051      	str	r1, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:516
	PWR_LED_RED(false);
   16b9e:	6050      	str	r0, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:517
	PWR_LED_GREEN(false);
   16ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   16ba4:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:518
	PWR_LED_BLUE(false);
   16ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16baa:	6053      	str	r3, [r2, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:521

	//Configure Port E Data Direction Register (true = output, false = input)
	PTE->PDDR = BIT(2) | BIT(4) | BIT(5) | BIT(6) | BIT(7) | BIT(8) | BIT(9) | BIT(10) | BIT (11) | BIT(12);
   16bac:	f641 73f4 	movw	r3, #8180	; 0x1ff4
   16bb0:	6153      	str	r3, [r2, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:526



	//### On Rev1 hardware, LANSW.RESET cannot be driven - the line below implements a NOP
	LANSW_RESET(false);
   16bb2:	bf00      	nop
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:527
}
   16bb4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   16bb8:	4770      	bx	lr
   16bba:	bf00      	nop
   16bbc:	40047000 	.word	0x40047000
   16bc0:	4004b000 	.word	0x4004b000
   16bc4:	4004c000 	.word	0x4004c000
   16bc8:	4004d000 	.word	0x4004d000

00016bcc <COculusHub::FlashProgActionEvent(TFlashProgActionParams*)>:
_ZN10COculusHub20FlashProgActionEventEP22TFlashProgActionParams():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:533

/*!-----------------------------------------------------------------------------
Function that handles the action event from the flash programmer
*/
void COculusHub::FlashProgActionEvent(PFlashProgActionParams params)
{
   16bcc:	4770      	bx	lr
   16bce:	bf00      	nop

00016bd0 <CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()>:
_ZN10CDelegate1IvP22TFlashProgActionParamsED2Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:164
*/
template <typename ReturnT, typename Param1T>
class CDelegate1
{
	public:
		virtual ~CDelegate1() {};
   16bd0:	4b01      	ldr	r3, [pc, #4]	; (16bd8 <CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()+0x8>)
   16bd2:	6003      	str	r3, [r0, #0]
   16bd4:	4770      	bx	lr
   16bd6:	bf00      	nop
   16bd8:	0001a258 	.word	0x0001a258

00016bdc <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()>:
~CDelegate1():
   16bdc:	4b01      	ldr	r3, [pc, #4]	; (16be4 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()+0x8>)
   16bde:	6003      	str	r3, [r0, #0]
_ZN16CDelegateMethod1I10COculusHubvP22TFlashProgActionParamsED2Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:173
/*!-----------------------------------------------------------------------------
Delegate a class that uses templates to create an implementation for each type
of handler needed for methods in different derived Listener classes
*/
template <typename ListenerT, typename ReturnT, typename Param1T>
class CDelegateMethod1 : public CDelegate1<ReturnT, Param1T>
   16be0:	4770      	bx	lr
   16be2:	bf00      	nop
   16be4:	0001a258 	.word	0x0001a258

00016be8 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::Call(TFlashProgActionParams*)>:
_ZN16CDelegateMethod1I10COculusHubvP22TFlashProgActionParamsE4CallES2_():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:185
	public:
		//Constructor
		CDelegateMethod1(ListenerT* object, PMember member) : _object(object), _member(member) { }		

		//Notification function
		ReturnT Call(Param1T param) { return (_object->*_member)(param); }	
   16be8:	b510      	push	{r4, lr}
   16bea:	68c3      	ldr	r3, [r0, #12]
   16bec:	f013 0f01 	tst.w	r3, #1
   16bf0:	d101      	bne.n	16bf6 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::Call(TFlashProgActionParams*)+0xe>
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:185 (discriminator 1)
   16bf2:	6882      	ldr	r2, [r0, #8]
   16bf4:	e004      	b.n	16c00 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::Call(TFlashProgActionParams*)+0x18>
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:185 (discriminator 2)
   16bf6:	105c      	asrs	r4, r3, #1
   16bf8:	6842      	ldr	r2, [r0, #4]
   16bfa:	5914      	ldr	r4, [r2, r4]
   16bfc:	6882      	ldr	r2, [r0, #8]
   16bfe:	58a2      	ldr	r2, [r4, r2]
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:185 (discriminator 3)
   16c00:	6840      	ldr	r0, [r0, #4]
   16c02:	eb00 0063 	add.w	r0, r0, r3, asr #1
   16c06:	4790      	blx	r2
   16c08:	bd10      	pop	{r4, pc}
   16c0a:	bf00      	nop

00016c0c <COculusHub::~COculusHub()>:
_ZN10COculusHubD0Ev():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:86
	_run = true;
}

/*!-----------------------------------------------------------------------------
*/
COculusHub::~COculusHub()
   16c0c:	b510      	push	{r4, lr}
   16c0e:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:88
{
}
   16c10:	f7ff ff20 	bl	16a54 <COculusHub::~COculusHub()>
   16c14:	4620      	mov	r0, r4
   16c16:	f001 fcfb 	bl	18610 <operator delete(void*)>
   16c1a:	4620      	mov	r0, r4
   16c1c:	bd10      	pop	{r4, pc}
   16c1e:	bf00      	nop

00016c20 <CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()>:
_ZN10CDelegate1IvP22TFlashProgActionParamsED0Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:164
*/
template <typename ReturnT, typename Param1T>
class CDelegate1
{
	public:
		virtual ~CDelegate1() {};
   16c20:	b510      	push	{r4, lr}
   16c22:	4604      	mov	r4, r0
~CDelegate1():
   16c24:	4b02      	ldr	r3, [pc, #8]	; (16c30 <CDelegate1<void, TFlashProgActionParams*>::~CDelegate1()+0x10>)
   16c26:	6003      	str	r3, [r0, #0]
_ZN10CDelegate1IvP22TFlashProgActionParamsED0Ev():
   16c28:	f001 fcf2 	bl	18610 <operator delete(void*)>
   16c2c:	4620      	mov	r0, r4
   16c2e:	bd10      	pop	{r4, pc}
   16c30:	0001a258 	.word	0x0001a258

00016c34 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()>:
_ZN16CDelegateMethod1I10COculusHubvP22TFlashProgActionParamsED0Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:173
/*!-----------------------------------------------------------------------------
Delegate a class that uses templates to create an implementation for each type
of handler needed for methods in different derived Listener classes
*/
template <typename ListenerT, typename ReturnT, typename Param1T>
class CDelegateMethod1 : public CDelegate1<ReturnT, Param1T>
   16c34:	b510      	push	{r4, lr}
   16c36:	4604      	mov	r4, r0
~CDelegate1():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:164
*/
template <typename ReturnT, typename Param1T>
class CDelegate1
{
	public:
		virtual ~CDelegate1() {};
   16c38:	4b02      	ldr	r3, [pc, #8]	; (16c44 <CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>::~CDelegateMethod1()+0x10>)
   16c3a:	6003      	str	r3, [r0, #0]
_ZN16CDelegateMethod1I10COculusHubvP22TFlashProgActionParamsED0Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:173
/*!-----------------------------------------------------------------------------
Delegate a class that uses templates to create an implementation for each type
of handler needed for methods in different derived Listener classes
*/
template <typename ListenerT, typename ReturnT, typename Param1T>
class CDelegateMethod1 : public CDelegate1<ReturnT, Param1T>
   16c3c:	f001 fce8 	bl	18610 <operator delete(void*)>
   16c40:	4620      	mov	r0, r4
   16c42:	bd10      	pop	{r4, pc}
   16c44:	0001a258 	.word	0x0001a258

00016c48 <COculusHub::Run()>:
_ZN10COculusHub3RunEv():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:541

/*!-----------------------------------------------------------------------------
Function called to start the application running
*/
void COculusHub::Run()
{
   16c48:	b510      	push	{r4, lr}
   16c4a:	b08a      	sub	sp, #40	; 0x28
   16c4c:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:543
	//Update firmware info details about the program if they don't match.
	_flashProg->UpdateFirmwareInfo();
   16c4e:	68c0      	ldr	r0, [r0, #12]
   16c50:	f001 fbf8 	bl	18444 <CFlashProg::UpdateFirmwareInfo()>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:546

	//Initialise the COM ports
	_comDebug->Open();
   16c54:	6860      	ldr	r0, [r4, #4]
   16c56:	6803      	ldr	r3, [r0, #0]
   16c58:	699b      	ldr	r3, [r3, #24]
   16c5a:	4798      	blx	r3
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:552

	//Start the command processor
	//_cmd->ServiceStart();

	//Start interrupt generation (releasing the DISABLE set in the constructor)
	IRQ_ENABLE;
   16c5c:	b672      	cpsid	i
   16c5e:	4b37      	ldr	r3, [pc, #220]	; (16d3c <COculusHub::Run()+0xf4>)
   16c60:	781b      	ldrb	r3, [r3, #0]
   16c62:	f013 0fff 	tst.w	r3, #255	; 0xff
   16c66:	d004      	beq.n	16c72 <COculusHub::Run()+0x2a>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:552 (discriminator 1)
   16c68:	4b34      	ldr	r3, [pc, #208]	; (16d3c <COculusHub::Run()+0xf4>)
   16c6a:	781a      	ldrb	r2, [r3, #0]
   16c6c:	3a01      	subs	r2, #1
   16c6e:	b2d2      	uxtb	r2, r2
   16c70:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:552 (discriminator 2)
   16c72:	4b32      	ldr	r3, [pc, #200]	; (16d3c <COculusHub::Run()+0xf4>)
   16c74:	781b      	ldrb	r3, [r3, #0]
   16c76:	f013 0fff 	tst.w	r3, #255	; 0xff
   16c7a:	d100      	bne.n	16c7e <COculusHub::Run()+0x36>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:552 (discriminator 1)
   16c7c:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:555

	//Wait for power supply to settle before we start things
	CSysTick::WaitMilliseconds(100);
   16c7e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 16d40 <COculusHub::Run()+0xf8>
   16c82:	f001 f97f 	bl	17f84 <CSysTick::WaitMilliseconds(float)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:558

	//Implement the main loop
	this->DoRun();
   16c86:	6823      	ldr	r3, [r4, #0]
   16c88:	68db      	ldr	r3, [r3, #12]
   16c8a:	4620      	mov	r0, r4
   16c8c:	4798      	blx	r3
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:560

	COM_PRINT("\r\n");
   16c8e:	4b2d      	ldr	r3, [pc, #180]	; (16d44 <COculusHub::Run()+0xfc>)
   16c90:	681c      	ldr	r4, [r3, #0]
   16c92:	b1ac      	cbz	r4, 16cc0 <COculusHub::Run()+0x78>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:560 (discriminator 1)
   16c94:	a801      	add	r0, sp, #4
   16c96:	492c      	ldr	r1, [pc, #176]	; (16d48 <COculusHub::Run()+0x100>)
   16c98:	aa02      	add	r2, sp, #8
   16c9a:	f001 fd37 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16c9e:	4620      	mov	r0, r4
   16ca0:	a901      	add	r1, sp, #4
   16ca2:	f000 f9b5 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16ca6:	9801      	ldr	r0, [sp, #4]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   16ca8:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   16caa:	4b28      	ldr	r3, [pc, #160]	; (16d4c <COculusHub::Run()+0x104>)
   16cac:	4298      	cmp	r0, r3
   16cae:	d007      	beq.n	16cc0 <COculusHub::Run()+0x78>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16cb0:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16cb2:	1e5a      	subs	r2, r3, #1
   16cb4:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16cb6:	2b00      	cmp	r3, #0
   16cb8:	dc02      	bgt.n	16cc0 <COculusHub::Run()+0x78>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   16cba:	a907      	add	r1, sp, #28
   16cbc:	f001 fcfe 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN10COculusHub3RunEv():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:561
	COM_PRINT("An unexpected error has occurred, rebooting...\r\n");
   16cc0:	4b20      	ldr	r3, [pc, #128]	; (16d44 <COculusHub::Run()+0xfc>)
   16cc2:	681c      	ldr	r4, [r3, #0]
   16cc4:	b1ac      	cbz	r4, 16cf2 <COculusHub::Run()+0xaa>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:561 (discriminator 1)
   16cc6:	a803      	add	r0, sp, #12
   16cc8:	4921      	ldr	r1, [pc, #132]	; (16d50 <COculusHub::Run()+0x108>)
   16cca:	aa04      	add	r2, sp, #16
   16ccc:	f001 fd1e 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16cd0:	4620      	mov	r0, r4
   16cd2:	a903      	add	r1, sp, #12
   16cd4:	f000 f99c 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16cd8:	9803      	ldr	r0, [sp, #12]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   16cda:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   16cdc:	4b1b      	ldr	r3, [pc, #108]	; (16d4c <COculusHub::Run()+0x104>)
   16cde:	4298      	cmp	r0, r3
   16ce0:	d007      	beq.n	16cf2 <COculusHub::Run()+0xaa>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16ce2:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16ce4:	1e5a      	subs	r2, r3, #1
   16ce6:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16ce8:	2b00      	cmp	r3, #0
   16cea:	dc02      	bgt.n	16cf2 <COculusHub::Run()+0xaa>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   16cec:	a908      	add	r1, sp, #32
   16cee:	f001 fce5 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN10COculusHub3RunEv():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:562
	COM_PRINT("\r\n");
   16cf2:	4b14      	ldr	r3, [pc, #80]	; (16d44 <COculusHub::Run()+0xfc>)
   16cf4:	681c      	ldr	r4, [r3, #0]
   16cf6:	b1ac      	cbz	r4, 16d24 <COculusHub::Run()+0xdc>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:562 (discriminator 1)
   16cf8:	a805      	add	r0, sp, #20
   16cfa:	4913      	ldr	r1, [pc, #76]	; (16d48 <COculusHub::Run()+0x100>)
   16cfc:	aa06      	add	r2, sp, #24
   16cfe:	f001 fd05 	bl	1870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>
   16d02:	4620      	mov	r0, r4
   16d04:	a905      	add	r1, sp, #20
   16d06:	f000 f983 	bl	17010 <CCom::Print(std::string, ...)>
_ZNKSs7_M_dataEv():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:293 (discriminator 1)
      // Data Members (private):
      mutable _Alloc_hider	_M_dataplus;

      _CharT*
      _M_data() const
      { return  _M_dataplus._M_p; }
   16d0a:	9805      	ldr	r0, [sp, #20]
~basic_string():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:539 (discriminator 1)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string() _GLIBCXX_NOEXCEPT
      { _M_rep()->_M_dispose(this->get_allocator()); }
   16d0c:	380c      	subs	r0, #12
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:240 (discriminator 1)

	void
	_M_dispose(const _Alloc& __a)
	{
#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
	  if (__builtin_expect(this != &_S_empty_rep(), false))
   16d0e:	4b0f      	ldr	r3, [pc, #60]	; (16d4c <COculusHub::Run()+0x104>)
   16d10:	4298      	cmp	r0, r3
   16d12:	d007      	beq.n	16d24 <COculusHub::Run()+0xdc>
__exchange_and_add_single():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:67
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
   16d14:	6883      	ldr	r3, [r0, #8]
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\ext/atomicity.h:68
    *__mem += __val;
   16d16:	1e5a      	subs	r2, r3, #1
   16d18:	6082      	str	r2, [r0, #8]
_ZNSs4_Rep10_M_disposeERKSaIcE():
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:245
#endif
	    {
	      // Be race-detector-friendly.  For more info see bits/c++config.
	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
   16d1a:	2b00      	cmp	r3, #0
   16d1c:	dc02      	bgt.n	16d24 <COculusHub::Run()+0xdc>
c:\freescale\kds_v3\toolchain\arm-none-eabi\include\c++\4.8.4\bits/basic_string.h:249
							 -1) <= 0)
		{
		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
		  _M_destroy(__a);
   16d1e:	a909      	add	r1, sp, #36	; 0x24
   16d20:	f001 fccc 	bl	186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
_ZN10COculusHub3RunEv():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:565

	//Wait to flush UART then reboot
	CSysTick::WaitMilliseconds(2000);
   16d24:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 16d54 <COculusHub::Run()+0x10c>
   16d28:	f001 f92c 	bl	17f84 <CSysTick::WaitMilliseconds(float)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:568

	//Disable Interrupts
	IRQ_DISABLE;
   16d2c:	b672      	cpsid	i
   16d2e:	4b03      	ldr	r3, [pc, #12]	; (16d3c <COculusHub::Run()+0xf4>)
   16d30:	781a      	ldrb	r2, [r3, #0]
   16d32:	3201      	adds	r2, #1
   16d34:	b2d2      	uxtb	r2, r2
   16d36:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:569
}
   16d38:	b00a      	add	sp, #40	; 0x28
   16d3a:	bd10      	pop	{r4, pc}
   16d3c:	1fff0310 	.word	0x1fff0310
   16d40:	42c80000 	.word	0x42c80000
   16d44:	1fff00bc 	.word	0x1fff00bc
   16d48:	0001a24c 	.word	0x0001a24c
   16d4c:	1fff031c 	.word	0x1fff031c
   16d50:	0001a280 	.word	0x0001a280
   16d54:	44fa0000 	.word	0x44fa0000

00016d58 <COculusHub::COculusHub()>:
_ZN10COculusHubC2Ev():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:11
//COculusHub
//==============================================================================
/*!-----------------------------------------------------------------------------
Constructor that initialises the hardware and operating systems
*/
COculusHub::COculusHub()
   16d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16d5c:	b08c      	sub	sp, #48	; 0x30
   16d5e:	4604      	mov	r4, r0
   16d60:	4b4d      	ldr	r3, [pc, #308]	; (16e98 <COculusHub::COculusHub()+0x140>)
   16d62:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:14
{
	//Disable interrupts, and initialise the interrupt system
	IRQ_INIT;
   16d64:	b672      	cpsid	i
   16d66:	4b4d      	ldr	r3, [pc, #308]	; (16e9c <COculusHub::COculusHub()+0x144>)
   16d68:	2500      	movs	r5, #0
   16d6a:	701d      	strb	r5, [r3, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:15
	IRQ_DISABLE;
   16d6c:	b672      	cpsid	i
   16d6e:	781a      	ldrb	r2, [r3, #0]
   16d70:	3201      	adds	r2, #1
   16d72:	b2d2      	uxtb	r2, r2
   16d74:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:18

	//Initialise the hardware platform (do this first for power latching)...
	this->DoInitialiseGpio();
   16d76:	f7ff fe73 	bl	16a60 <COculusHub::DoInitialiseGpio()>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:22

	//Initialise the clock sources
	TMcgConfig mcgCfg;
	mcgCfg.OSCCR = (OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK); 	//Setup for external clock, not oscillator
   16d7a:	23a0      	movs	r3, #160	; 0xa0
   16d7c:	f88d 3014 	strb.w	r3, [sp, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:23
	mcgCfg.OscSrc = OSCSRC_EXTREF;	/*!< Choose TTL oscillator */
   16d80:	f88d 5015 	strb.w	r5, [sp, #21]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:24
	mcgCfg.RANGE = 2;				/*!< Not really applicable for Ext TTL source - Very High Frequency source, 8-32MHz */
   16d84:	2302      	movs	r3, #2
   16d86:	f88d 3016 	strb.w	r3, [sp, #22]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:25
	mcgCfg.FRDIV = 5;				/*!< Not really applicable for Ext TTL source - FLL External Reference Divider - Divide by 1024 to get 48.82kHz */
   16d8a:	2205      	movs	r2, #5
   16d8c:	f88d 2017 	strb.w	r2, [sp, #23]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:26
	mcgCfg.PRDIV = 4;				/*!< PLL0 - Divide by factor of 5 for a PLL0 frequency of 5MHz (we think theres an extra div2 in here) */
   16d90:	2204      	movs	r2, #4
   16d92:	f88d 2018 	strb.w	r2, [sp, #24]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:27
	mcgCfg.VDIV = 8;				/*!< PLL0 - Multiply 5MHz by 24 to give 120MHz */
   16d96:	2208      	movs	r2, #8
   16d98:	f88d 2019 	strb.w	r2, [sp, #25]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:28
	mcgCfg.ClkSrcFreq = 50000000;
   16d9c:	4a40      	ldr	r2, [pc, #256]	; (16ea0 <COculusHub::COculusHub()+0x148>)
   16d9e:	9207      	str	r2, [sp, #28]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:29
	mcgCfg.ClkMcgFreq = 120000000;
   16da0:	4a40      	ldr	r2, [pc, #256]	; (16ea4 <COculusHub::COculusHub()+0x14c>)
   16da2:	9208      	str	r2, [sp, #32]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:30
	mcgCfg.ClkDivSys = 1;			/*!< 120MHz system */
   16da4:	2701      	movs	r7, #1
   16da6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:31
	mcgCfg.ClkDivPeripheral = 2;	/*!< 60MHz bus/peripherals */
   16daa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:32
	mcgCfg.ClkDivBus = 3;			/*!< 40MHz for external bus */
   16dae:	f04f 0803 	mov.w	r8, #3
   16db2:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:33
	mcgCfg.ClkDivFlash = 6;			/*!< 20MHz for flash */
   16db6:	2306      	movs	r3, #6
   16db8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:34
	CMcg::Initialise(&mcgCfg);
   16dbc:	a805      	add	r0, sp, #20
   16dbe:	f000 ffb7 	bl	17d30 <CMcg::Initialise(TMcgConfig*)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:37

	//Set the SysTick master time-base
	CSysTick::Initialise(SYSTICK_TIMER_FREQ);
   16dc2:	ed9f 0b33 	vldr	d0, [pc, #204]	; 16e90 <COculusHub::COculusHub()+0x138>
   16dc6:	f001 f89f 	bl	17f08 <CSysTick::Initialise(double)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:43

	//Initialise the CRC16 generator LUT
	//CCrc16::Init();

	//Setup the DEBUG Com Port
	_comDebug = new CComUart(UART_DEBUG, UART_DEBUG_RX_BUFFER, UART_DEBUG_TX_BUFFER);
   16dca:	201c      	movs	r0, #28
   16dcc:	f001 fc0c 	bl	185e8 <operator new(unsigned int)>
   16dd0:	4606      	mov	r6, r0
   16dd2:	4641      	mov	r1, r8
   16dd4:	2280      	movs	r2, #128	; 0x80
   16dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
   16dda:	f000 fddf 	bl	1799c <CComUart::CComUart(unsigned char, unsigned int, unsigned int)>
   16dde:	6066      	str	r6, [r4, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:44
	_comDebug->Close();
   16de0:	6833      	ldr	r3, [r6, #0]
   16de2:	685b      	ldr	r3, [r3, #4]
   16de4:	4630      	mov	r0, r6
   16de6:	4798      	blx	r3
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:45
	_comDebug->SetBaudRate(UART_DEBUG_BAUD);
   16de8:	6860      	ldr	r0, [r4, #4]
   16dea:	210d      	movs	r1, #13
   16dec:	f000 fa4e 	bl	1728c <CComUart::SetBaudRate(EUartBaud)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:46
	_comDebug->SetParity(PARITY_NONE);
   16df0:	6860      	ldr	r0, [r4, #4]
   16df2:	4629      	mov	r1, r5
   16df4:	f000 fa4e 	bl	17294 <CComUart::SetParity(EUartParity)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:49

	//Setup the PrintF redirection to the AUX Com Port
	CCom::Terminal = _comDebug;
   16df8:	6863      	ldr	r3, [r4, #4]
   16dfa:	4a2b      	ldr	r2, [pc, #172]	; (16ea8 <COculusHub::COculusHub()+0x150>)
   16dfc:	6013      	str	r3, [r2, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:66
	_cmd->SetUart(_comDebug);
	_cmd->OnExecute.Set(this, &COculusHub::CmdExecuteEvent);
	*/

	//Populate hardware information
	_hardware.PartNumber = HARDWARE_PARTNUMBER;
   16dfe:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   16e02:	8223      	strh	r3, [r4, #16]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:67
	_hardware.PartRevision = HARDWARE_PARTREV;
   16e04:	74a7      	strb	r7, [r4, #18]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:68
	_hardware.SerialNumber = 0;
   16e06:	6165      	str	r5, [r4, #20]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:69
	_hardware.FlagsSys = 0x0000;
   16e08:	8325      	strh	r5, [r4, #24]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:70
	_hardware.FlagsUser = 0x0000;
   16e0a:	8365      	strh	r5, [r4, #26]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:73

	//Initialise the flash controller
	_flash = new CFlash();
   16e0c:	2010      	movs	r0, #16
   16e0e:	f001 fbeb 	bl	185e8 <operator new(unsigned int)>
   16e12:	4605      	mov	r5, r0
   16e14:	f000 fdf8 	bl	17a08 <CFlash::CFlash()>
   16e18:	60a5      	str	r5, [r4, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:76

	//Initialise the Flash Programmer
	_flashProg = new CFlashProg(_flash, FLASH_PROGINFO_START, FLASH_PROGINFO_SIZE);
   16e1a:	203c      	movs	r0, #60	; 0x3c
   16e1c:	f001 fbe4 	bl	185e8 <operator new(unsigned int)>
   16e20:	4605      	mov	r5, r0
   16e22:	68a1      	ldr	r1, [r4, #8]
   16e24:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   16e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16e2c:	f001 facc 	bl	183c8 <CFlashProg::CFlashProg(CFlash*, unsigned int, unsigned int)>
   16e30:	60e5      	str	r5, [r4, #12]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:77
	_flashProg->SetHardwareInfo(&_hardware);
   16e32:	4628      	mov	r0, r5
   16e34:	f104 0110 	add.w	r1, r4, #16
   16e38:	f001 fae0 	bl	183fc <CFlashProg::SetHardwareInfo(TFlashProgHardwareInfo*)>
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:78
	_flashProg->OnAction.Set(this, &COculusHub::FlashProgActionEvent);
   16e3c:	68e5      	ldr	r5, [r4, #12]
   16e3e:	4a1b      	ldr	r2, [pc, #108]	; (16eac <COculusHub::COculusHub()+0x154>)
   16e40:	ab0a      	add	r3, sp, #40	; 0x28
   16e42:	e892 0003 	ldmia.w	r2, {r0, r1}
   16e46:	e883 0003 	stmia.w	r3, {r0, r1}
   16e4a:	aa01      	add	r2, sp, #4
   16e4c:	e882 0003 	stmia.w	r2, {r0, r1}
_ZN10CCallback1IvP22TFlashProgActionParamsE5ClearEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:230
		
		//Function called to execute the callback and return its value (or the default value of the return type if not defined)
		ReturnT Call(Param1T param1) { if(_delegate) return _delegate->Call(param1); else return ReturnT();}
		
		//Clear Function
		inline void Clear() { if(_delegate) { delete _delegate; } }
   16e50:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   16e52:	b118      	cbz	r0, 16e5c <COculusHub::COculusHub()+0x104>
   16e54:	b110      	cbz	r0, 16e5c <COculusHub::COculusHub()+0x104>
   16e56:	6803      	ldr	r3, [r0, #0]
   16e58:	685b      	ldr	r3, [r3, #4]
   16e5a:	4798      	blx	r3
Set<COculusHub>():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:237
		//Set the Callback to execute an objects member function
		template <typename ListenerT>
		void Set(ListenerT* object, ReturnT (ListenerT::*member)(Param1T))
		{
			this->Clear();
			_delegate = new CDelegateMethod1<ListenerT, ReturnT, Param1T>(object, member); 			
   16e5c:	2010      	movs	r0, #16
   16e5e:	f001 fbc3 	bl	185e8 <operator new(unsigned int)>
   16e62:	4603      	mov	r3, r0
   16e64:	aa03      	add	r2, sp, #12
   16e66:	a901      	add	r1, sp, #4
   16e68:	c903      	ldmia	r1, {r0, r1}
   16e6a:	e882 0003 	stmia.w	r2, {r0, r1}
CDelegateMethod1():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:182
		ListenerT* _object;
		PMember _member;

	public:
		//Constructor
		CDelegateMethod1(ListenerT* object, PMember member) : _object(object), _member(member) { }		
   16e6e:	4910      	ldr	r1, [pc, #64]	; (16eb0 <COculusHub::COculusHub()+0x158>)
   16e70:	6019      	str	r1, [r3, #0]
   16e72:	605c      	str	r4, [r3, #4]
   16e74:	f103 0608 	add.w	r6, r3, #8
   16e78:	e892 0003 	ldmia.w	r2, {r0, r1}
   16e7c:	e886 0003 	stmia.w	r6, {r0, r1}
Set<COculusHub>():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:237
		//Set the Callback to execute an objects member function
		template <typename ListenerT>
		void Set(ListenerT* object, ReturnT (ListenerT::*member)(Param1T))
		{
			this->Clear();
			_delegate = new CDelegateMethod1<ListenerT, ReturnT, Param1T>(object, member); 			
   16e80:	63ab      	str	r3, [r5, #56]	; 0x38
_ZN10COculusHubC2Ev():
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:81

	//Indicate the application is allowed to run
	_run = true;
   16e82:	2301      	movs	r3, #1
   16e84:	7723      	strb	r3, [r4, #28]
C:/Users/s.morris/OculusHub/OculusHub/src/oculushub.cpp:82
}
   16e86:	4620      	mov	r0, r4
   16e88:	b00c      	add	sp, #48	; 0x30
   16e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e8e:	bf00      	nop
   16e90:	00000000 	.word	0x00000000
   16e94:	40c38800 	.word	0x40c38800
   16e98:	0001a2c0 	.word	0x0001a2c0
   16e9c:	1fff0310 	.word	0x1fff0310
   16ea0:	02faf080 	.word	0x02faf080
   16ea4:	07270e00 	.word	0x07270e00
   16ea8:	1fff00bc 	.word	0x1fff00bc
   16eac:	00019a18 	.word	0x00019a18
   16eb0:	0001a270 	.word	0x0001a270
$t():
   16eb4:	f3af 8000 	nop.w

00016eb8 <__copy_rom_section>:
__copy_rom_section():
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:54
	const unsigned int size_short = sizeof(short);
	const unsigned int mask_short = sizeof(short)-1;

	const unsigned int size_char = sizeof(char);

	if( dst == src || size == 0)
   16eb8:	4288      	cmp	r0, r1
   16eba:	d024      	beq.n	16f06 <__copy_rom_section+0x4e>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:54 (discriminator 1)
   16ebc:	bb0a      	cbnz	r2, 16f02 <__copy_rom_section+0x4a>
   16ebe:	4770      	bx	lr
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:63


	while( len > 0)
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
   16ec0:	f011 0f03 	tst.w	r1, #3
   16ec4:	d10a      	bne.n	16edc <__copy_rom_section+0x24>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:63 (discriminator 1)
   16ec6:	f010 0f03 	tst.w	r0, #3
   16eca:	d107      	bne.n	16edc <__copy_rom_section+0x24>
   16ecc:	2a03      	cmp	r2, #3
   16ece:	d905      	bls.n	16edc <__copy_rom_section+0x24>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:65
		{
			*((int *)dst)  = *((int*)src);
   16ed0:	f851 3b04 	ldr.w	r3, [r1], #4
   16ed4:	f840 3b04 	str.w	r3, [r0], #4
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:68
			dst += size_int;
			src += size_int;
			len -= size_int;
   16ed8:	3a04      	subs	r2, #4
   16eda:	e012      	b.n	16f02 <__copy_rom_section+0x4a>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:70
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
   16edc:	f011 0f01 	tst.w	r1, #1
   16ee0:	d10a      	bne.n	16ef8 <__copy_rom_section+0x40>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:70 (discriminator 1)
   16ee2:	f010 0f01 	tst.w	r0, #1
   16ee6:	d107      	bne.n	16ef8 <__copy_rom_section+0x40>
   16ee8:	2a01      	cmp	r2, #1
   16eea:	d905      	bls.n	16ef8 <__copy_rom_section+0x40>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:72
		{
			*((short *)dst)  = *((short*)src);
   16eec:	f831 3b02 	ldrh.w	r3, [r1], #2
   16ef0:	f820 3b02 	strh.w	r3, [r0], #2
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:75
			dst += size_short;
			src += size_short;
			len -= size_short;
   16ef4:	3a02      	subs	r2, #2
   16ef6:	e004      	b.n	16f02 <__copy_rom_section+0x4a>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:79
		}
		else
		{
			*((char *)dst)  = *((char*)src);
   16ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
   16efc:	f800 3b01 	strb.w	r3, [r0], #1
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:82
			dst += size_char;
			src += size_char;
			len -= size_char;
   16f00:	3a01      	subs	r2, #1
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:60 (discriminator 1)
	{
		return;
	}


	while( len > 0)
   16f02:	2a00      	cmp	r2, #0
   16f04:	d1dc      	bne.n	16ec0 <__copy_rom_section+0x8>
   16f06:	4770      	bx	lr

00016f08 <__copy_rom_sections_to_ram>:
__copy_rom_sections_to_ram():
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:95
__S_romp is defined in the linker command file
It is a table of RomInfo structures.  The final entry in the table has all-zero
fields.
*/
void __copy_rom_sections_to_ram(void)
{
   16f08:	b538      	push	{r3, r4, r5, lr}
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:98
	int				index;

	if (__S_romp == 0L)
   16f0a:	4b11      	ldr	r3, [pc, #68]	; (16f50 <__copy_rom_sections_to_ram+0x48>)
   16f0c:	b1fb      	cbz	r3, 16f4e <__copy_rom_sections_to_ram+0x46>
   16f0e:	2400      	movs	r4, #0
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:103
		return;

	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
		 __S_romp[index].Source != 0 ||
   16f10:	461d      	mov	r5, r3
   16f12:	e008      	b.n	16f26 <__copy_rom_sections_to_ram+0x1e>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:108
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
   16f14:	0063      	lsls	r3, r4, #1
   16f16:	4423      	add	r3, r4
   16f18:	009b      	lsls	r3, r3, #2
   16f1a:	442b      	add	r3, r5
   16f1c:	6858      	ldr	r0, [r3, #4]
   16f1e:	689a      	ldr	r2, [r3, #8]
   16f20:	f7ff ffca 	bl	16eb8 <__copy_rom_section>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:106
	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
   16f24:	3401      	adds	r4, #1
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:103 (discriminator 1)
	if (__S_romp == 0L)
		return;

	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
		 __S_romp[index].Source != 0 ||
   16f26:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16f2a:	009b      	lsls	r3, r3, #2
   16f2c:	58e9      	ldr	r1, [r5, r3]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:102 (discriminator 1)

	if (__S_romp == 0L)
		return;

	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
   16f2e:	2900      	cmp	r1, #0
   16f30:	d1f0      	bne.n	16f14 <__copy_rom_sections_to_ram+0xc>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:104
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
   16f32:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16f36:	009b      	lsls	r3, r3, #2
   16f38:	442b      	add	r3, r5
   16f3a:	685b      	ldr	r3, [r3, #4]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:103
	if (__S_romp == 0L)
		return;

	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
		 __S_romp[index].Source != 0 ||
   16f3c:	2b00      	cmp	r3, #0
   16f3e:	d1e9      	bne.n	16f14 <__copy_rom_sections_to_ram+0xc>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:105
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
   16f40:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16f44:	009b      	lsls	r3, r3, #2
   16f46:	442b      	add	r3, r5
   16f48:	689b      	ldr	r3, [r3, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:104
		return;

	// Go through the entire table, copying sections from ROM to RAM.
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
   16f4a:	2b00      	cmp	r3, #0
   16f4c:	d1e2      	bne.n	16f14 <__copy_rom_sections_to_ram+0xc>
   16f4e:	bd38      	pop	{r3, r4, r5, pc}
   16f50:	0001ae94 	.word	0x0001ae94

00016f54 <__thumb_startup>:
__thumb_startup():
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:126

/*!-----------------------------------------------------------------------------
*/
__attribute__((naked)) void __thumb_startup(void)
{
	int addr = (int)__SP_INIT;
   16f54:	4b12      	ldr	r3, [pc, #72]	; (16fa0 <skip_sp+0x32>)
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:134
	/*
	Setup the stack before we attempt anything else
	skip stack setup if __SP_INIT is 0
	assume sp is already setup.
	*/
	__asm (
   16f56:	4618      	mov	r0, r3
   16f58:	2800      	cmp	r0, #0
   16f5a:	f000 8008 	beq.w	16f6e <skip_sp>
   16f5e:	4685      	mov	sp, r0
   16f60:	b081      	sub	sp, #4
   16f62:	f04f 0000 	mov.w	r0, #0
   16f66:	ea6f 0000 	mvn.w	r0, r0
   16f6a:	9000      	str	r0, [sp, #0]
   16f6c:	b001      	add	sp, #4

00016f6e <skip_sp>:
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:148
			"add  sp,#4\n\t"
			"skip_sp:\n\t"
			::"r"(addr));

    //Initialise the FPU co-processor
	SCB->CPACR |= (0xF << 20); 	//Set bits 20-23 to enable FPU full-access (CP10 and CP11 bits)
   16f6e:	4b0d      	ldr	r3, [pc, #52]	; (16fa4 <skip_sp+0x36>)
   16f70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16f74:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   16f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:151

	//Set the interrupt vector table position
	SCB->VTOR = (uint32)(&__vect_table);
   16f7c:	4a0a      	ldr	r2, [pc, #40]	; (16fa8 <skip_sp+0x3a>)
   16f7e:	609a      	str	r2, [r3, #8]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:154

	//Disable the WDOG module
	WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xC520); /* WDOG_UNLOCK: WDOGUNLOCK=0xC520 */
   16f80:	4b0a      	ldr	r3, [pc, #40]	; (16fac <skip_sp+0x3e>)
   16f82:	f24c 5220 	movw	r2, #50464	; 0xc520
   16f86:	81da      	strh	r2, [r3, #14]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:155
	WDOG->UNLOCK = WDOG_UNLOCK_WDOGUNLOCK(0xD928); /* WDOG_UNLOCK: WDOGUNLOCK=0xD928 */
   16f88:	f64d 1228 	movw	r2, #55592	; 0xd928
   16f8c:	81da      	strh	r2, [r3, #14]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:156
	WDOG->STCTRLH = WDOG_STCTRLH_BYTESEL(0x00) |
   16f8e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   16f92:	801a      	strh	r2, [r3, #0]
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:164
				 WDOG_STCTRLH_ALLOWUPDATE_MASK |
				 WDOG_STCTRLH_CLKSRC_MASK |
				 0x0100U;
    
    /* SUPPORT_ROM_TO_RAM */
    __copy_rom_sections_to_ram();
   16f94:	f7ff ffb8 	bl	16f08 <__copy_rom_sections_to_ram>
C:/Users/s.morris/OculusHub/OculusHub/src/startup.c:167
    
    //_start is a standard library symbol that calls main() - it should be defined crt0.o
	_start();	
   16f98:	f7f9 fa64 	bl	10464 <_mainCRTStartup>
   16f9c:	e7fe      	b.n	16f9c <skip_sp+0x2e>
   16f9e:	bf00      	nop
   16fa0:	20000000 	.word	0x20000000
   16fa4:	e000ed00 	.word	0xe000ed00
   16fa8:	00010000 	.word	0x00010000
   16fac:	40052000 	.word	0x40052000

00016fb0 <CCom::Write(unsigned char*, unsigned int)>:
_ZN4CCom5WriteEPhj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:91
transmission frees further space in the buffer.
@param pBuf Pointer to the start of the buffer to get data from
@param count The number of bytes to write
*/
void CCom::Write(puint8 pBuf, uint32 count)
{
   16fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fb2:	4605      	mov	r5, r0
   16fb4:	460e      	mov	r6, r1
   16fb6:	4617      	mov	r7, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:93
	//Only write data if the port is open
	if(this->IsOpen()) {
   16fb8:	6803      	ldr	r3, [r0, #0]
   16fba:	695b      	ldr	r3, [r3, #20]
   16fbc:	4798      	blx	r3
   16fbe:	b940      	cbnz	r0, 16fd2 <CCom::Write(unsigned char*, unsigned int)+0x22>
   16fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:96 (discriminator 2)
		//Write the buffer contents into the transmitter
		for(uint32 i = 0; i < count; i++) {
			this->WriteByte(*pBuf);
   16fc2:	682b      	ldr	r3, [r5, #0]
   16fc4:	6a1b      	ldr	r3, [r3, #32]
   16fc6:	4628      	mov	r0, r5
   16fc8:	f816 1b01 	ldrb.w	r1, [r6], #1
   16fcc:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:95 (discriminator 2)
void CCom::Write(puint8 pBuf, uint32 count)
{
	//Only write data if the port is open
	if(this->IsOpen()) {
		//Write the buffer contents into the transmitter
		for(uint32 i = 0; i < count; i++) {
   16fce:	3401      	adds	r4, #1
   16fd0:	e000      	b.n	16fd4 <CCom::Write(unsigned char*, unsigned int)+0x24>
   16fd2:	2400      	movs	r4, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:95 (discriminator 1)
   16fd4:	42bc      	cmp	r4, r7
   16fd6:	d3f4      	bcc.n	16fc2 <CCom::Write(unsigned char*, unsigned int)+0x12>
   16fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fda:	bf00      	nop

00016fdc <CCom::PrintArgs(char*, std::__va_list)>:
_ZN4CCom9PrintArgsEPcSt9__va_list():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:49
output
@param str Pointer to a null-terminated Format string of characters
@param args The variable args structure containing variables to insert in the format string
*/
void CCom::PrintArgs(pchar str, va_list args)
{
   16fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fde:	b0c1      	sub	sp, #260	; 0x104
   16fe0:	4604      	mov	r4, r0
   16fe2:	460f      	mov	r7, r1
   16fe4:	4616      	mov	r6, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:50
	if(this->IsOpen()) {
   16fe6:	6805      	ldr	r5, [r0, #0]
   16fe8:	696d      	ldr	r5, [r5, #20]
   16fea:	47a8      	blx	r5
   16fec:	b170      	cbz	r0, 1700c <CCom::PrintArgs(char*, std::__va_list)+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:54
		//Allocate a buffer for output characters
		char buf[COM_PRINT_BUFFER];
		//Convert the variable-args and string into a character buffer
		vsnprintf(buf, COM_PRINT_BUFFER, str, args);
   16fee:	4668      	mov	r0, sp
   16ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
   16ff4:	463a      	mov	r2, r7
   16ff6:	4633      	mov	r3, r6
   16ff8:	f002 f94a 	bl	19290 <vsniprintf>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:56
		//Get the length of the string to send
		uint32 len = strlen(buf);
   16ffc:	4668      	mov	r0, sp
   16ffe:	f001 fe1f 	bl	18c40 <strlen>
   17002:	4602      	mov	r2, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:58
		//Write the character buffer to the Uart
		this->Write((puint8)buf, len);
   17004:	4620      	mov	r0, r4
   17006:	4669      	mov	r1, sp
   17008:	f7ff ffd2 	bl	16fb0 <CCom::Write(unsigned char*, unsigned int)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:60
	}
}
   1700c:	b041      	add	sp, #260	; 0x104
   1700e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017010 <CCom::Print(std::string, ...)>:
_ZN4CCom5PrintESsz():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:16
/*!-----------------------------------------------------------------------------
Function that implements a PrintF like capability to write text to the uart
output
*/
void CCom::Print(string str, ...)
{
   17010:	b40e      	push	{r1, r2, r3}
   17012:	b500      	push	{lr}
   17014:	b082      	sub	sp, #8
   17016:	aa03      	add	r2, sp, #12
   17018:	f852 3b04 	ldr.w	r3, [r2], #4
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:19
	//Initialise the arguments list
	va_list args;
	va_start(args, str);
   1701c:	9201      	str	r2, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:21
	//Call the print function for the arguments list
	this->PrintArgs((pchar)str.c_str(), args);
   1701e:	6819      	ldr	r1, [r3, #0]
   17020:	f7ff ffdc 	bl	16fdc <CCom::PrintArgs(char*, std::__va_list)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com.cpp:24
	//Tidy up
	va_end(args);
}
   17024:	b002      	add	sp, #8
   17026:	f85d eb04 	ldr.w	lr, [sp], #4
   1702a:	b003      	add	sp, #12
   1702c:	4770      	bx	lr
   1702e:	bf00      	nop

00017030 <CComUart::DoTxMode(bool, bool)>:
_ZN8CComUart8DoTxModeEbb():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:259
/*!-----------------------------------------------------------------------------
Function used to raise an OnTxEnableISR event when the Tx Enabled state changes
(or we wish to force a new state)
*/
void CComUart::DoTxMode(bool state, bool force)
{
   17030:	b410      	push	{r4}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:260
	IRQ_DISABLE;
   17032:	b672      	cpsid	i
   17034:	4b19      	ldr	r3, [pc, #100]	; (1709c <CComUart::DoTxMode(bool, bool)+0x6c>)
   17036:	781c      	ldrb	r4, [r3, #0]
   17038:	3401      	adds	r4, #1
   1703a:	b2e4      	uxtb	r4, r4
   1703c:	701c      	strb	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:263

	//If the state has changed, or we forcing a new state
	if((state != _txEnable) || force) {
   1703e:	7d03      	ldrb	r3, [r0, #20]
   17040:	428b      	cmp	r3, r1
   17042:	d100      	bne.n	17046 <CComUart::DoTxMode(bool, bool)+0x16>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:263 (discriminator 1)
   17044:	b1b2      	cbz	r2, 17074 <CComUart::DoTxMode(bool, bool)+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:264
		_txEnable = state;
   17046:	7501      	strb	r1, [r0, #20]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:266

		if(_txEnable) {
   17048:	b151      	cbz	r1, 17060 <CComUart::DoTxMode(bool, bool)+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:268
			//Enable the transmitter interrupts
			CLR_BITS(_uart->C2, UART_C2_TCIE_MASK);
   1704a:	6983      	ldr	r3, [r0, #24]
   1704c:	78da      	ldrb	r2, [r3, #3]
   1704e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   17052:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:269
			SET_BITS(_uart->C2, UART_C2_TIE_MASK);
   17054:	6983      	ldr	r3, [r0, #24]
   17056:	78da      	ldrb	r2, [r3, #3]
   17058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1705c:	70da      	strb	r2, [r3, #3]
   1705e:	e009      	b.n	17074 <CComUart::DoTxMode(bool, bool)+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:273
		}
		else {
			//Disable the transmitter interrupts, ensure the receiver is enabled
			CLR_BITS(_uart->C2, UART_C2_TIE_MASK | UART_C2_TCIE_MASK);
   17060:	6983      	ldr	r3, [r0, #24]
   17062:	78da      	ldrb	r2, [r3, #3]
   17064:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17068:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:274
			SET_BITS(_uart->C2, UART_C2_RIE_MASK | UART_C2_TE_MASK | UART_C2_RE_MASK);
   1706a:	6983      	ldr	r3, [r0, #24]
   1706c:	78da      	ldrb	r2, [r3, #3]
   1706e:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
   17072:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:278
		}
	}

	IRQ_ENABLE;
   17074:	b672      	cpsid	i
   17076:	4b09      	ldr	r3, [pc, #36]	; (1709c <CComUart::DoTxMode(bool, bool)+0x6c>)
   17078:	781b      	ldrb	r3, [r3, #0]
   1707a:	f013 0fff 	tst.w	r3, #255	; 0xff
   1707e:	d004      	beq.n	1708a <CComUart::DoTxMode(bool, bool)+0x5a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:278 (discriminator 1)
   17080:	4b06      	ldr	r3, [pc, #24]	; (1709c <CComUart::DoTxMode(bool, bool)+0x6c>)
   17082:	781a      	ldrb	r2, [r3, #0]
   17084:	3a01      	subs	r2, #1
   17086:	b2d2      	uxtb	r2, r2
   17088:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:278 (discriminator 2)
   1708a:	4b04      	ldr	r3, [pc, #16]	; (1709c <CComUart::DoTxMode(bool, bool)+0x6c>)
   1708c:	781b      	ldrb	r3, [r3, #0]
   1708e:	f013 0fff 	tst.w	r3, #255	; 0xff
   17092:	d100      	bne.n	17096 <CComUart::DoTxMode(bool, bool)+0x66>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:278 (discriminator 1)
   17094:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:279
}
   17096:	f85d 4b04 	ldr.w	r4, [sp], #4
   1709a:	4770      	bx	lr
   1709c:	1fff0310 	.word	0x1fff0310

000170a0 <CComUart::Flush()>:
_ZN8CComUart5FlushEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:286
/*!-----------------------------------------------------------------------------
Function that is called to wait while the transmit buffer empites.
Useful for waiting for chars to be transmitted before closing the UART
*/
void CComUart::Flush()
{
   170a0:	b082      	sub	sp, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:288
	//Don't allow data to be read if the port is closed
	if(!_open)
   170a2:	7a03      	ldrb	r3, [r0, #8]
   170a4:	b323      	cbz	r3, 170f0 <CComUart::Flush()+0x50>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:293
		return;

	//Wait while the transmit buffer isn't empty
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
   170a6:	2301      	movs	r3, #1
   170a8:	f88d 3007 	strb.w	r3, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:295
	while(wait) {
		IRQ_DISABLE;
   170ac:	4b11      	ldr	r3, [pc, #68]	; (170f4 <CComUart::Flush()+0x54>)
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:294
		return;

	//Wait while the transmit buffer isn't empty
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
	while(wait) {
   170ae:	e01a      	b.n	170e6 <CComUart::Flush()+0x46>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:295
		IRQ_DISABLE;
   170b0:	b672      	cpsid	i
   170b2:	781a      	ldrb	r2, [r3, #0]
   170b4:	3201      	adds	r2, #1
   170b6:	b2d2      	uxtb	r2, r2
   170b8:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:296
		wait = !(_txBuffer->IsEmpty());
   170ba:	6902      	ldr	r2, [r0, #16]
_ZN11CFifoBufferIhE7IsEmptyEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:146
Function that returns if the buffer is empty
*/
template <class T>
bool CFifoBuffer<T>::IsEmpty()
{
	return (_count == 0);
   170bc:	6852      	ldr	r2, [r2, #4]
_ZN8CComUart5FlushEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:296
   170be:	3200      	adds	r2, #0
   170c0:	bf18      	it	ne
   170c2:	2201      	movne	r2, #1
   170c4:	f88d 2007 	strb.w	r2, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:297
		IRQ_ENABLE;
   170c8:	b672      	cpsid	i
   170ca:	781a      	ldrb	r2, [r3, #0]
   170cc:	f012 0fff 	tst.w	r2, #255	; 0xff
   170d0:	d003      	beq.n	170da <CComUart::Flush()+0x3a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:297 (discriminator 1)
   170d2:	781a      	ldrb	r2, [r3, #0]
   170d4:	3a01      	subs	r2, #1
   170d6:	b2d2      	uxtb	r2, r2
   170d8:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:297 (discriminator 2)
   170da:	781a      	ldrb	r2, [r3, #0]
   170dc:	f012 0fff 	tst.w	r2, #255	; 0xff
   170e0:	d100      	bne.n	170e4 <CComUart::Flush()+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:297 (discriminator 1)
   170e2:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:298
		NOP;
   170e4:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:294 (discriminator 1)
		return;

	//Wait while the transmit buffer isn't empty
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
	while(wait) {
   170e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   170ea:	f012 0fff 	tst.w	r2, #255	; 0xff
   170ee:	d1df      	bne.n	170b0 <CComUart::Flush()+0x10>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:301
		wait = !(_txBuffer->IsEmpty());
		IRQ_ENABLE;
		NOP;
		//### Perhaps need a Watchdog reset here!
	}
}
   170f0:	b002      	add	sp, #8
   170f2:	4770      	bx	lr
   170f4:	1fff0310 	.word	0x1fff0310

000170f8 <CComUart::GetRxBufferCount()>:
_ZN8CComUart16GetRxBufferCountEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:359

/*!-----------------------------------------------------------------------------
*/
uint32 CComUart::GetRxBufferCount()
{
	IRQ_DISABLE;
   170f8:	b672      	cpsid	i
   170fa:	4b0c      	ldr	r3, [pc, #48]	; (1712c <CComUart::GetRxBufferCount()+0x34>)
   170fc:	781a      	ldrb	r2, [r3, #0]
   170fe:	3201      	adds	r2, #1
   17100:	b2d2      	uxtb	r2, r2
   17102:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:360
	uint32 count = _rxBuffer->GetCount();
   17104:	68c2      	ldr	r2, [r0, #12]
_ZN11CFifoBufferIhE8GetCountEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:128
Function that returns how many elements the buffer currently contains
*/
template <class T>
uint32 CFifoBuffer<T>::GetCount()
{
	return _count;
   17106:	6850      	ldr	r0, [r2, #4]
_ZN8CComUart16GetRxBufferCountEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:361
	IRQ_ENABLE;
   17108:	b672      	cpsid	i
   1710a:	781b      	ldrb	r3, [r3, #0]
   1710c:	f013 0fff 	tst.w	r3, #255	; 0xff
   17110:	d004      	beq.n	1711c <CComUart::GetRxBufferCount()+0x24>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:361 (discriminator 1)
   17112:	4b06      	ldr	r3, [pc, #24]	; (1712c <CComUart::GetRxBufferCount()+0x34>)
   17114:	781a      	ldrb	r2, [r3, #0]
   17116:	3a01      	subs	r2, #1
   17118:	b2d2      	uxtb	r2, r2
   1711a:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:361 (discriminator 2)
   1711c:	4b03      	ldr	r3, [pc, #12]	; (1712c <CComUart::GetRxBufferCount()+0x34>)
   1711e:	781b      	ldrb	r3, [r3, #0]
   17120:	f013 0fff 	tst.w	r3, #255	; 0xff
   17124:	d100      	bne.n	17128 <CComUart::GetRxBufferCount()+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:361 (discriminator 1)
   17126:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:364

	return count;
}
   17128:	4770      	bx	lr
   1712a:	bf00      	nop
   1712c:	1fff0310 	.word	0x1fff0310

00017130 <CComUart::GetTxBufferCount()>:
_ZN8CComUart16GetTxBufferCountEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:370

/*!-----------------------------------------------------------------------------
*/
uint32 CComUart::GetTxBufferCount()
{
	IRQ_DISABLE;
   17130:	b672      	cpsid	i
   17132:	4b0c      	ldr	r3, [pc, #48]	; (17164 <CComUart::GetTxBufferCount()+0x34>)
   17134:	781a      	ldrb	r2, [r3, #0]
   17136:	3201      	adds	r2, #1
   17138:	b2d2      	uxtb	r2, r2
   1713a:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:371
	uint32 count = _txBuffer->GetCount();
   1713c:	6902      	ldr	r2, [r0, #16]
_ZN11CFifoBufferIhE8GetCountEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:128
   1713e:	6850      	ldr	r0, [r2, #4]
_ZN8CComUart16GetTxBufferCountEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:372
	IRQ_ENABLE;
   17140:	b672      	cpsid	i
   17142:	781b      	ldrb	r3, [r3, #0]
   17144:	f013 0fff 	tst.w	r3, #255	; 0xff
   17148:	d004      	beq.n	17154 <CComUart::GetTxBufferCount()+0x24>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:372 (discriminator 1)
   1714a:	4b06      	ldr	r3, [pc, #24]	; (17164 <CComUart::GetTxBufferCount()+0x34>)
   1714c:	781a      	ldrb	r2, [r3, #0]
   1714e:	3a01      	subs	r2, #1
   17150:	b2d2      	uxtb	r2, r2
   17152:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:372 (discriminator 2)
   17154:	4b03      	ldr	r3, [pc, #12]	; (17164 <CComUart::GetTxBufferCount()+0x34>)
   17156:	781b      	ldrb	r3, [r3, #0]
   17158:	f013 0fff 	tst.w	r3, #255	; 0xff
   1715c:	d100      	bne.n	17160 <CComUart::GetTxBufferCount()+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:372 (discriminator 1)
   1715e:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:375

	return count;
}
   17160:	4770      	bx	lr
   17162:	bf00      	nop
   17164:	1fff0310 	.word	0x1fff0310

00017168 <CComUart::IsOpen()>:
_ZN8CComUart6IsOpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:383
Function that returns if the serial port is open
@result True if the serial port is open
*/
bool CComUart::IsOpen(void) {
	return _open;
}
   17168:	7a00      	ldrb	r0, [r0, #8]
   1716a:	4770      	bx	lr

0001716c <CComUart::CalcBaudValue(EUartBaud)>:
_ZN8CComUart13CalcBaudValueE9EUartBaud():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:53
@param baudRate The baud rate enumeration to convert
@result The numerical value of the baud rate or 0 if an invalid enum is specified
*/
uint32 CComUart::CalcBaudValue(EUartBaud baudRate)
{
	switch(baudRate) {
   1716c:	2810      	cmp	r0, #16
   1716e:	d838      	bhi.n	171e2 <CComUart::CalcBaudValue(EUartBaud)+0x76>
   17170:	e8df f000 	tbb	[pc, r0]
   17174:	0d0b3909 	.word	0x0d0b3909
   17178:	19161310 	.word	0x19161310
   1717c:	25221f1c 	.word	0x25221f1c
   17180:	312e2b28 	.word	0x312e2b28
   17184:	34          	.byte	0x34
   17185:	00          	.byte	0x00
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:54
		case BAUD_75 : return 75;
   17186:	204b      	movs	r0, #75	; 0x4b
   17188:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:56
		case BAUD_110 : return 110;
		case BAUD_150 : return 150;
   1718a:	2096      	movs	r0, #150	; 0x96
   1718c:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:57
		case BAUD_300 : return 300;
   1718e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   17192:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:58
		case BAUD_600 : return 600;
   17194:	f44f 7016 	mov.w	r0, #600	; 0x258
   17198:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:59
		case BAUD_1200 : return 1200;
   1719a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
   1719e:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:60
		case BAUD_2400 : return 2400;
   171a0:	f44f 6016 	mov.w	r0, #2400	; 0x960
   171a4:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:61
		case BAUD_4800 : return 4800;
   171a6:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
   171aa:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:62
		case BAUD_9600 : return 9600;
   171ac:	f44f 5016 	mov.w	r0, #9600	; 0x2580
   171b0:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:63
		case BAUD_14400 : return 14400;
   171b2:	f44f 5061 	mov.w	r0, #14400	; 0x3840
   171b6:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:64
		case BAUD_19200 : return 19200;
   171b8:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   171bc:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:65
		case BAUD_38400 : return 38400;
   171be:	f44f 4016 	mov.w	r0, #38400	; 0x9600
   171c2:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:66
		case BAUD_57600 : return 57600;
   171c4:	f44f 4061 	mov.w	r0, #57600	; 0xe100
   171c8:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:67
		case BAUD_115200 : return 115200;
   171ca:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
   171ce:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:68
		case BAUD_230400 : return 230400;
   171d0:	f44f 3061 	mov.w	r0, #230400	; 0x38400
   171d4:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:69
		case BAUD_460800 : return 460800;
   171d6:	f44f 20e1 	mov.w	r0, #460800	; 0x70800
   171da:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:70
		case BAUD_921600 : return 921600;
   171dc:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
   171e0:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:71
		default : return 0;
   171e2:	2000      	movs	r0, #0
   171e4:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:55
*/
uint32 CComUart::CalcBaudValue(EUartBaud baudRate)
{
	switch(baudRate) {
		case BAUD_75 : return 75;
		case BAUD_110 : return 110;
   171e6:	206e      	movs	r0, #110	; 0x6e
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:73
		case BAUD_230400 : return 230400;
		case BAUD_460800 : return 460800;
		case BAUD_921600 : return 921600;
		default : return 0;
	}
}
   171e8:	4770      	bx	lr
$t():
   171ea:	bf00      	nop

000171ec <CComUart::CalcBaudRate(unsigned int)>:
_ZN8CComUart12CalcBaudRateEj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:82
@param baudValue The baud value to round to the nearest enumerated value
@result The baud rate enumeration
*/
EUartBaud CComUart::CalcBaudRate(uint32 baudValue)
{
	if(baudValue <= 75) return BAUD_75;
   171ec:	284b      	cmp	r0, #75	; 0x4b
   171ee:	d92c      	bls.n	1724a <CComUart::CalcBaudRate(unsigned int)+0x5e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:83
	else if(baudValue <= 110) return BAUD_110;
   171f0:	286e      	cmp	r0, #110	; 0x6e
   171f2:	d92c      	bls.n	1724e <CComUart::CalcBaudRate(unsigned int)+0x62>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:84
	else if(baudValue <= 150) return BAUD_150;
   171f4:	2896      	cmp	r0, #150	; 0x96
   171f6:	d92c      	bls.n	17252 <CComUart::CalcBaudRate(unsigned int)+0x66>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:85
	else if(baudValue <= 300) return BAUD_300;
   171f8:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
   171fc:	d92b      	bls.n	17256 <CComUart::CalcBaudRate(unsigned int)+0x6a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:86
	else if(baudValue <= 600) return BAUD_600;
   171fe:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   17202:	d92a      	bls.n	1725a <CComUart::CalcBaudRate(unsigned int)+0x6e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:87
	else if(baudValue <= 1200) return BAUD_1200;
   17204:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   17208:	d929      	bls.n	1725e <CComUart::CalcBaudRate(unsigned int)+0x72>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:88
	else if(baudValue <= 2400) return BAUD_2400;
   1720a:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   1720e:	d928      	bls.n	17262 <CComUart::CalcBaudRate(unsigned int)+0x76>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:89
	else if(baudValue <= 4800) return BAUD_4800;
   17210:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   17214:	d927      	bls.n	17266 <CComUart::CalcBaudRate(unsigned int)+0x7a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:90
	else if(baudValue <= 9600) return BAUD_9600;
   17216:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   1721a:	d926      	bls.n	1726a <CComUart::CalcBaudRate(unsigned int)+0x7e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:91
	else if(baudValue <= 14400) return BAUD_14400;
   1721c:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   17220:	d925      	bls.n	1726e <CComUart::CalcBaudRate(unsigned int)+0x82>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:92
	else if(baudValue <= 19200) return BAUD_19200;
   17222:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   17226:	d924      	bls.n	17272 <CComUart::CalcBaudRate(unsigned int)+0x86>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:93
	else if(baudValue <= 38400) return BAUD_38400;
   17228:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   1722c:	d923      	bls.n	17276 <CComUart::CalcBaudRate(unsigned int)+0x8a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:94
	else if(baudValue <= 57600) return BAUD_57600;
   1722e:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   17232:	d922      	bls.n	1727a <CComUart::CalcBaudRate(unsigned int)+0x8e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:95
	else if(baudValue <= 115200) return BAUD_115200;
   17234:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   17238:	d921      	bls.n	1727e <CComUart::CalcBaudRate(unsigned int)+0x92>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:96
	else if(baudValue <= 230400) return BAUD_230400;
   1723a:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   1723e:	d920      	bls.n	17282 <CComUart::CalcBaudRate(unsigned int)+0x96>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:97
	else if(baudValue <= 460800) return BAUD_460800;
   17240:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   17244:	d81f      	bhi.n	17286 <CComUart::CalcBaudRate(unsigned int)+0x9a>
   17246:	200f      	movs	r0, #15
   17248:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:82
@param baudValue The baud value to round to the nearest enumerated value
@result The baud rate enumeration
*/
EUartBaud CComUart::CalcBaudRate(uint32 baudValue)
{
	if(baudValue <= 75) return BAUD_75;
   1724a:	2000      	movs	r0, #0
   1724c:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:83
	else if(baudValue <= 110) return BAUD_110;
   1724e:	2001      	movs	r0, #1
   17250:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:84
	else if(baudValue <= 150) return BAUD_150;
   17252:	2002      	movs	r0, #2
   17254:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:85
	else if(baudValue <= 300) return BAUD_300;
   17256:	2003      	movs	r0, #3
   17258:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:86
	else if(baudValue <= 600) return BAUD_600;
   1725a:	2004      	movs	r0, #4
   1725c:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:87
	else if(baudValue <= 1200) return BAUD_1200;
   1725e:	2005      	movs	r0, #5
   17260:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:88
	else if(baudValue <= 2400) return BAUD_2400;
   17262:	2006      	movs	r0, #6
   17264:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:89
	else if(baudValue <= 4800) return BAUD_4800;
   17266:	2007      	movs	r0, #7
   17268:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:90
	else if(baudValue <= 9600) return BAUD_9600;
   1726a:	2008      	movs	r0, #8
   1726c:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:91
	else if(baudValue <= 14400) return BAUD_14400;
   1726e:	2009      	movs	r0, #9
   17270:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:92
	else if(baudValue <= 19200) return BAUD_19200;
   17272:	200a      	movs	r0, #10
   17274:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:93
	else if(baudValue <= 38400) return BAUD_38400;
   17276:	200b      	movs	r0, #11
   17278:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:94
	else if(baudValue <= 57600) return BAUD_57600;
   1727a:	200c      	movs	r0, #12
   1727c:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:95
	else if(baudValue <= 115200) return BAUD_115200;
   1727e:	200d      	movs	r0, #13
   17280:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:96
	else if(baudValue <= 230400) return BAUD_230400;
   17282:	200e      	movs	r0, #14
   17284:	4770      	bx	lr
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:98
	else if(baudValue <= 460800) return BAUD_460800;
	else return BAUD_921600; //if(baudValue <= 921600)
   17286:	2010      	movs	r0, #16
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:99
}
   17288:	4770      	bx	lr
   1728a:	bf00      	nop

0001728c <CComUart::SetBaudRate(EUartBaud)>:
_ZN8CComUart11SetBaudRateE9EUartBaud():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:571
/*!-----------------------------------------------------------------------------
*/
void CComUart::SetBaudRate(EUartBaud value)
{
	//Store the baud rate if the port is closed
	if(!_open)
   1728c:	7a03      	ldrb	r3, [r0, #8]
   1728e:	b903      	cbnz	r3, 17292 <CComUart::SetBaudRate(EUartBaud)+0x6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:572
		_baud = value;
   17290:	7101      	strb	r1, [r0, #4]
   17292:	4770      	bx	lr

00017294 <CComUart::SetParity(EUartParity)>:
_ZN8CComUart9SetParityE11EUartParity():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:580
/*!-----------------------------------------------------------------------------
*/
void CComUart::SetParity(EUartParity value)
{
	//Setup the parity if the port is closed
	if(!_open)
   17294:	7a03      	ldrb	r3, [r0, #8]
   17296:	b903      	cbnz	r3, 1729a <CComUart::SetParity(EUartParity)+0x6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:581
		_parity = value;
   17298:	71c1      	strb	r1, [r0, #7]
   1729a:	4770      	bx	lr

0001729c <CFifoBuffer<unsigned char>::~CFifoBuffer()>:
_ZN11CFifoBufferIhED2Ev():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:95

/*!-----------------------------------------------------------------------------
Destroy the ring buffer and release resources used
*/
template <class T>
CFifoBuffer<T>::~CFifoBuffer()
   1729c:	b510      	push	{r4, lr}
   1729e:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:98
{
	//Release the data used
	free(_data);	
   172a0:	6880      	ldr	r0, [r0, #8]
   172a2:	f001 fb61 	bl	18968 <free>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:99
}
   172a6:	4620      	mov	r0, r4
   172a8:	bd10      	pop	{r4, pc}
   172aa:	bf00      	nop

000172ac <CFifoBuffer<unsigned char>::Clear()>:
_ZN11CFifoBufferIhE5ClearEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:107
Function that clears the contents of the buffer
*/
template <class T>
void CFifoBuffer<T>::Clear()
{
	_count = 0;
   172ac:	2300      	movs	r3, #0
   172ae:	6043      	str	r3, [r0, #4]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:108
	_idxRead = 0;
   172b0:	60c3      	str	r3, [r0, #12]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:109
	_idxWrite = 0;
   172b2:	6103      	str	r3, [r0, #16]
   172b4:	4770      	bx	lr
   172b6:	bf00      	nop

000172b8 <CComUart::Clear(bool, bool)>:
_ZN8CComUart5ClearEbb():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:105

/*!-----------------------------------------------------------------------------
Function that clears down the specified UART buffers
*/
void CComUart::Clear(bool rx, bool tx)
{
   172b8:	b538      	push	{r3, r4, r5, lr}
   172ba:	4605      	mov	r5, r0
   172bc:	4614      	mov	r4, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:106
	IRQ_DISABLE;
   172be:	b672      	cpsid	i
   172c0:	4b0f      	ldr	r3, [pc, #60]	; (17300 <CComUart::Clear(bool, bool)+0x48>)
   172c2:	781a      	ldrb	r2, [r3, #0]
   172c4:	3201      	adds	r2, #1
   172c6:	b2d2      	uxtb	r2, r2
   172c8:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:107
	if(rx)
   172ca:	b111      	cbz	r1, 172d2 <CComUart::Clear(bool, bool)+0x1a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:108
		_rxBuffer->Clear();
   172cc:	68c0      	ldr	r0, [r0, #12]
   172ce:	f7ff ffed 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:109
	if(tx)
   172d2:	b114      	cbz	r4, 172da <CComUart::Clear(bool, bool)+0x22>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:110
		_txBuffer->Clear();
   172d4:	6928      	ldr	r0, [r5, #16]
   172d6:	f7ff ffe9 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:111
	IRQ_ENABLE;
   172da:	b672      	cpsid	i
   172dc:	4b08      	ldr	r3, [pc, #32]	; (17300 <CComUart::Clear(bool, bool)+0x48>)
   172de:	781b      	ldrb	r3, [r3, #0]
   172e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   172e4:	d004      	beq.n	172f0 <CComUart::Clear(bool, bool)+0x38>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:111 (discriminator 1)
   172e6:	4b06      	ldr	r3, [pc, #24]	; (17300 <CComUart::Clear(bool, bool)+0x48>)
   172e8:	781a      	ldrb	r2, [r3, #0]
   172ea:	3a01      	subs	r2, #1
   172ec:	b2d2      	uxtb	r2, r2
   172ee:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:111 (discriminator 2)
   172f0:	4b03      	ldr	r3, [pc, #12]	; (17300 <CComUart::Clear(bool, bool)+0x48>)
   172f2:	781b      	ldrb	r3, [r3, #0]
   172f4:	f013 0fff 	tst.w	r3, #255	; 0xff
   172f8:	d100      	bne.n	172fc <CComUart::Clear(bool, bool)+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:111 (discriminator 1)
   172fa:	b662      	cpsie	i
   172fc:	bd38      	pop	{r3, r4, r5, pc}
   172fe:	bf00      	nop
   17300:	1fff0310 	.word	0x1fff0310

00017304 <CComUart::Close()>:
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:119
/*!-----------------------------------------------------------------------------
Function that is called to close the serial ports connect to the COM port
and free up the UART hardware.
*/
void CComUart::Close(void)
{
   17304:	b510      	push	{r4, lr}
   17306:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:120
	if(_open) {
   17308:	7a03      	ldrb	r3, [r0, #8]
   1730a:	2b00      	cmp	r3, #0
   1730c:	d064      	beq.n	173d8 <CComUart::Close()+0xd4>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:124
		//Force the transmitter enable to false regardless of current state
		//(This allows inheriting classes to set half-duplex control states
		//back to receive before shut down)
		this->DoTxMode(false, true);
   1730e:	6803      	ldr	r3, [r0, #0]
   17310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17312:	2100      	movs	r1, #0
   17314:	2201      	movs	r2, #1
   17316:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:127

		//Disable the UART hardware and interrupts
		CLR_BITS(_uart->C2, UART_C2_TIE_MASK | UART_C2_RIE_MASK | UART_C2_TE_MASK | UART_C2_RE_MASK);
   17318:	69a3      	ldr	r3, [r4, #24]
   1731a:	78da      	ldrb	r2, [r3, #3]
   1731c:	f002 0253 	and.w	r2, r2, #83	; 0x53
   17320:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:130

		//Turn off the UART port clock
		switch (_port) {
   17322:	7a63      	ldrb	r3, [r4, #9]
   17324:	2b05      	cmp	r3, #5
   17326:	d851      	bhi.n	173cc <CComUart::Close()+0xc8>
   17328:	e8df f003 	tbb	[pc, r3]
   1732c:	2a1d1003 	.word	0x2a1d1003
   17330:	4437      	.short	0x4437
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   17332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17336:	4b2b      	ldr	r3, [pc, #172]	; (173e4 <CComUart::Close()+0xe0>)
   17338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:133
			case 0 : {
				NVIC_DisableIRQ(UART0_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC4, SIM_SCGC4_UART0_MASK);
   1733c:	4a2a      	ldr	r2, [pc, #168]	; (173e8 <CComUart::Close()+0xe4>)
   1733e:	f241 0334 	movw	r3, #4148	; 0x1034
   17342:	58d1      	ldr	r1, [r2, r3]
   17344:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   17348:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:134
				break;
   1734a:	e03f      	b.n	173cc <CComUart::Close()+0xc8>
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
   1734c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   17350:	4b24      	ldr	r3, [pc, #144]	; (173e4 <CComUart::Close()+0xe0>)
   17352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:138
			}
			case 1 : {
				NVIC_DisableIRQ(UART1_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC4, SIM_SCGC4_UART1_MASK);
   17356:	4a24      	ldr	r2, [pc, #144]	; (173e8 <CComUart::Close()+0xe4>)
   17358:	f241 0334 	movw	r3, #4148	; 0x1034
   1735c:	58d1      	ldr	r1, [r2, r3]
   1735e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   17362:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:139
				break;
   17364:	e032      	b.n	173cc <CComUart::Close()+0xc8>
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
   17366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1736a:	4b1e      	ldr	r3, [pc, #120]	; (173e4 <CComUart::Close()+0xe0>)
   1736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:143
			}
			case 2 : {
				NVIC_DisableIRQ(UART2_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC4, SIM_SCGC4_UART2_MASK);
   17370:	4a1d      	ldr	r2, [pc, #116]	; (173e8 <CComUart::Close()+0xe4>)
   17372:	f241 0334 	movw	r3, #4148	; 0x1034
   17376:	58d1      	ldr	r1, [r2, r3]
   17378:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1737c:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:144
				break;
   1737e:	e025      	b.n	173cc <CComUart::Close()+0xc8>
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
   17380:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   17384:	4b17      	ldr	r3, [pc, #92]	; (173e4 <CComUart::Close()+0xe0>)
   17386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:149
			}
			#if UART_PERIPHERALS >= 4
			case 3 : {
				NVIC_DisableIRQ(UART3_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC4, SIM_SCGC4_UART3_MASK);
   1738a:	4a17      	ldr	r2, [pc, #92]	; (173e8 <CComUart::Close()+0xe4>)
   1738c:	f241 0334 	movw	r3, #4148	; 0x1034
   17390:	58d1      	ldr	r1, [r2, r3]
   17392:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   17396:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:150
				break;
   17398:	e018      	b.n	173cc <CComUart::Close()+0xc8>
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
   1739a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1739e:	4b11      	ldr	r3, [pc, #68]	; (173e4 <CComUart::Close()+0xe0>)
   173a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:156
			}
			#endif
			#if UART_PERIPHERALS >= 5
			case 4 : {
				NVIC_DisableIRQ(UART4_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC1, SIM_SCGC1_UART4_MASK);
   173a4:	4a10      	ldr	r2, [pc, #64]	; (173e8 <CComUart::Close()+0xe4>)
   173a6:	f241 0328 	movw	r3, #4136	; 0x1028
   173aa:	58d1      	ldr	r1, [r2, r3]
   173ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
   173b0:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:157
				break;
   173b2:	e00b      	b.n	173cc <CComUart::Close()+0xc8>
NVIC_DisableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1639
   173b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   173b8:	4b0a      	ldr	r3, [pc, #40]	; (173e4 <CComUart::Close()+0xe0>)
   173ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
_ZN8CComUart5CloseEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:163
			}
			#endif
			#if UART_PERIPHERALS >= 6
			case 5 : {
				NVIC_DisableIRQ(UART5_RX_TX_IRQn);
				CLR_BITS(SIM->SCGC1, SIM_SCGC1_UART5_MASK);
   173be:	4a0a      	ldr	r2, [pc, #40]	; (173e8 <CComUart::Close()+0xe4>)
   173c0:	f241 0328 	movw	r3, #4136	; 0x1028
   173c4:	58d1      	ldr	r1, [r2, r3]
   173c6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   173ca:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:170
			}
			#endif
		}

		//Clear the UART 'serial port' handler pointer for the COM port
		CComUart::Uart[_port] = NULL;
   173cc:	7a61      	ldrb	r1, [r4, #9]
   173ce:	2300      	movs	r3, #0
   173d0:	4a06      	ldr	r2, [pc, #24]	; (173ec <CComUart::Close()+0xe8>)
   173d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:173

		//Clear the UART control structure
		_uart = NULL;
   173d6:	61a3      	str	r3, [r4, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:177
	}

	//Clear the Transmit Buffer
	_txBuffer->Clear();
   173d8:	6920      	ldr	r0, [r4, #16]
   173da:	f7ff ff67 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:180

	//Indicate the port is closed
	_open = false;
   173de:	2300      	movs	r3, #0
   173e0:	7223      	strb	r3, [r4, #8]
   173e2:	bd10      	pop	{r4, pc}
   173e4:	e000e100 	.word	0xe000e100
   173e8:	40047000 	.word	0x40047000
   173ec:	1fff00c0 	.word	0x1fff00c0

000173f0 <CComUart::~CComUart()>:
_ZN8CComUartD2Ev():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:36
	_txEnable = false;
}

/*!-----------------------------------------------------------------------------
*/
CComUart::~CComUart()
   173f0:	b538      	push	{r3, r4, r5, lr}
   173f2:	4604      	mov	r4, r0
   173f4:	4b0a      	ldr	r3, [pc, #40]	; (17420 <CComUart::~CComUart()+0x30>)
   173f6:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:39
{
	//Close the port (and release the UART)
	this->Close();
   173f8:	f7ff ff84 	bl	17304 <CComUart::Close()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:42

	//Destroy resources
	delete _rxBuffer;
   173fc:	68e5      	ldr	r5, [r4, #12]
   173fe:	b12d      	cbz	r5, 1740c <CComUart::~CComUart()+0x1c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:42 (discriminator 1)
   17400:	4628      	mov	r0, r5
   17402:	f7ff ff4b 	bl	1729c <CFifoBuffer<unsigned char>::~CFifoBuffer()>
   17406:	4628      	mov	r0, r5
   17408:	f001 f902 	bl	18610 <operator delete(void*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:43
	delete _txBuffer;
   1740c:	6925      	ldr	r5, [r4, #16]
   1740e:	b12d      	cbz	r5, 1741c <CComUart::~CComUart()+0x2c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:43 (discriminator 1)
   17410:	4628      	mov	r0, r5
   17412:	f7ff ff43 	bl	1729c <CFifoBuffer<unsigned char>::~CFifoBuffer()>
   17416:	4628      	mov	r0, r5
   17418:	f001 f8fa 	bl	18610 <operator delete(void*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:44
}
   1741c:	4620      	mov	r0, r4
   1741e:	bd38      	pop	{r3, r4, r5, pc}
   17420:	0001a2e8 	.word	0x0001a2e8

00017424 <CComUart::~CComUart()>:
_ZN8CComUartD0Ev():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:36
	_txEnable = false;
}

/*!-----------------------------------------------------------------------------
*/
CComUart::~CComUart()
   17424:	b510      	push	{r4, lr}
   17426:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:44
	this->Close();

	//Destroy resources
	delete _rxBuffer;
	delete _txBuffer;
}
   17428:	f7ff ffe2 	bl	173f0 <CComUart::~CComUart()>
   1742c:	4620      	mov	r0, r4
   1742e:	f001 f8ef 	bl	18610 <operator delete(void*)>
   17432:	4620      	mov	r0, r4
   17434:	bd10      	pop	{r4, pc}
   17436:	bf00      	nop

00017438 <CComUart::Open()>:
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:391
Function that is called to open the serial ports on the specified COM port
and initialise the UART hardware
@result True if the port was opened successfully, False if the port cannot be opened
*/
bool CComUart::Open(void)
{
   17438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1743a:	4606      	mov	r6, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:400
	double uartDivisor;
	uint16 uartSBR;
	uint8 uartBRFD;

	//Abort if the serial port is already open, but return success
	if(_open)
   1743c:	7a00      	ldrb	r0, [r0, #8]
   1743e:	2800      	cmp	r0, #0
   17440:	f040 80f5 	bne.w	1762e <CComUart::Open()+0x1f6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:404
		return true;

	//If another serial port object has already connected to the UART, then abort
	if((_port >= UART_PERIPHERALS) || (CComUart::Uart[_port] != NULL))
   17444:	7a73      	ldrb	r3, [r6, #9]
   17446:	2b05      	cmp	r3, #5
   17448:	f200 80f1 	bhi.w	1762e <CComUart::Open()+0x1f6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:404 (discriminator 1)
   1744c:	4a78      	ldr	r2, [pc, #480]	; (17630 <CComUart::Open()+0x1f8>)
   1744e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   17452:	2a00      	cmp	r2, #0
   17454:	f040 80eb 	bne.w	1762e <CComUart::Open()+0x1f6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:409
		return false;

	//Get the UART access structure for the specified COM port
	//and other hardware specific variables
	switch (_port) {
   17458:	2b05      	cmp	r3, #5
   1745a:	f200 80e8 	bhi.w	1762e <CComUart::Open()+0x1f6>
   1745e:	e8df f003 	tbb	[pc, r3]
   17462:	1303      	.short	0x1303
   17464:	53433323 	.word	0x53433323
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:411
		case 0 : {
			_uart = UART0;
   17468:	4b72      	ldr	r3, [pc, #456]	; (17634 <CComUart::Open()+0x1fc>)
   1746a:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:412
			uartClk = CMcg::ClkSysFreq; //CLK_SYS_Hz;
   1746c:	4b72      	ldr	r3, [pc, #456]	; (17638 <CComUart::Open()+0x200>)
   1746e:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:413
			SET_BITS(SIM->SCGC4, SIM_SCGC4_UART0_MASK);
   17470:	4a72      	ldr	r2, [pc, #456]	; (1763c <CComUart::Open()+0x204>)
   17472:	f241 0334 	movw	r3, #4148	; 0x1034
   17476:	58d1      	ldr	r1, [r2, r3]
   17478:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   1747c:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1747e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17482:	4b6f      	ldr	r3, [pc, #444]	; (17640 <CComUart::Open()+0x208>)
   17484:	605a      	str	r2, [r3, #4]
   17486:	e04e      	b.n	17526 <CComUart::Open()+0xee>
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:418
			NVIC_EnableIRQ(UART0_RX_TX_IRQn);
			break;
		}
		case 1 : {
			_uart = UART1;
   17488:	4b6e      	ldr	r3, [pc, #440]	; (17644 <CComUart::Open()+0x20c>)
   1748a:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:419
			uartClk = CMcg::ClkSysFreq; //CLK_SYS_Hz;
   1748c:	4b6a      	ldr	r3, [pc, #424]	; (17638 <CComUart::Open()+0x200>)
   1748e:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:420
			SET_BITS(SIM->SCGC4, SIM_SCGC4_UART1_MASK);
   17490:	4a6a      	ldr	r2, [pc, #424]	; (1763c <CComUart::Open()+0x204>)
   17492:	f241 0334 	movw	r3, #4148	; 0x1034
   17496:	58d1      	ldr	r1, [r2, r3]
   17498:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1749c:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
   1749e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   174a2:	4b67      	ldr	r3, [pc, #412]	; (17640 <CComUart::Open()+0x208>)
   174a4:	605a      	str	r2, [r3, #4]
   174a6:	e03e      	b.n	17526 <CComUart::Open()+0xee>
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:425
			NVIC_EnableIRQ(UART1_RX_TX_IRQn);
			break;
		}
		case 2 : {
			_uart = UART2;
   174a8:	4b67      	ldr	r3, [pc, #412]	; (17648 <CComUart::Open()+0x210>)
   174aa:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:426
			uartClk = CMcg::ClkIntBusFreq; //CLK_BUS_Hz;
   174ac:	4b67      	ldr	r3, [pc, #412]	; (1764c <CComUart::Open()+0x214>)
   174ae:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:427
			SET_BITS(SIM->SCGC4, SIM_SCGC4_UART2_MASK);
   174b0:	4a62      	ldr	r2, [pc, #392]	; (1763c <CComUart::Open()+0x204>)
   174b2:	f241 0334 	movw	r3, #4148	; 0x1034
   174b6:	58d1      	ldr	r1, [r2, r3]
   174b8:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   174bc:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
   174be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   174c2:	4b5f      	ldr	r3, [pc, #380]	; (17640 <CComUart::Open()+0x208>)
   174c4:	605a      	str	r2, [r3, #4]
   174c6:	e02e      	b.n	17526 <CComUart::Open()+0xee>
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:433
			NVIC_EnableIRQ(UART2_RX_TX_IRQn);
			break;
		}
		#if UART_PERIPHERALS >= 4
		case 3 : {
			_uart = UART3;
   174c8:	4b61      	ldr	r3, [pc, #388]	; (17650 <CComUart::Open()+0x218>)
   174ca:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:434
			uartClk = CMcg::ClkIntBusFreq; //CLK_BUS_Hz;
   174cc:	4b5f      	ldr	r3, [pc, #380]	; (1764c <CComUart::Open()+0x214>)
   174ce:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:435
			SET_BITS(SIM->SCGC4, SIM_SCGC4_UART3_MASK);
   174d0:	4a5a      	ldr	r2, [pc, #360]	; (1763c <CComUart::Open()+0x204>)
   174d2:	f241 0334 	movw	r3, #4148	; 0x1034
   174d6:	58d1      	ldr	r1, [r2, r3]
   174d8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   174dc:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
   174de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   174e2:	4b57      	ldr	r3, [pc, #348]	; (17640 <CComUart::Open()+0x208>)
   174e4:	605a      	str	r2, [r3, #4]
   174e6:	e01e      	b.n	17526 <CComUart::Open()+0xee>
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:442
			break;
		}
		#endif
		#if UART_PERIPHERALS >= 5
		case 4 : {
			_uart = UART4;
   174e8:	4b5a      	ldr	r3, [pc, #360]	; (17654 <CComUart::Open()+0x21c>)
   174ea:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:443
			uartClk = CMcg::ClkIntBusFreq; //CLK_BUS_Hz;
   174ec:	4b57      	ldr	r3, [pc, #348]	; (1764c <CComUart::Open()+0x214>)
   174ee:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:444
			SET_BITS(SIM->SCGC1, SIM_SCGC1_UART4_MASK);
   174f0:	4a52      	ldr	r2, [pc, #328]	; (1763c <CComUart::Open()+0x204>)
   174f2:	f241 0328 	movw	r3, #4136	; 0x1028
   174f6:	58d1      	ldr	r1, [r2, r3]
   174f8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   174fc:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
   174fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   17502:	4b4f      	ldr	r3, [pc, #316]	; (17640 <CComUart::Open()+0x208>)
   17504:	605a      	str	r2, [r3, #4]
   17506:	e00e      	b.n	17526 <CComUart::Open()+0xee>
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:451
			break;
		}
		#endif
		#if UART_PERIPHERALS >= 6
		case 5 : {
			_uart = UART5;
   17508:	4b53      	ldr	r3, [pc, #332]	; (17658 <CComUart::Open()+0x220>)
   1750a:	61b3      	str	r3, [r6, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:452
			uartClk = CMcg::ClkIntBusFreq; //CLK_BUS_Hz;
   1750c:	4b4f      	ldr	r3, [pc, #316]	; (1764c <CComUart::Open()+0x214>)
   1750e:	681c      	ldr	r4, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:453
			SET_BITS(SIM->SCGC1, SIM_SCGC1_UART5_MASK);
   17510:	4a4a      	ldr	r2, [pc, #296]	; (1763c <CComUart::Open()+0x204>)
   17512:	f241 0328 	movw	r3, #4136	; 0x1028
   17516:	58d1      	ldr	r1, [r2, r3]
   17518:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   1751c:	50d1      	str	r1, [r2, r3]
NVIC_EnableIRQ():
C:\Users\s.morris\OculusHub\BpDevices_K60\headers/cmsis/core_cm4.h:1628
   1751e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   17522:	4b47      	ldr	r3, [pc, #284]	; (17640 <CComUart::Open()+0x208>)
   17524:	605a      	str	r2, [r3, #4]
_ZN8CComUart4OpenEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:465
		}
	}

	//Connect the serial port object to the COM port.
	//This prevents another serial port object form connecting while this is open.
	CComUart::Uart[_port] = this;
   17526:	7a72      	ldrb	r2, [r6, #9]
   17528:	4b41      	ldr	r3, [pc, #260]	; (17630 <CComUart::Open()+0x1f8>)
   1752a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:468

	//Empty buffers
	_rxBuffer->Clear();
   1752e:	68f0      	ldr	r0, [r6, #12]
   17530:	f7ff febc 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:469
	_txBuffer->Clear();
   17534:	6930      	ldr	r0, [r6, #16]
   17536:	f7ff feb9 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:475

	//------------------------------
	//SETUP BAUD RATE...
	//Calculate the minimum baud rate the UART can achieve from the CLK
	//NB: 8191 is the maximum value than can be loaded into SBR (2^13 - 1)
	uartBaudMin = uartClk / (16 * 8191);
   1753a:	0925      	lsrs	r5, r4, #4
   1753c:	4b47      	ldr	r3, [pc, #284]	; (1765c <CComUart::Open()+0x224>)
   1753e:	fba3 2505 	umull	r2, r5, r3, r5
   17542:	0a6d      	lsrs	r5, r5, #9
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:478

	//Calculate the actual baud rate from the enumeration
	uartBaud = CComUart::CalcBaudValue(_baud);
   17544:	7930      	ldrb	r0, [r6, #4]
   17546:	f7ff fe11 	bl	1716c <CComUart::CalcBaudValue(EUartBaud)>
   1754a:	4607      	mov	r7, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:481

	//Ensure the baud rate is achievable on the hardware, and recompute if not
	if(uartBaud < uartBaudMin) {
   1754c:	42a8      	cmp	r0, r5
   1754e:	d206      	bcs.n	1755e <CComUart::Open()+0x126>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:482
		_baud = CComUart::CalcBaudRate(uartBaudMin);
   17550:	4628      	mov	r0, r5
   17552:	f7ff fe4b 	bl	171ec <CComUart::CalcBaudRate(unsigned int)>
   17556:	7130      	strb	r0, [r6, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:483
		uartBaud = CComUart::CalcBaudValue(_baud);
   17558:	f7ff fe08 	bl	1716c <CComUart::CalcBaudValue(EUartBaud)>
   1755c:	4607      	mov	r7, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:487
	}

	//Calculate the UART divisor (SBR + BRFD)
	uartDivisor = (double)uartClk / (16.0 * (double)uartBaud);
   1755e:	4620      	mov	r0, r4
   17560:	f7fe fcbe 	bl	15ee0 <__aeabi_ui2d>
   17564:	4604      	mov	r4, r0
   17566:	460d      	mov	r5, r1
   17568:	4638      	mov	r0, r7
   1756a:	f7fe fcb9 	bl	15ee0 <__aeabi_ui2d>
   1756e:	2200      	movs	r2, #0
   17570:	4b3b      	ldr	r3, [pc, #236]	; (17660 <CComUart::Open()+0x228>)
   17572:	f7fe fd2b 	bl	15fcc <__aeabi_dmul>
   17576:	4602      	mov	r2, r0
   17578:	460b      	mov	r3, r1
   1757a:	4620      	mov	r0, r4
   1757c:	4629      	mov	r1, r5
   1757e:	f7fe fe4f 	bl	16220 <__aeabi_ddiv>
   17582:	4604      	mov	r4, r0
   17584:	460d      	mov	r5, r1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:491

	//Calculate the UART's baud rate divisors - SBR for the Serial Baud Rate
	//and BRFD for Baud Rate Fractional Divisor, in 1/32'nds
	uartSBR = ((uint16)uartDivisor) & 0x0FFF;
   17586:	f7fe ffe3 	bl	16550 <__aeabi_d2uiz>
   1758a:	f3c0 070b 	ubfx	r7, r0, #0, #12
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:492
	uartBRFD = ((uint8)((uartDivisor - (double)uartSBR) * 32.0)) & 0x1F;
   1758e:	4638      	mov	r0, r7
   17590:	f7fe fca6 	bl	15ee0 <__aeabi_ui2d>
   17594:	4602      	mov	r2, r0
   17596:	460b      	mov	r3, r1
   17598:	4620      	mov	r0, r4
   1759a:	4629      	mov	r1, r5
   1759c:	f7fe fb62 	bl	15c64 <__aeabi_dsub>
   175a0:	2200      	movs	r2, #0
   175a2:	4b30      	ldr	r3, [pc, #192]	; (17664 <CComUart::Open()+0x22c>)
   175a4:	f7fe fd12 	bl	15fcc <__aeabi_dmul>
   175a8:	f7fe ffd2 	bl	16550 <__aeabi_d2uiz>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:495

	//Setup the UART's baud rate
	_uart->BDH = (uint8)((uartSBR >> 8) & 0xFF);
   175ac:	69b3      	ldr	r3, [r6, #24]
   175ae:	0a3a      	lsrs	r2, r7, #8
   175b0:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:496
	_uart->BDL = (uint8)((uartSBR) & 0xFF);
   175b2:	69b3      	ldr	r3, [r6, #24]
   175b4:	b2ff      	uxtb	r7, r7
   175b6:	705f      	strb	r7, [r3, #1]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:497
	CLR_BITS(_uart->C4, UART_C4_BRFA_MASK);
   175b8:	69b3      	ldr	r3, [r6, #24]
   175ba:	7a9a      	ldrb	r2, [r3, #10]
   175bc:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   175c0:	729a      	strb	r2, [r3, #10]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:498
	SET_BITS(_uart->C4, UART_C4_BRFA(uartBRFD));
   175c2:	69b3      	ldr	r3, [r6, #24]
   175c4:	7a9a      	ldrb	r2, [r3, #10]
   175c6:	f000 001f 	and.w	r0, r0, #31
   175ca:	4302      	orrs	r2, r0
   175cc:	729a      	strb	r2, [r3, #10]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:502

	//------------------------------
	//SETUP PARITY...
	if(_parity == PARITY_NONE) {
   175ce:	79f3      	ldrb	r3, [r6, #7]
   175d0:	b92b      	cbnz	r3, 175de <CComUart::Open()+0x1a6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:504
		//Disable Parity
		CLR_BITS(_uart->C1, UART_C1_PE_MASK);
   175d2:	69b3      	ldr	r3, [r6, #24]
   175d4:	789a      	ldrb	r2, [r3, #2]
   175d6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
   175da:	709a      	strb	r2, [r3, #2]
   175dc:	e012      	b.n	17604 <CComUart::Open()+0x1cc>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:508
	}
	else {
		//Enable parity
		_uart->C1 |= UART_C1_PE_MASK;
   175de:	69b3      	ldr	r3, [r6, #24]
   175e0:	789a      	ldrb	r2, [r3, #2]
   175e2:	f042 0202 	orr.w	r2, r2, #2
   175e6:	709a      	strb	r2, [r3, #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:509
		if(_parity == PARITY_ODD)
   175e8:	79f3      	ldrb	r3, [r6, #7]
   175ea:	2b01      	cmp	r3, #1
   175ec:	d105      	bne.n	175fa <CComUart::Open()+0x1c2>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:510
			SET_BITS(_uart->C1, UART_C1_PT_MASK);
   175ee:	69b3      	ldr	r3, [r6, #24]
   175f0:	789a      	ldrb	r2, [r3, #2]
   175f2:	f042 0201 	orr.w	r2, r2, #1
   175f6:	709a      	strb	r2, [r3, #2]
   175f8:	e004      	b.n	17604 <CComUart::Open()+0x1cc>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:512
		else
			CLR_BITS(_uart->C1, UART_C1_PT_MASK);
   175fa:	69b3      	ldr	r3, [r6, #24]
   175fc:	789a      	ldrb	r2, [r3, #2]
   175fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   17602:	709a      	strb	r2, [r3, #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:517
	}

	//------------------------------
	//SETUP LOOPBACK...
	if(_loopback)
   17604:	79b3      	ldrb	r3, [r6, #6]
   17606:	b12b      	cbz	r3, 17614 <CComUart::Open()+0x1dc>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:518
		SET_BITS(_uart->C1, UART_C1_LOOPS_MASK);
   17608:	69b3      	ldr	r3, [r6, #24]
   1760a:	789a      	ldrb	r2, [r3, #2]
   1760c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17610:	709a      	strb	r2, [r3, #2]
   17612:	e004      	b.n	1761e <CComUart::Open()+0x1e6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:520
	else
		CLR_BITS(_uart->C1, UART_C1_LOOPS_MASK);
   17614:	69b3      	ldr	r3, [r6, #24]
   17616:	789a      	ldrb	r2, [r3, #2]
   17618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1761c:	709a      	strb	r2, [r3, #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:525

	//------------------------------
	//Setup the Transmitter into Receive mode (regardless of current state)
	//this disables the transmitter interrupts and allows reception interrupts to start
	this->DoTxMode(false, true);
   1761e:	6833      	ldr	r3, [r6, #0]
   17620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17622:	4630      	mov	r0, r6
   17624:	2100      	movs	r1, #0
   17626:	2201      	movs	r2, #1
   17628:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:528

	//Mark the port as open
	_open = true;
   1762a:	2001      	movs	r0, #1
   1762c:	7230      	strb	r0, [r6, #8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:532

	//Indicate success
	return true;
}
   1762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17630:	1fff00c0 	.word	0x1fff00c0
   17634:	4006a000 	.word	0x4006a000
   17638:	1fff00f8 	.word	0x1fff00f8
   1763c:	40047000 	.word	0x40047000
   17640:	e000e100 	.word	0xe000e100
   17644:	4006b000 	.word	0x4006b000
   17648:	4006c000 	.word	0x4006c000
   1764c:	1fff00dc 	.word	0x1fff00dc
   17650:	4006d000 	.word	0x4006d000
   17654:	400ea000 	.word	0x400ea000
   17658:	400eb000 	.word	0x400eb000
   1765c:	10008005 	.word	0x10008005
   17660:	40300000 	.word	0x40300000
   17664:	40400000 	.word	0x40400000

00017668 <CFifoBuffer<unsigned char>::Push(unsigned char)>:
_ZN11CFifoBufferIhE4PushEh():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:189
@result False is the buffer is full and the element couldn't be added
*/
template <class T>
bool CFifoBuffer<T>::Push(T value)
{
	if(_count < _capacity) {
   17668:	6842      	ldr	r2, [r0, #4]
   1766a:	6803      	ldr	r3, [r0, #0]
   1766c:	429a      	cmp	r2, r3
   1766e:	d211      	bcs.n	17694 <CFifoBuffer<unsigned char>::Push(unsigned char)+0x2c>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:191
		//Put the element onto the buffer
		_data[_idxWrite] = value;
   17670:	6902      	ldr	r2, [r0, #16]
   17672:	6883      	ldr	r3, [r0, #8]
   17674:	5499      	strb	r1, [r3, r2]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:192
		_count++;
   17676:	6843      	ldr	r3, [r0, #4]
   17678:	3301      	adds	r3, #1
   1767a:	6043      	str	r3, [r0, #4]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:193
		_idxWrite++;
   1767c:	6903      	ldr	r3, [r0, #16]
   1767e:	3301      	adds	r3, #1
   17680:	6103      	str	r3, [r0, #16]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:194
		if(_idxWrite >= _capacity)
   17682:	6902      	ldr	r2, [r0, #16]
   17684:	6803      	ldr	r3, [r0, #0]
   17686:	429a      	cmp	r2, r3
   17688:	d306      	bcc.n	17698 <CFifoBuffer<unsigned char>::Push(unsigned char)+0x30>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:195
			_idxWrite -= _capacity;
   1768a:	6902      	ldr	r2, [r0, #16]
   1768c:	1ad3      	subs	r3, r2, r3
   1768e:	6103      	str	r3, [r0, #16]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:196
		return true;
   17690:	2001      	movs	r0, #1
   17692:	4770      	bx	lr
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:200
	}
	else {
		//The buffer is full
		return false;
   17694:	2000      	movs	r0, #0
   17696:	4770      	bx	lr
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:196
		_data[_idxWrite] = value;
		_count++;
		_idxWrite++;
		if(_idxWrite >= _capacity)
			_idxWrite -= _capacity;
		return true;
   17698:	2001      	movs	r0, #1
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:202
	}
	else {
		//The buffer is full
		return false;
	}
}
   1769a:	4770      	bx	lr

0001769c <CComUart::WriteByte(unsigned char)>:
_ZN8CComUart9WriteByteEh():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:629
If the buffer capacity is full, then this function will block, until UART
transmission frees further space in the buffer.
@param data The data byte to write
*/
void CComUart::WriteByte(uint8 data)
{
   1769c:	b570      	push	{r4, r5, r6, lr}
   1769e:	b082      	sub	sp, #8
   176a0:	4604      	mov	r4, r0
   176a2:	460d      	mov	r5, r1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:631
	//Only write data if the port is open
	if(_open) {
   176a4:	7a03      	ldrb	r3, [r0, #8]
   176a6:	2b00      	cmp	r3, #0
   176a8:	d045      	beq.n	17736 <CComUart::WriteByte(unsigned char)+0x9a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:634
		//If the buffer is full, wait for it to empty. Do this in an interrupt
		//safe way, so the buffer cannot be accessed simultaneously
		volatile bool wait = true;
   176aa:	2301      	movs	r3, #1
   176ac:	f88d 3007 	strb.w	r3, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:636
		while(wait) {
			IRQ_DISABLE;
   176b0:	4b22      	ldr	r3, [pc, #136]	; (1773c <CComUart::WriteByte(unsigned char)+0xa0>)
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:635
	//Only write data if the port is open
	if(_open) {
		//If the buffer is full, wait for it to empty. Do this in an interrupt
		//safe way, so the buffer cannot be accessed simultaneously
		volatile bool wait = true;
		while(wait) {
   176b2:	e01c      	b.n	176ee <CComUart::WriteByte(unsigned char)+0x52>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:636
			IRQ_DISABLE;
   176b4:	b672      	cpsid	i
   176b6:	781a      	ldrb	r2, [r3, #0]
   176b8:	3201      	adds	r2, #1
   176ba:	b2d2      	uxtb	r2, r2
   176bc:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:637
			wait = _txBuffer->IsFull();
   176be:	6922      	ldr	r2, [r4, #16]
_ZN11CFifoBufferIhE6IsFullEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:155
Function that returns if the buffer is full
*/
template <class T>
bool CFifoBuffer<T>::IsFull()
{
	return (_count >= _capacity);
   176c0:	6851      	ldr	r1, [r2, #4]
   176c2:	6812      	ldr	r2, [r2, #0]
   176c4:	4291      	cmp	r1, r2
   176c6:	bf34      	ite	cc
   176c8:	2200      	movcc	r2, #0
   176ca:	2201      	movcs	r2, #1
_ZN8CComUart9WriteByteEh():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:637
   176cc:	f88d 2007 	strb.w	r2, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:638
			IRQ_ENABLE;
   176d0:	b672      	cpsid	i
   176d2:	781a      	ldrb	r2, [r3, #0]
   176d4:	f012 0fff 	tst.w	r2, #255	; 0xff
   176d8:	d003      	beq.n	176e2 <CComUart::WriteByte(unsigned char)+0x46>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:638 (discriminator 1)
   176da:	781a      	ldrb	r2, [r3, #0]
   176dc:	3a01      	subs	r2, #1
   176de:	b2d2      	uxtb	r2, r2
   176e0:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:638 (discriminator 2)
   176e2:	781a      	ldrb	r2, [r3, #0]
   176e4:	f012 0fff 	tst.w	r2, #255	; 0xff
   176e8:	d100      	bne.n	176ec <CComUart::WriteByte(unsigned char)+0x50>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:638 (discriminator 1)
   176ea:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:639
			NOP;
   176ec:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:635 (discriminator 1)
	//Only write data if the port is open
	if(_open) {
		//If the buffer is full, wait for it to empty. Do this in an interrupt
		//safe way, so the buffer cannot be accessed simultaneously
		volatile bool wait = true;
		while(wait) {
   176ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
   176f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   176f6:	d1dd      	bne.n	176b4 <CComUart::WriteByte(unsigned char)+0x18>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:644
			NOP;

			//### Perhaps need a Watchdog reset here!
		}

		IRQ_DISABLE;
   176f8:	b672      	cpsid	i
   176fa:	4e10      	ldr	r6, [pc, #64]	; (1773c <CComUart::WriteByte(unsigned char)+0xa0>)
   176fc:	7833      	ldrb	r3, [r6, #0]
   176fe:	3301      	adds	r3, #1
   17700:	b2db      	uxtb	r3, r3
   17702:	7033      	strb	r3, [r6, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:649

		//Enable the transmitter hardware to start interrupt driven transmission
		//(Inheriting classes can override DoTxMode to disable the receiver
		//for half-duplex operation)
		this->DoTxMode(true);
   17704:	6823      	ldr	r3, [r4, #0]
   17706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17708:	4620      	mov	r0, r4
   1770a:	2101      	movs	r1, #1
   1770c:	2200      	movs	r2, #0
   1770e:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:652

		//Store the byte to the buffer
		_txBuffer->Push(data);
   17710:	6920      	ldr	r0, [r4, #16]
   17712:	4629      	mov	r1, r5
   17714:	f7ff ffa8 	bl	17668 <CFifoBuffer<unsigned char>::Push(unsigned char)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:654

		IRQ_ENABLE;
   17718:	b672      	cpsid	i
   1771a:	7833      	ldrb	r3, [r6, #0]
   1771c:	f013 0fff 	tst.w	r3, #255	; 0xff
   17720:	d003      	beq.n	1772a <CComUart::WriteByte(unsigned char)+0x8e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:654 (discriminator 1)
   17722:	7832      	ldrb	r2, [r6, #0]
   17724:	3a01      	subs	r2, #1
   17726:	b2d2      	uxtb	r2, r2
   17728:	7032      	strb	r2, [r6, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:654 (discriminator 2)
   1772a:	4b04      	ldr	r3, [pc, #16]	; (1773c <CComUart::WriteByte(unsigned char)+0xa0>)
   1772c:	781b      	ldrb	r3, [r3, #0]
   1772e:	f013 0fff 	tst.w	r3, #255	; 0xff
   17732:	d100      	bne.n	17736 <CComUart::WriteByte(unsigned char)+0x9a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:654 (discriminator 1)
   17734:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:656
	}
}
   17736:	b002      	add	sp, #8
   17738:	bd70      	pop	{r4, r5, r6, pc}
   1773a:	bf00      	nop
   1773c:	1fff0310 	.word	0x1fff0310

00017740 <CFifoBuffer<unsigned char>::Pop(unsigned char*)>:
_ZN11CFifoBufferIhE3PopEPh():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:212
@result False if the buffer was empty and an element couldn't be removed
*/
template <class T>
bool CFifoBuffer<T>::Pop(T* pvalue) 
{
	if(_count > 0) {
   17740:	6843      	ldr	r3, [r0, #4]
   17742:	b193      	cbz	r3, 1776a <CFifoBuffer<unsigned char>::Pop(unsigned char*)+0x2a>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:213
		*pvalue = _data[_idxRead];
   17744:	68c2      	ldr	r2, [r0, #12]
   17746:	6883      	ldr	r3, [r0, #8]
   17748:	5c9b      	ldrb	r3, [r3, r2]
   1774a:	700b      	strb	r3, [r1, #0]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:214
		_count--;
   1774c:	6843      	ldr	r3, [r0, #4]
   1774e:	3b01      	subs	r3, #1
   17750:	6043      	str	r3, [r0, #4]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:215
		_idxRead++;
   17752:	68c3      	ldr	r3, [r0, #12]
   17754:	3301      	adds	r3, #1
   17756:	60c3      	str	r3, [r0, #12]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:216
		if(_idxRead >= _capacity)
   17758:	68c2      	ldr	r2, [r0, #12]
   1775a:	6803      	ldr	r3, [r0, #0]
   1775c:	429a      	cmp	r2, r3
   1775e:	d306      	bcc.n	1776e <CFifoBuffer<unsigned char>::Pop(unsigned char*)+0x2e>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:217
			_idxRead -= _capacity;
   17760:	68c2      	ldr	r2, [r0, #12]
   17762:	1ad3      	subs	r3, r2, r3
   17764:	60c3      	str	r3, [r0, #12]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:218
		return true;
   17766:	2001      	movs	r0, #1
   17768:	4770      	bx	lr
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:222
	}
	else {
		//The buffer is empty, so nothing can be removed
		return false;
   1776a:	2000      	movs	r0, #0
   1776c:	4770      	bx	lr
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:218
		*pvalue = _data[_idxRead];
		_count--;
		_idxRead++;
		if(_idxRead >= _capacity)
			_idxRead -= _capacity;
		return true;
   1776e:	2001      	movs	r0, #1
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:224
	}
	else {
		//The buffer is empty, so nothing can be removed
		return false;
	}
}
   17770:	4770      	bx	lr
   17772:	bf00      	nop

00017774 <CComUart::DoISR()>:
_ZN8CComUart5DoISREv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:189
Function that is called by the UART handler when the UART IRQ is raise.
As this function is called from an Interrupt, any class fields or members it
calls must be "thread safe".
*/
void CComUart::DoISR(void)
{
   17774:	b510      	push	{r4, lr}
   17776:	b082      	sub	sp, #8
   17778:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:193
	//if(_open) {

		//Read the UART status register
		volatile uint8 status = _uart->S1;
   1777a:	6983      	ldr	r3, [r0, #24]
   1777c:	791a      	ldrb	r2, [r3, #4]
   1777e:	b2d2      	uxtb	r2, r2
   17780:	f88d 2006 	strb.w	r2, [sp, #6]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:196

		//Always read the data register to clear the interrupt flags
		uint8 data = _uart->D;
   17784:	79da      	ldrb	r2, [r3, #7]
   17786:	f88d 2007 	strb.w	r2, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:199

		//Service the Receiver...
		if(_uart->C2 & UART_C2_RIE_MASK) {
   1778a:	78db      	ldrb	r3, [r3, #3]
   1778c:	f013 0f20 	tst.w	r3, #32
   17790:	d030      	beq.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:201

			if(status & UART_S1_OR_MASK)
   17792:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17796:	f013 0f08 	tst.w	r3, #8
   1779a:	d004      	beq.n	177a6 <CComUart::DoISR()+0x32>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:203
				//An overrun error has occurred
				SET_BITS(_flags, UART_OVERRUN_ERR_MASK);
   1779c:	7943      	ldrb	r3, [r0, #5]
   1779e:	f043 0304 	orr.w	r3, r3, #4
   177a2:	7143      	strb	r3, [r0, #5]
   177a4:	e026      	b.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:205

			else if(status & UART_S1_FE_MASK)
   177a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   177aa:	f013 0f02 	tst.w	r3, #2
   177ae:	d004      	beq.n	177ba <CComUart::DoISR()+0x46>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:207
				//A framing error has occurred
				SET_BITS(_flags, UART_FRAMING_ERR_MASK);
   177b0:	7943      	ldrb	r3, [r0, #5]
   177b2:	f043 0302 	orr.w	r3, r3, #2
   177b6:	7143      	strb	r3, [r0, #5]
   177b8:	e01c      	b.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:209

			else if(status & UART_S1_PF_MASK)
   177ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   177be:	f013 0f01 	tst.w	r3, #1
   177c2:	d004      	beq.n	177ce <CComUart::DoISR()+0x5a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:211
				//A parity error has occurred
				SET_BITS(_flags, UART_PARITY_ERR_MASK);
   177c4:	7943      	ldrb	r3, [r0, #5]
   177c6:	f043 0301 	orr.w	r3, r3, #1
   177ca:	7143      	strb	r3, [r0, #5]
   177cc:	e012      	b.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:213

			else if(status & UART_S1_RDRF_MASK) {
   177ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   177d2:	f013 0f20 	tst.w	r3, #32
   177d6:	d00d      	beq.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:217
				//If the receiver has data, then read and store it...
				//data = _uart->D;

				if(!_rxBuffer->IsFull()) {
   177d8:	68c0      	ldr	r0, [r0, #12]
_ZN11CFifoBufferIhE6IsFullEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:155
Function that returns if the buffer is full
*/
template <class T>
bool CFifoBuffer<T>::IsFull()
{
	return (_count >= _capacity);
   177da:	6842      	ldr	r2, [r0, #4]
   177dc:	6803      	ldr	r3, [r0, #0]
_ZN8CComUart5DoISREv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:217
   177de:	429a      	cmp	r2, r3
   177e0:	d204      	bcs.n	177ec <CComUart::DoISR()+0x78>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:219
					//Store the data
					_rxBuffer->Push(data);
   177e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   177e6:	f7ff ff3f 	bl	17668 <CFifoBuffer<unsigned char>::Push(unsigned char)>
   177ea:	e003      	b.n	177f4 <CComUart::DoISR()+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:223
				}
				else {
					//The buffer is full, so discard the data, but set the error flag
					SET_BITS(_flags, UART_RXBUF_ERR_MASK);
   177ec:	7963      	ldrb	r3, [r4, #5]
   177ee:	f043 0308 	orr.w	r3, r3, #8
   177f2:	7163      	strb	r3, [r4, #5]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:229
				}
			}
		}

		//Service the Transmitter Data Register...
		if(IS_BITS_SET(_uart->C2, UART_C2_TIE_MASK) && IS_BITS_SET(status, UART_S1_TDRE_MASK)) {
   177f4:	69a3      	ldr	r3, [r4, #24]
   177f6:	78da      	ldrb	r2, [r3, #3]
   177f8:	f012 0f80 	tst.w	r2, #128	; 0x80
   177fc:	d006      	beq.n	1780c <CComUart::DoISR()+0x98>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:229 (discriminator 1)
   177fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17802:	f012 0f80 	tst.w	r2, #128	; 0x80
   17806:	d103      	bne.n	17810 <CComUart::DoISR()+0x9c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:229
   17808:	2200      	movs	r2, #0
   1780a:	e002      	b.n	17812 <CComUart::DoISR()+0x9e>
   1780c:	2200      	movs	r2, #0
   1780e:	e000      	b.n	17812 <CComUart::DoISR()+0x9e>
   17810:	2201      	movs	r2, #1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:229 (discriminator 4)
   17812:	b1a2      	cbz	r2, 1783e <CComUart::DoISR()+0xca>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:230
			if(_txBuffer->IsEmpty()) {
   17814:	6920      	ldr	r0, [r4, #16]
_ZN11CFifoBufferIhE7IsEmptyEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:146
Function that returns if the buffer is empty
*/
template <class T>
bool CFifoBuffer<T>::IsEmpty()
{
	return (_count == 0);
   17816:	6842      	ldr	r2, [r0, #4]
_ZN8CComUart5DoISREv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:230
   17818:	b94a      	cbnz	r2, 1782e <CComUart::DoISR()+0xba>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:232
				//If the buffer is empty, turn off transmitter interrupts, but enable the complete interrupt
				CLR_BITS(_uart->C2, UART_C2_TIE_MASK);
   1781a:	78da      	ldrb	r2, [r3, #3]
   1781c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17820:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:233
				SET_BITS(_uart->C2, UART_C2_TCIE_MASK);
   17822:	69a3      	ldr	r3, [r4, #24]
   17824:	78da      	ldrb	r2, [r3, #3]
   17826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1782a:	70da      	strb	r2, [r3, #3]
   1782c:	e007      	b.n	1783e <CComUart::DoISR()+0xca>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:237
			}
			else {
				//If the buffer has data, then start transmitting it
				_txBuffer->Pop(&data);
   1782e:	f10d 0107 	add.w	r1, sp, #7
   17832:	f7ff ff85 	bl	17740 <CFifoBuffer<unsigned char>::Pop(unsigned char*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:238
				_uart->D = data;
   17836:	69a3      	ldr	r3, [r4, #24]
   17838:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1783c:	71da      	strb	r2, [r3, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:243
			}
		}

		//Service the Transmit Complete, to return Half-Duplex to receive mode
		if(IS_BITS_SET(_uart->C2, UART_C2_TCIE_MASK) && IS_BITS_SET(status, UART_S1_TC_MASK)) {
   1783e:	69a3      	ldr	r3, [r4, #24]
   17840:	78da      	ldrb	r2, [r3, #3]
   17842:	f012 0f40 	tst.w	r2, #64	; 0x40
   17846:	d006      	beq.n	17856 <CComUart::DoISR()+0xe2>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:243 (discriminator 1)
   17848:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1784c:	f012 0f40 	tst.w	r2, #64	; 0x40
   17850:	d103      	bne.n	1785a <CComUart::DoISR()+0xe6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:243
   17852:	2200      	movs	r2, #0
   17854:	e002      	b.n	1785c <CComUart::DoISR()+0xe8>
   17856:	2200      	movs	r2, #0
   17858:	e000      	b.n	1785c <CComUart::DoISR()+0xe8>
   1785a:	2201      	movs	r2, #1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:243 (discriminator 4)
   1785c:	b14a      	cbz	r2, 17872 <CComUart::DoISR()+0xfe>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:245
			//If the transmitter has finished sending data, then disable the Transmit Complete interrupt
			CLR_BITS(_uart->C2, UART_C2_TCIE_MASK);
   1785e:	78da      	ldrb	r2, [r3, #3]
   17860:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   17864:	70da      	strb	r2, [r3, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:248

			//Disable the transmitter hardware (for Half-Duplex use)
			this->DoTxMode(false);
   17866:	6823      	ldr	r3, [r4, #0]
   17868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1786a:	4620      	mov	r0, r4
   1786c:	2100      	movs	r1, #0
   1786e:	460a      	mov	r2, r1
   17870:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:252
		}

	//}
}
   17872:	b002      	add	sp, #8
   17874:	bd10      	pop	{r4, pc}
   17876:	bf00      	nop

00017878 <ISR_UART0_RX_TX>:
ISR_UART0_RX_TX():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:665
//==============================================================================
/*!-----------------------------------------------------------------------------
Function called from the Interrupt Vector Table.
*/
#if UART0_CONNECT_IRQ
void ISR_UART0_RX_TX(void) {
   17878:	4668      	mov	r0, sp
   1787a:	f020 0107 	bic.w	r1, r0, #7
   1787e:	468d      	mov	sp, r1
   17880:	b501      	push	{r0, lr}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:666
	if (CComUart::Uart[0])
   17882:	4b04      	ldr	r3, [pc, #16]	; (17894 <ISR_UART0_RX_TX+0x1c>)
   17884:	6818      	ldr	r0, [r3, #0]
   17886:	b108      	cbz	r0, 1788c <ISR_UART0_RX_TX+0x14>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:667
		CComUart::Uart[0]->DoISR();
   17888:	f7ff ff74 	bl	17774 <CComUart::DoISR()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:668
}
   1788c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17890:	4685      	mov	sp, r0
   17892:	4770      	bx	lr
   17894:	1fff00c0 	.word	0x1fff00c0

00017898 <ISR_UART1_RX_TX>:
ISR_UART1_RX_TX():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:675

/*!-----------------------------------------------------------------------------
Function called from the Interrupt Vector Table.
*/
#if UART1_CONNECT_IRQ
void ISR_UART1_RX_TX(void) {
   17898:	4668      	mov	r0, sp
   1789a:	f020 0107 	bic.w	r1, r0, #7
   1789e:	468d      	mov	sp, r1
   178a0:	b501      	push	{r0, lr}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:676
	if (CComUart::Uart[1])
   178a2:	4b04      	ldr	r3, [pc, #16]	; (178b4 <ISR_UART1_RX_TX+0x1c>)
   178a4:	6858      	ldr	r0, [r3, #4]
   178a6:	b108      	cbz	r0, 178ac <ISR_UART1_RX_TX+0x14>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:677
		CComUart::Uart[1]->DoISR();
   178a8:	f7ff ff64 	bl	17774 <CComUart::DoISR()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:678
}
   178ac:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   178b0:	4685      	mov	sp, r0
   178b2:	4770      	bx	lr
   178b4:	1fff00c0 	.word	0x1fff00c0

000178b8 <ISR_UART3_RX_TX>:
ISR_UART3_RX_TX():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:695

/*!-----------------------------------------------------------------------------
Function called from the Interrupt Vector Table.
*/
#if UART3_CONNECT_IRQ
void ISR_UART3_RX_TX(void) {
   178b8:	4668      	mov	r0, sp
   178ba:	f020 0107 	bic.w	r1, r0, #7
   178be:	468d      	mov	sp, r1
   178c0:	b501      	push	{r0, lr}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:696
	if (CComUart::Uart[3])
   178c2:	4b04      	ldr	r3, [pc, #16]	; (178d4 <ISR_UART3_RX_TX+0x1c>)
   178c4:	68d8      	ldr	r0, [r3, #12]
   178c6:	b108      	cbz	r0, 178cc <ISR_UART3_RX_TX+0x14>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:697
		CComUart::Uart[3]->DoISR();
   178c8:	f7ff ff54 	bl	17774 <CComUart::DoISR()>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:698
}
   178cc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   178d0:	4685      	mov	sp, r0
   178d2:	4770      	bx	lr
   178d4:	1fff00c0 	.word	0x1fff00c0

000178d8 <CComUart::ReadByte()>:
_ZN8CComUart8ReadByteEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:540
Function that reads a single byte from the receive buffer. If no byte is present
the function will block until the Serial Port received a byte
@result The read byte from the buffer
*/
uint8 CComUart::ReadByte()
{
   178d8:	b510      	push	{r4, lr}
   178da:	b082      	sub	sp, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:544
	uint8 data;

	//Don't allow data to be read if the port is closed
	if(!_open)
   178dc:	7a03      	ldrb	r3, [r0, #8]
   178de:	2b00      	cmp	r3, #0
   178e0:	d042      	beq.n	17968 <CComUart::ReadByte()+0x90>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:549
		return 0;

	//If the buffer is empty, then loop until we receive a byte
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
   178e2:	2301      	movs	r3, #1
   178e4:	f88d 3007 	strb.w	r3, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:551
	while(wait) {
		IRQ_DISABLE;
   178e8:	4b21      	ldr	r3, [pc, #132]	; (17970 <CComUart::ReadByte()+0x98>)
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:550
		return 0;

	//If the buffer is empty, then loop until we receive a byte
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
	while(wait) {
   178ea:	e01b      	b.n	17924 <CComUart::ReadByte()+0x4c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:551
		IRQ_DISABLE;
   178ec:	b672      	cpsid	i
   178ee:	781a      	ldrb	r2, [r3, #0]
   178f0:	3201      	adds	r2, #1
   178f2:	b2d2      	uxtb	r2, r2
   178f4:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:552
		wait = _rxBuffer->IsEmpty();
   178f6:	68c2      	ldr	r2, [r0, #12]
_ZN11CFifoBufferIhE7IsEmptyEv():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:146
   178f8:	6852      	ldr	r2, [r2, #4]
   178fa:	f1d2 0201 	rsbs	r2, r2, #1
   178fe:	bf38      	it	cc
   17900:	2200      	movcc	r2, #0
_ZN8CComUart8ReadByteEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:552
   17902:	f88d 2007 	strb.w	r2, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:553
		IRQ_ENABLE;
   17906:	b672      	cpsid	i
   17908:	781a      	ldrb	r2, [r3, #0]
   1790a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1790e:	d003      	beq.n	17918 <CComUart::ReadByte()+0x40>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:553 (discriminator 1)
   17910:	781a      	ldrb	r2, [r3, #0]
   17912:	3a01      	subs	r2, #1
   17914:	b2d2      	uxtb	r2, r2
   17916:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:553 (discriminator 2)
   17918:	781a      	ldrb	r2, [r3, #0]
   1791a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1791e:	d100      	bne.n	17922 <CComUart::ReadByte()+0x4a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:553 (discriminator 1)
   17920:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:554
		NOP;
   17922:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:550 (discriminator 1)
		return 0;

	//If the buffer is empty, then loop until we receive a byte
	//Do this in an interrupt safe way, so the buffer cannot be accessed simultaneously
	volatile bool wait = true;
	while(wait) {
   17924:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17928:	f012 0fff 	tst.w	r2, #255	; 0xff
   1792c:	d1de      	bne.n	178ec <CComUart::ReadByte()+0x14>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:559
		NOP;
		//### Perhaps need a Watchdog reset here!
	}

	//Read the byte from the buffer
	IRQ_DISABLE;
   1792e:	b672      	cpsid	i
   17930:	4c0f      	ldr	r4, [pc, #60]	; (17970 <CComUart::ReadByte()+0x98>)
   17932:	7823      	ldrb	r3, [r4, #0]
   17934:	3301      	adds	r3, #1
   17936:	b2db      	uxtb	r3, r3
   17938:	7023      	strb	r3, [r4, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:560
	_rxBuffer->Pop(&data);
   1793a:	68c0      	ldr	r0, [r0, #12]
   1793c:	f10d 0106 	add.w	r1, sp, #6
   17940:	f7ff fefe 	bl	17740 <CFifoBuffer<unsigned char>::Pop(unsigned char*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:561
	IRQ_ENABLE;
   17944:	b672      	cpsid	i
   17946:	7823      	ldrb	r3, [r4, #0]
   17948:	f013 0fff 	tst.w	r3, #255	; 0xff
   1794c:	d003      	beq.n	17956 <CComUart::ReadByte()+0x7e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:561 (discriminator 1)
   1794e:	7822      	ldrb	r2, [r4, #0]
   17950:	3a01      	subs	r2, #1
   17952:	b2d2      	uxtb	r2, r2
   17954:	7022      	strb	r2, [r4, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:561 (discriminator 2)
   17956:	4b06      	ldr	r3, [pc, #24]	; (17970 <CComUart::ReadByte()+0x98>)
   17958:	781b      	ldrb	r3, [r3, #0]
   1795a:	f013 0fff 	tst.w	r3, #255	; 0xff
   1795e:	d100      	bne.n	17962 <CComUart::ReadByte()+0x8a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:561 (discriminator 1)
   17960:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:563

	return data;
   17962:	f89d 0006 	ldrb.w	r0, [sp, #6]
   17966:	e000      	b.n	1796a <CComUart::ReadByte()+0x92>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:545
{
	uint8 data;

	//Don't allow data to be read if the port is closed
	if(!_open)
		return 0;
   17968:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:564
	IRQ_DISABLE;
	_rxBuffer->Pop(&data);
	IRQ_ENABLE;

	return data;
}
   1796a:	b002      	add	sp, #8
   1796c:	bd10      	pop	{r4, pc}
   1796e:	bf00      	nop
   17970:	1fff0310 	.word	0x1fff0310

00017974 <CFifoBuffer<unsigned char>::SetCapacity(unsigned int)>:
_ZN11CFifoBufferIhE11SetCapacityEj():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:232
Function that sets the maximum storage capacity of the buffer
@param capacity The new capacity of the buffer
@result True if the buffers capacity was sucessfully changed, false if not and existing contents are preserved
*/
template <class T>
void CFifoBuffer<T>::SetCapacity(uint32 capacity)
   17974:	b510      	push	{r4, lr}
   17976:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:235
{
	//Store the new capacity
	_capacity = capacity;
   17978:	6001      	str	r1, [r0, #0]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:238
	
	//Allocate (if _data is null) or reallocate (and copy the contents) of the data
	pT dataNew = (pT)realloc(_data, _capacity * sizeof(T));	
   1797a:	6880      	ldr	r0, [r0, #8]
   1797c:	f001 f8de 	bl	18b3c <realloc>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:248
		throw CException("The ring buffer capacity cannot be set");
	}
	*/
	
	//Memory successfully allocated, so store new pointer and return success
	_data = dataNew;
   17980:	60a0      	str	r0, [r4, #8]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:251

	//Clear the data
	this->Clear();
   17982:	4620      	mov	r0, r4
   17984:	f7ff fc92 	bl	172ac <CFifoBuffer<unsigned char>::Clear()>
   17988:	bd10      	pop	{r4, pc}
   1798a:	bf00      	nop

0001798c <CFifoBuffer<unsigned char>::CFifoBuffer(unsigned int)>:
_ZN11CFifoBufferIhEC2Ej():
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:84
//==============================================================================
/*!-----------------------------------------------------------------------------
Create the ring bugger and allocate memory resources
*/
template <class T>
CFifoBuffer<T>::CFifoBuffer(uint32 capacity)
   1798c:	b510      	push	{r4, lr}
   1798e:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:87
{
	//Allocate the capacity and initialise
	_data = NULL;
   17990:	2300      	movs	r3, #0
   17992:	6083      	str	r3, [r0, #8]
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:88
	this->SetCapacity(capacity);
   17994:	f7ff ffee 	bl	17974 <CFifoBuffer<unsigned char>::SetCapacity(unsigned int)>
C:\Users\s.morris\OculusHub\BpClasses\headers/fifobuffer.hpp:89
}
   17998:	4620      	mov	r0, r4
   1799a:	bd10      	pop	{r4, pc}

0001799c <CComUart::CComUart(unsigned char, unsigned int, unsigned int)>:
_ZN8CComUartC2Ehjj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:13
/*! Memory to hold which Uart objects are bound to each IRQ handler */
PComUart CComUart::Uart[UART_PERIPHERALS] = { NULL };

/*!-----------------------------------------------------------------------------
*/
CComUart::CComUart(uint8 port, uint32 rxBufSize, uint32 txBufSize)
   1799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179a0:	4604      	mov	r4, r0
   179a2:	4690      	mov	r8, r2
   179a4:	461f      	mov	r7, r3
   179a6:	4b0f      	ldr	r3, [pc, #60]	; (179e4 <CComUart::CComUart(unsigned char, unsigned int, unsigned int)+0x48>)
   179a8:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:16
{
	//Initialise the port to a closed state
	_port = port;
   179aa:	7241      	strb	r1, [r0, #9]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:17
	_flags = 0;
   179ac:	2500      	movs	r5, #0
   179ae:	7145      	strb	r5, [r0, #5]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:18
	_baud = BAUD_9600;
   179b0:	2308      	movs	r3, #8
   179b2:	7103      	strb	r3, [r0, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:19
	_loopback = false;
   179b4:	7185      	strb	r5, [r0, #6]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:20
	_parity = PARITY_NONE;
   179b6:	71c5      	strb	r5, [r0, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:21
	_open = false;
   179b8:	7205      	strb	r5, [r0, #8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:23

	_uart = NULL;
   179ba:	6185      	str	r5, [r0, #24]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:26

	//Create ring-buffers with default size
	_rxBuffer = new CByteFifoBuffer(rxBufSize);
   179bc:	2014      	movs	r0, #20
   179be:	f000 fe13 	bl	185e8 <operator new(unsigned int)>
   179c2:	4606      	mov	r6, r0
   179c4:	4641      	mov	r1, r8
   179c6:	f7ff ffe1 	bl	1798c <CFifoBuffer<unsigned char>::CFifoBuffer(unsigned int)>
   179ca:	60e6      	str	r6, [r4, #12]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:27
	_txBuffer = new CByteFifoBuffer(txBufSize);
   179cc:	2014      	movs	r0, #20
   179ce:	f000 fe0b 	bl	185e8 <operator new(unsigned int)>
   179d2:	4606      	mov	r6, r0
   179d4:	4639      	mov	r1, r7
   179d6:	f7ff ffd9 	bl	1798c <CFifoBuffer<unsigned char>::CFifoBuffer(unsigned int)>
   179da:	6126      	str	r6, [r4, #16]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:31

	//Initialise the TxEnable to the false state
	//(dont raise an interrupt here as nothing will be connected to it)
	_txEnable = false;
   179dc:	7525      	strb	r5, [r4, #20]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/com_uart.cpp:32
}
   179de:	4620      	mov	r0, r4
   179e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179e4:	0001a2e8 	.word	0x0001a2e8

000179e8 <CFlash::~CFlash()>:
_ZN6CFlashD2Ev():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:30
	//CLR_BITS(_fmc->PFB1CR, FMC_PFB1CR_B1DCE_MASK);
}

/*!-----------------------------------------------------------------------------
*/
CFlash::~CFlash()
   179e8:	4b01      	ldr	r3, [pc, #4]	; (179f0 <CFlash::~CFlash()+0x8>)
   179ea:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:33
{

}
   179ec:	4770      	bx	lr
   179ee:	bf00      	nop
   179f0:	0001a320 	.word	0x0001a320

000179f4 <CFlash::~CFlash()>:
_ZN6CFlashD0Ev():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:30
	//CLR_BITS(_fmc->PFB1CR, FMC_PFB1CR_B1DCE_MASK);
}

/*!-----------------------------------------------------------------------------
*/
CFlash::~CFlash()
   179f4:	b510      	push	{r4, lr}
   179f6:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:33
{

}
   179f8:	f7ff fff6 	bl	179e8 <CFlash::~CFlash()>
   179fc:	4620      	mov	r0, r4
   179fe:	f000 fe07 	bl	18610 <operator delete(void*)>
   17a02:	4620      	mov	r0, r4
   17a04:	bd10      	pop	{r4, pc}
   17a06:	bf00      	nop

00017a08 <CFlash::CFlash()>:
_ZN6CFlashC2Ev():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:12
//==============================================================================
//CFlash
//==============================================================================
/*!-----------------------------------------------------------------------------
*/
CFlash::CFlash()
   17a08:	4a08      	ldr	r2, [pc, #32]	; (17a2c <CFlash::CFlash()+0x24>)
   17a0a:	6002      	str	r2, [r0, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:15
{
	//Initialise the pointer to the flash object
	_fmc = FMC;
   17a0c:	4a08      	ldr	r2, [pc, #32]	; (17a30 <CFlash::CFlash()+0x28>)
   17a0e:	6042      	str	r2, [r0, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:16
	_flash = FTFE;
   17a10:	4908      	ldr	r1, [pc, #32]	; (17a34 <CFlash::CFlash()+0x2c>)
   17a12:	6081      	str	r1, [r0, #8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:19

	//Indicate the config section of flash is locked to prevent programming access
	_cfgLock = true;
   17a14:	2101      	movs	r1, #1
   17a16:	7301      	strb	r1, [r0, #12]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:22

	//Disable Data Cache in Flash memory Controller Module
	CLR_BITS(_fmc->PFB01CR, FMC_PFB01CR_B01DCE_MASK);
   17a18:	6851      	ldr	r1, [r2, #4]
   17a1a:	f021 0110 	bic.w	r1, r1, #16
   17a1e:	6051      	str	r1, [r2, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:23
    CLR_BITS(_fmc->PFB23CR, FMC_PFB23CR_B23DCE_MASK);
   17a20:	6843      	ldr	r3, [r0, #4]
   17a22:	689a      	ldr	r2, [r3, #8]
   17a24:	f022 0210 	bic.w	r2, r2, #16
   17a28:	609a      	str	r2, [r3, #8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:26
	//CLR_BITS(_fmc->PFB0CR, FMC_PFB0CR_B0DCE_MASK);
	//CLR_BITS(_fmc->PFB1CR, FMC_PFB1CR_B1DCE_MASK);
}
   17a2a:	4770      	bx	lr
   17a2c:	0001a320 	.word	0x0001a320
   17a30:	4001f000 	.word	0x4001f000
   17a34:	40020000 	.word	0x40020000

00017a38 <CFlash::CheckAddress(unsigned int&, unsigned int)>:
_ZN6CFlash12CheckAddressERjj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:47
*/
bool CFlash::CheckAddress(uint32& addrStart, uint32 addrRange)
{
	//Check for target addresses
    //if((addrStart < FLASH_BASE) || ((addrStart + addrRange - 1) >= FLASH_SIZE)) {
	if((addrStart + addrRange - 1) >= FLASH_SIZE) {
   17a38:	3a01      	subs	r2, #1
   17a3a:	680b      	ldr	r3, [r1, #0]
   17a3c:	18d0      	adds	r0, r2, r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:56
    else {
        //Convert System memory address to FTFx internal memory address
        //addrStart -= FLASH_BASE;
		return true;
    }
}
   17a3e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   17a42:	bf2c      	ite	cs
   17a44:	2000      	movcs	r0, #0
   17a46:	2001      	movcc	r0, #1
   17a48:	4770      	bx	lr
   17a4a:	bf00      	nop

00017a4c <CFlash::ExecuteCmd(unsigned char, unsigned char*)>:
_ZN6CFlash10ExecuteCmdEhPh():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:156
@param cmdData	Pointer to an array of bytes defining the command and its parameters to execute
@result The return status of the command after execution.
*/
//
EFlashReturn CFlash::ExecuteCmd(uint8 cmdSize, puint8 cmdData)
{
   17a4c:	b538      	push	{r3, r4, r5, lr}
   17a4e:	4605      	mov	r5, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:161
    uint8 fstat;
	uint8 i;

	//Check CCIF bit of the flash status register is set, indicating no command in progress
	while(IS_BITS_CLR(_flash->FSTAT, FTFE_FSTAT_CCIF_MASK)) {};
   17a50:	6880      	ldr	r0, [r0, #8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:161 (discriminator 1)
   17a52:	7803      	ldrb	r3, [r0, #0]
   17a54:	f013 0f80 	tst.w	r3, #128	; 0x80
   17a58:	d0fb      	beq.n	17a52 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x6>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:169 (discriminator 1)
	//problems with timing that either hang the program, disconnect the debugger
	//or cause the programming to fail, unless single-stepped through!
	//SET_BITS(_flash->FSTAT, (uint8)(FTFE_FSTAT_RDCOLERR_MASK | FTFE_FSTAT_ACCERR_MASK | FTFE_FSTAT_FPVIOL_MASK));

    //Load FCCOB registers
    for(i = 0; i < cmdSize; i++) {
   17a5a:	2900      	cmp	r1, #0
   17a5c:	d03e      	beq.n	17adc <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x90>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:169
   17a5e:	2300      	movs	r3, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:170
        switch(i) {
   17a60:	b2dc      	uxtb	r4, r3
   17a62:	2c0b      	cmp	r4, #11
   17a64:	d836      	bhi.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
   17a66:	e8df f004 	tbb	[pc, r4]
   17a6a:	0a06      	.short	0x0a06
   17a6c:	1a16120e 	.word	0x1a16120e
   17a70:	2a26221e 	.word	0x2a26221e
   17a74:	322e      	.short	0x322e
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:171
			case 0: { _flash->FCCOB0 = cmdData[i]; break; }
   17a76:	68a8      	ldr	r0, [r5, #8]
   17a78:	7814      	ldrb	r4, [r2, #0]
   17a7a:	71c4      	strb	r4, [r0, #7]
   17a7c:	e02a      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:172
			case 1: { _flash->FCCOB1 = cmdData[i]; break; }
   17a7e:	68a8      	ldr	r0, [r5, #8]
   17a80:	7854      	ldrb	r4, [r2, #1]
   17a82:	7184      	strb	r4, [r0, #6]
   17a84:	e026      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:173
			case 2: { _flash->FCCOB2 = cmdData[i]; break; }
   17a86:	68a8      	ldr	r0, [r5, #8]
   17a88:	7894      	ldrb	r4, [r2, #2]
   17a8a:	7144      	strb	r4, [r0, #5]
   17a8c:	e022      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:174
			case 3: { _flash->FCCOB3 = cmdData[i]; break; }
   17a8e:	68a8      	ldr	r0, [r5, #8]
   17a90:	78d4      	ldrb	r4, [r2, #3]
   17a92:	7104      	strb	r4, [r0, #4]
   17a94:	e01e      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:175
			case 4: { _flash->FCCOB4 = cmdData[i]; break; }
   17a96:	68a8      	ldr	r0, [r5, #8]
   17a98:	7914      	ldrb	r4, [r2, #4]
   17a9a:	72c4      	strb	r4, [r0, #11]
   17a9c:	e01a      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:176
			case 5: { _flash->FCCOB5 = cmdData[i]; break; }
   17a9e:	68a8      	ldr	r0, [r5, #8]
   17aa0:	7954      	ldrb	r4, [r2, #5]
   17aa2:	7284      	strb	r4, [r0, #10]
   17aa4:	e016      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:177
			case 6: { _flash->FCCOB6 = cmdData[i]; break; }
   17aa6:	68a8      	ldr	r0, [r5, #8]
   17aa8:	7994      	ldrb	r4, [r2, #6]
   17aaa:	7244      	strb	r4, [r0, #9]
   17aac:	e012      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:178
			case 7: { _flash->FCCOB7 = cmdData[i]; break; }
   17aae:	68a8      	ldr	r0, [r5, #8]
   17ab0:	79d4      	ldrb	r4, [r2, #7]
   17ab2:	7204      	strb	r4, [r0, #8]
   17ab4:	e00e      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:179
			case 8: { _flash->FCCOB8 = cmdData[i]; break; }
   17ab6:	68a8      	ldr	r0, [r5, #8]
   17ab8:	7a14      	ldrb	r4, [r2, #8]
   17aba:	73c4      	strb	r4, [r0, #15]
   17abc:	e00a      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:180
			case 9: { _flash->FCCOB9 = cmdData[i]; break; }
   17abe:	68a8      	ldr	r0, [r5, #8]
   17ac0:	7a54      	ldrb	r4, [r2, #9]
   17ac2:	7384      	strb	r4, [r0, #14]
   17ac4:	e006      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:181
			case 10: { _flash->FCCOBA = cmdData[i]; break; }
   17ac6:	68a8      	ldr	r0, [r5, #8]
   17ac8:	7a94      	ldrb	r4, [r2, #10]
   17aca:	7344      	strb	r4, [r0, #13]
   17acc:	e002      	b.n	17ad4 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x88>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:182
			case 11: { _flash->FCCOBB = cmdData[i]; break; }
   17ace:	68a8      	ldr	r0, [r5, #8]
   17ad0:	7ad4      	ldrb	r4, [r2, #11]
   17ad2:	7304      	strb	r4, [r0, #12]
   17ad4:	3301      	adds	r3, #1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:169
	//problems with timing that either hang the program, disconnect the debugger
	//or cause the programming to fail, unless single-stepped through!
	//SET_BITS(_flash->FSTAT, (uint8)(FTFE_FSTAT_RDCOLERR_MASK | FTFE_FSTAT_ACCERR_MASK | FTFE_FSTAT_FPVIOL_MASK));

    //Load FCCOB registers
    for(i = 0; i < cmdSize; i++) {
   17ad6:	b2dc      	uxtb	r4, r3
   17ad8:	42a1      	cmp	r1, r4
   17ada:	d8c1      	bhi.n	17a60 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0x14>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:187
			case 11: { _flash->FCCOBB = cmdData[i]; break; }
            default: break;
        }
    }

    IRQ_DISABLE;
   17adc:	b672      	cpsid	i
   17ade:	4c15      	ldr	r4, [pc, #84]	; (17b34 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xe8>)
   17ae0:	7823      	ldrb	r3, [r4, #0]
   17ae2:	3301      	adds	r3, #1
   17ae4:	b2db      	uxtb	r3, r3
   17ae6:	7023      	strb	r3, [r4, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:190

	//Perform the programming
	CFlash::ExecuteCmdRam(_flash);
   17ae8:	68a8      	ldr	r0, [r5, #8]
   17aea:	4b13      	ldr	r3, [pc, #76]	; (17b38 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xec>)
   17aec:	4798      	blx	r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:192

	IRQ_ENABLE;
   17aee:	b672      	cpsid	i
   17af0:	7823      	ldrb	r3, [r4, #0]
   17af2:	f013 0fff 	tst.w	r3, #255	; 0xff
   17af6:	d003      	beq.n	17b00 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xb4>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:192 (discriminator 1)
   17af8:	7822      	ldrb	r2, [r4, #0]
   17afa:	3a01      	subs	r2, #1
   17afc:	b2d2      	uxtb	r2, r2
   17afe:	7022      	strb	r2, [r4, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:192 (discriminator 2)
   17b00:	4b0c      	ldr	r3, [pc, #48]	; (17b34 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xe8>)
   17b02:	781b      	ldrb	r3, [r3, #0]
   17b04:	f013 0fff 	tst.w	r3, #255	; 0xff
   17b08:	d100      	bne.n	17b0c <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xc0>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:192 (discriminator 1)
   17b0a:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:195

    //Check for errors
	fstat = _flash->FSTAT;
   17b0c:	68ab      	ldr	r3, [r5, #8]
   17b0e:	781b      	ldrb	r3, [r3, #0]
   17b10:	b2db      	uxtb	r3, r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:196
    if(IS_BIT_SET(fstat, FTFE_FSTAT_ACCERR_SHIFT)) {
   17b12:	f013 0f20 	tst.w	r3, #32
   17b16:	d107      	bne.n	17b28 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xdc>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:200
        //An access error occurred
        return FLASH_ERR_ACCERR;
    }
    else if(IS_BIT_SET(fstat, FTFE_FSTAT_FPVIOL_SHIFT)) {
   17b18:	f013 0f10 	tst.w	r3, #16
   17b1c:	d106      	bne.n	17b2c <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xe0>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:204
        //A protection error occurred
        return FLASH_ERR_PVIOL;
    }
    else if(IS_BIT_SET(fstat, FTFE_FSTAT_MGSTAT0_SHIFT)) {
   17b1e:	f013 0f01 	tst.w	r3, #1
   17b22:	d005      	beq.n	17b30 <CFlash::ExecuteCmd(unsigned char, unsigned char*)+0xe4>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:206
        //A MGSTAT0 non-correctable error occurred
        return FLASH_ERR_MGSTAT0;
   17b24:	2006      	movs	r0, #6
   17b26:	bd38      	pop	{r3, r4, r5, pc}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:198

    //Check for errors
	fstat = _flash->FSTAT;
    if(IS_BIT_SET(fstat, FTFE_FSTAT_ACCERR_SHIFT)) {
        //An access error occurred
        return FLASH_ERR_ACCERR;
   17b28:	2004      	movs	r0, #4
   17b2a:	bd38      	pop	{r3, r4, r5, pc}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:202
    }
    else if(IS_BIT_SET(fstat, FTFE_FSTAT_FPVIOL_SHIFT)) {
        //A protection error occurred
        return FLASH_ERR_PVIOL;
   17b2c:	2005      	movs	r0, #5
   17b2e:	bd38      	pop	{r3, r4, r5, pc}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:210
        //A MGSTAT0 non-correctable error occurred
        return FLASH_ERR_MGSTAT0;
    }
	else {
		//Return the return code
		return FLASH_OK;
   17b30:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:212
	}
}
   17b32:	bd38      	pop	{r3, r4, r5, pc}
   17b34:	1fff0310 	.word	0x1fff0310
   17b38:	1fff0001 	.word	0x1fff0001

00017b3c <CFlash::FlashEraseSector(unsigned int)>:
_ZN6CFlash16FlashEraseSectorEj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:519
Function that erases a single program flash sector (i.e. 4kb chunk) back to all 1's.
@param addr	Address at the start of the sector to erase.
@result Success or error code from the operation
*/
EFlashReturn CFlash::FlashEraseSector(uint32 addr)
{
   17b3c:	b500      	push	{lr}
   17b3e:	b083      	sub	sp, #12
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:523
	uint8 cmdData[4];

	//Ensure we have a sector address, by masking the lower address bits to zero
	CLR_BITS(addr, (FLASH_SECTOR_SIZE - 1));
   17b40:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   17b44:	f021 010f 	bic.w	r1, r1, #15
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:526

	//Preparing passing parameter to erase a flash block
	cmdData[0] = FLASH_CMD_ERASE_SECTOR;
   17b48:	2309      	movs	r3, #9
   17b4a:	f88d 3004 	strb.w	r3, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:527
	cmdData[1] = (uint8)((addr >> 16) & 0xFF);
   17b4e:	0c0b      	lsrs	r3, r1, #16
   17b50:	f88d 3005 	strb.w	r3, [sp, #5]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:528
	cmdData[2] = (uint8)((addr >> 8) & 0xFF);
   17b54:	0a09      	lsrs	r1, r1, #8
   17b56:	f88d 1006 	strb.w	r1, [sp, #6]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:529
	cmdData[3] = (uint8)(addr & 0xFF);
   17b5a:	2300      	movs	r3, #0
   17b5c:	f88d 3007 	strb.w	r3, [sp, #7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:532

	//Calling flash command sequence function to execute the command
	return this->ExecuteCmd(4, cmdData);
   17b60:	2104      	movs	r1, #4
   17b62:	eb0d 0201 	add.w	r2, sp, r1
   17b66:	f7ff ff71 	bl	17a4c <CFlash::ExecuteCmd(unsigned char, unsigned char*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:533
}
   17b6a:	b003      	add	sp, #12
   17b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00017b70 <CFlash::FlashEraseRange(unsigned int, unsigned int)>:
_ZN6CFlash15FlashEraseRangeEjj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:481
address with the following caviats...
Addr must lie on a 4kb (4096 bytes) address and Size must be a multiple of 4096.
The lower bits of these values are masked to 0's so will always be rounded down
*/
EFlashReturn CFlash::FlashEraseRange(uint32 addr, uint32 size)
{
   17b70:	b570      	push	{r4, r5, r6, lr}
   17b72:	b082      	sub	sp, #8
   17b74:	4606      	mov	r6, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:485
	EFlashReturn returnCode;

	//Ensure we have a sector address, by masking the lower address bits to zero
	CLR_BITS(addr, (FLASH_SECTOR_SIZE - 1));
   17b76:	f421 637f 	bic.w	r3, r1, #4080	; 0xff0
   17b7a:	f023 030f 	bic.w	r3, r3, #15
   17b7e:	a902      	add	r1, sp, #8
   17b80:	f841 3d04 	str.w	r3, [r1, #-4]!
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:488

	//Ensure the size is a multiple of sectors by masking the lower address bits to zero
	CLR_BITS(size, (FLASH_SECTOR_SIZE - 1));
   17b84:	f422 647f 	bic.w	r4, r2, #4080	; 0xff0
   17b88:	f024 040f 	bic.w	r4, r4, #15
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:491

	//Check target addresses lie within memory
	if(!this->CheckAddress(addr, size))
   17b8c:	4622      	mov	r2, r4
   17b8e:	f7ff ff53 	bl	17a38 <CFlash::CheckAddress(unsigned int&, unsigned int)>
   17b92:	b168      	cbz	r0, 17bb0 <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x40>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:495 (discriminator 1)
		return FLASH_ERR_RANGE;

	//Erase sectors
	while(size > 0) {
   17b94:	b174      	cbz	r4, 17bb4 <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:497
		//Erase the sector
		returnCode = this->FlashEraseSector(addr);
   17b96:	9d01      	ldr	r5, [sp, #4]
   17b98:	4630      	mov	r0, r6
   17b9a:	4629      	mov	r1, r5
   17b9c:	f7ff ffce 	bl	17b3c <CFlash::FlashEraseSector(unsigned int)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:498
		if(returnCode != FLASH_OK) {
   17ba0:	b950      	cbnz	r0, 17bb8 <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x48>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:503
			return returnCode;
		}

		//Move to the next sector
		addr += FLASH_SECTOR_SIZE;
   17ba2:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
   17ba6:	9501      	str	r5, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:495
	//Check target addresses lie within memory
	if(!this->CheckAddress(addr, size))
		return FLASH_ERR_RANGE;

	//Erase sectors
	while(size > 0) {
   17ba8:	f5b4 5480 	subs.w	r4, r4, #4096	; 0x1000
   17bac:	d1f3      	bne.n	17b96 <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x26>
   17bae:	e004      	b.n	17bba <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x4a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:492
	//Ensure the size is a multiple of sectors by masking the lower address bits to zero
	CLR_BITS(size, (FLASH_SECTOR_SIZE - 1));

	//Check target addresses lie within memory
	if(!this->CheckAddress(addr, size))
		return FLASH_ERR_RANGE;
   17bb0:	2003      	movs	r0, #3
   17bb2:	e003      	b.n	17bbc <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x4c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:510
		//Decrease bytes remaining
		size -= FLASH_SECTOR_SIZE;
	}

	//Return success;
	return FLASH_OK;
   17bb4:	2000      	movs	r0, #0
   17bb6:	e001      	b.n	17bbc <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x4c>
   17bb8:	e000      	b.n	17bbc <CFlash::FlashEraseRange(unsigned int, unsigned int)+0x4c>
   17bba:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:511
}
   17bbc:	b002      	add	sp, #8
   17bbe:	bd70      	pop	{r4, r5, r6, pc}

00017bc0 <CFlash::FlashEraseSectors(unsigned int, unsigned short)>:
_ZN6CFlash17FlashEraseSectorsEjt():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:543
@param addr	Address at the start of the sector to erase.
@param sectors The number of sequential sectors to erase
@result Success or error code from the operation
*/
EFlashReturn CFlash::FlashEraseSectors(uint32 addr, uint16 sectors)
{
   17bc0:	b508      	push	{r3, lr}
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:544
	return this->FlashEraseRange(addr, sectors * FLASH_SECTOR_SIZE);
   17bc2:	0312      	lsls	r2, r2, #12
   17bc4:	f7ff ffd4 	bl	17b70 <CFlash::FlashEraseRange(unsigned int, unsigned int)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:545
}
   17bc8:	bd08      	pop	{r3, pc}
   17bca:	bf00      	nop

00017bcc <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)>:
_ZN6CFlash18FlashProgramPhraseEjPh():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:649
@param destAddr		An 8-byte (Phrase) aligned address in Flash where programming should start
@param srcData		Pointer to the data to program into the memory location
@result The return code indicating the success of the operation.
*/
EFlashReturn CFlash::FlashProgramPhrase(uint32 destAddr, puint8 srcData)
{
   17bcc:	b570      	push	{r4, r5, r6, lr}
   17bce:	b086      	sub	sp, #24
   17bd0:	4606      	mov	r6, r0
   17bd2:	4614      	mov	r4, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:653
	uint8 cmdData[12];

	//Ensure we have a Phrase address, by masking the lower address bits to zero
	CLR_BITS(destAddr, (FLASH_PHRASE_SIZE - 1));
   17bd4:	f021 0507 	bic.w	r5, r1, #7
   17bd8:	a906      	add	r1, sp, #24
   17bda:	f841 5d14 	str.w	r5, [r1, #-20]!
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:656

	//Check target addresses lie within memory
	if(!this->CheckAddress(destAddr, 8))
   17bde:	2208      	movs	r2, #8
   17be0:	f7ff ff2a 	bl	17a38 <CFlash::CheckAddress(unsigned int&, unsigned int)>
   17be4:	b378      	cbz	r0, 17c46 <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)+0x7a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:661
		return FLASH_ERR_RANGE;

	//Abort if we're trying to program the CONFIG area of flash, with the security settings in.
	//We should not change this as it may lock the device.
	if(_cfgLock && (destAddr >= FLASH_CNFG_START_ADDRESS) && (destAddr <= FLASH_CNFG_END_ADDRESS)) {
   17be6:	7b33      	ldrb	r3, [r6, #12]
   17be8:	b11b      	cbz	r3, 17bf2 <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)+0x26>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:661 (discriminator 1)
   17bea:	f5a5 6380 	sub.w	r3, r5, #1024	; 0x400
   17bee:	2b0f      	cmp	r3, #15
   17bf0:	d92b      	bls.n	17c4a <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)+0x7e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:667
		//Return OK, as we don't want to abort any block programming operations.
		return FLASH_OK;
	}

	//Prepare the ProgramLongword command to send
	cmdData[0] = FLASH_CMD_PROGRAM_PHRASE;
   17bf2:	2307      	movs	r3, #7
   17bf4:	f88d 300c 	strb.w	r3, [sp, #12]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:668
	cmdData[1] = (uint8)((destAddr >> 16) & 0xFF);
   17bf8:	0c2b      	lsrs	r3, r5, #16
   17bfa:	f88d 300d 	strb.w	r3, [sp, #13]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:669
	cmdData[2] = (uint8)((destAddr >> 8) & 0xFF);
   17bfe:	0a2b      	lsrs	r3, r5, #8
   17c00:	f88d 300e 	strb.w	r3, [sp, #14]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:670
	cmdData[3] = (uint8)(destAddr & 0xFF);
   17c04:	f88d 500f 	strb.w	r5, [sp, #15]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:674

	//For Little Endian access
	//First Word
	cmdData[4] = *(srcData + 3);
   17c08:	78e3      	ldrb	r3, [r4, #3]
   17c0a:	f88d 3010 	strb.w	r3, [sp, #16]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:675
	cmdData[5] = *(srcData + 2);
   17c0e:	78a3      	ldrb	r3, [r4, #2]
   17c10:	f88d 3011 	strb.w	r3, [sp, #17]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:676
	cmdData[6] = *(srcData + 1);
   17c14:	7863      	ldrb	r3, [r4, #1]
   17c16:	f88d 3012 	strb.w	r3, [sp, #18]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:677
	cmdData[7] = *(srcData + 0);
   17c1a:	7823      	ldrb	r3, [r4, #0]
   17c1c:	f88d 3013 	strb.w	r3, [sp, #19]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:679
	//Second Word
	cmdData[8] = *(srcData + 7);
   17c20:	79e3      	ldrb	r3, [r4, #7]
   17c22:	f88d 3014 	strb.w	r3, [sp, #20]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:680
	cmdData[9] = *(srcData + 6);
   17c26:	79a3      	ldrb	r3, [r4, #6]
   17c28:	f88d 3015 	strb.w	r3, [sp, #21]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:681
	cmdData[10] = *(srcData + 5);
   17c2c:	7963      	ldrb	r3, [r4, #5]
   17c2e:	f88d 3016 	strb.w	r3, [sp, #22]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:682
	cmdData[11] = *(srcData + 4);
   17c32:	7923      	ldrb	r3, [r4, #4]
   17c34:	f88d 3017 	strb.w	r3, [sp, #23]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:685

	//Execute the ProgramPhrase command
	return this->ExecuteCmd(12, cmdData);
   17c38:	4630      	mov	r0, r6
   17c3a:	210c      	movs	r1, #12
   17c3c:	eb0d 0201 	add.w	r2, sp, r1
   17c40:	f7ff ff04 	bl	17a4c <CFlash::ExecuteCmd(unsigned char, unsigned char*)>
   17c44:	e002      	b.n	17c4c <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:657
	//Ensure we have a Phrase address, by masking the lower address bits to zero
	CLR_BITS(destAddr, (FLASH_PHRASE_SIZE - 1));

	//Check target addresses lie within memory
	if(!this->CheckAddress(destAddr, 8))
		return FLASH_ERR_RANGE;
   17c46:	2003      	movs	r0, #3
   17c48:	e000      	b.n	17c4c <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)+0x80>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:663

	//Abort if we're trying to program the CONFIG area of flash, with the security settings in.
	//We should not change this as it may lock the device.
	if(_cfgLock && (destAddr >= FLASH_CNFG_START_ADDRESS) && (destAddr <= FLASH_CNFG_END_ADDRESS)) {
		//Return OK, as we don't want to abort any block programming operations.
		return FLASH_OK;
   17c4a:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:686
	cmdData[10] = *(srcData + 5);
	cmdData[11] = *(srcData + 4);

	//Execute the ProgramPhrase command
	return this->ExecuteCmd(12, cmdData);
}
   17c4c:	b006      	add	sp, #24
   17c4e:	bd70      	pop	{r4, r5, r6, pc}

00017c50 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)>:
_ZN6CFlash12FlashProgramEjPhjPj():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:562
@param size			The number of bytes to program
@param failAddr		Optional address where a verify fail error address should be stored. Use NULL if not required
@result The return code indicating the success of the operation.
*/
EFlashReturn CFlash::FlashProgram(uint32 destAddr, puint8 srcData, uint32 size, puint32 failAddr)
{
   17c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c54:	b084      	sub	sp, #16
   17c56:	4681      	mov	r9, r0
   17c58:	9101      	str	r1, [sp, #4]
   17c5a:	4690      	mov	r8, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:570
	uint8 buf[FLASH_PHRASE_SIZE];
	puint8 destPtr;
	EFlashReturn returnCode;

	//Return a OK if no bytes are specified
	if(size == 0)
   17c5c:	461e      	mov	r6, r3
   17c5e:	2b00      	cmp	r3, #0
   17c60:	d03b      	beq.n	17cda <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x8a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:574
		return FLASH_OK;

	//Check target addresses lie within memory
	if(!this->CheckAddress(destAddr, size))
   17c62:	a901      	add	r1, sp, #4
   17c64:	461a      	mov	r2, r3
   17c66:	f7ff fee7 	bl	17a38 <CFlash::CheckAddress(unsigned int&, unsigned int)>
   17c6a:	2800      	cmp	r0, #0
   17c6c:	d037      	beq.n	17cde <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x8e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:587
			//Handle the starting and ending condition, where...
			//a) DestAddress doesn't lie on an 8-byte boundry (starting case)
			//b) Size is less than 8-bytes (ending, or if less than 8 bytes are to be programmed)

			//Ensure we have a Phrase address, by masking the lower address bits to zero
			CLR_BITS(destAddr, (FLASH_PHRASE_SIZE - 1));
   17c6e:	f04f 0a00 	mov.w	sl, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:610
				}
				destPtr++;
			}

			//Program the phrase
			returnCode = this->FlashProgramPhrase(destAddr, buf);
   17c72:	af02      	add	r7, sp, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:579
	if(!this->CheckAddress(destAddr, size))
		return FLASH_ERR_RANGE;

	while(size > 0) {
		//Determine if the destAddr lies on an 8-byte boundry, or how far away it lies
		destOffset = destAddr % FLASH_PHRASE_SIZE;
   17c74:	9901      	ldr	r1, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:581

		if((destOffset > 0) || (size < FLASH_PHRASE_SIZE)) {
   17c76:	f011 0307 	ands.w	r3, r1, #7
   17c7a:	d101      	bne.n	17c80 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:581 (discriminator 1)
   17c7c:	2e07      	cmp	r6, #7
   17c7e:	d819      	bhi.n	17cb4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x64>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:587
			//Handle the starting and ending condition, where...
			//a) DestAddress doesn't lie on an 8-byte boundry (starting case)
			//b) Size is less than 8-bytes (ending, or if less than 8 bytes are to be programmed)

			//Ensure we have a Phrase address, by masking the lower address bits to zero
			CLR_BITS(destAddr, (FLASH_PHRASE_SIZE - 1));
   17c80:	f021 0107 	bic.w	r1, r1, #7
   17c84:	9101      	str	r1, [sp, #4]
   17c86:	4654      	mov	r4, sl
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:592

			//Read in the current destinations bytes existing contents
			destPtr = (puint8)destAddr;
			for(i = 0; i < FLASH_PHRASE_SIZE; i++) {
				if(i < destOffset) {
   17c88:	b2e5      	uxtb	r5, r4
   17c8a:	42ab      	cmp	r3, r5
   17c8c:	d902      	bls.n	17c94 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x44>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:594
					//Copy any existing destination bytes prior to the new bytes
					buf[i] = *destPtr;
   17c8e:	5c62      	ldrb	r2, [r4, r1]
   17c90:	55e2      	strb	r2, [r4, r7]
   17c92:	e007      	b.n	17ca4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x54>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:596
				}
				else if(size > 0) {
   17c94:	b126      	cbz	r6, 17ca0 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x50>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:598
					//Copy in new bytes to program to the destination
					buf[i] = *srcData;
   17c96:	f818 2b01 	ldrb.w	r2, [r8], #1
   17c9a:	55e2      	strb	r2, [r4, r7]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:600
					srcData++;
					size--;
   17c9c:	3e01      	subs	r6, #1
   17c9e:	e001      	b.n	17ca4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x54>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:604
				}
				else {
					//Fill remaing bytes with existing destinaiton if size is less than FLASH_PHRASE_SIZE
					buf[i] = *destPtr;
   17ca0:	5c62      	ldrb	r2, [r4, r1]
   17ca2:	55e2      	strb	r2, [r4, r7]
   17ca4:	3401      	adds	r4, #1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:591
			//Ensure we have a Phrase address, by masking the lower address bits to zero
			CLR_BITS(destAddr, (FLASH_PHRASE_SIZE - 1));

			//Read in the current destinations bytes existing contents
			destPtr = (puint8)destAddr;
			for(i = 0; i < FLASH_PHRASE_SIZE; i++) {
   17ca6:	2c08      	cmp	r4, #8
   17ca8:	d1ee      	bne.n	17c88 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x38>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:610
				}
				destPtr++;
			}

			//Program the phrase
			returnCode = this->FlashProgramPhrase(destAddr, buf);
   17caa:	4648      	mov	r0, r9
   17cac:	463a      	mov	r2, r7
   17cae:	f7ff ff8d 	bl	17bcc <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)>
   17cb2:	e006      	b.n	17cc2 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x72>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:614
		}
		else {
			//Program the next 8-byte sequence
			returnCode = this->FlashProgramPhrase(destAddr, srcData);
   17cb4:	4648      	mov	r0, r9
   17cb6:	4642      	mov	r2, r8
   17cb8:	f7ff ff88 	bl	17bcc <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:617

			//Update variables
			srcData += FLASH_PHRASE_SIZE;
   17cbc:	f108 0808 	add.w	r8, r8, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:618
			size -= FLASH_PHRASE_SIZE;
   17cc0:	3e08      	subs	r6, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:622
		}

		//Abort if an error occured
		if(returnCode != FLASH_OK) {
   17cc2:	b120      	cbz	r0, 17cce <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x7e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:624
			//If assigned, store the failing Flash Address
			if(failAddr)
   17cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17cc6:	b16a      	cbz	r2, 17ce4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x94>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:625
				*failAddr = destAddr;
   17cc8:	9b01      	ldr	r3, [sp, #4]
   17cca:	6013      	str	r3, [r2, #0]
   17ccc:	e00a      	b.n	17ce4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x94>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:631
			//Return the error code
			return returnCode;
		}

		//Update the destination address
		destAddr += FLASH_PHRASE_SIZE;
   17cce:	9b01      	ldr	r3, [sp, #4]
   17cd0:	3308      	adds	r3, #8
   17cd2:	9301      	str	r3, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:577

	//Check target addresses lie within memory
	if(!this->CheckAddress(destAddr, size))
		return FLASH_ERR_RANGE;

	while(size > 0) {
   17cd4:	2e00      	cmp	r6, #0
   17cd6:	d1cd      	bne.n	17c74 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x24>
   17cd8:	e003      	b.n	17ce2 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x92>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:571
	puint8 destPtr;
	EFlashReturn returnCode;

	//Return a OK if no bytes are specified
	if(size == 0)
		return FLASH_OK;
   17cda:	2000      	movs	r0, #0
   17cdc:	e002      	b.n	17ce4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x94>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:575

	//Check target addresses lie within memory
	if(!this->CheckAddress(destAddr, size))
		return FLASH_ERR_RANGE;
   17cde:	2003      	movs	r0, #3
   17ce0:	e000      	b.n	17ce4 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)+0x94>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:635
		//Update the destination address
		destAddr += FLASH_PHRASE_SIZE;
	}

	//Return sccuess
	return FLASH_OK;
   17ce2:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:636
}
   17ce4:	b004      	add	sp, #16
   17ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17cea:	bf00      	nop

00017cec <CFlash::FlashVerifySectors(unsigned int, unsigned short, EFlashReadMargin)>:
_ZN6CFlash18FlashVerifySectorsEjt16EFlashReadMargin():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:731
@param sectors The number of flash sectors to check
@param marginLevel The margin level to verify the sector contents at.
@result Success or error code from the operation
*/
EFlashReturn CFlash::FlashVerifySectors(uint32 addr, uint16 sectors, EFlashReadMargin marginLevel)
{
   17cec:	b510      	push	{r4, lr}
   17cee:	b082      	sub	sp, #8
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:735
	uint8 cmdData[7];

	//Calcualte number of 128 byte sections to check for single flash sector
	uint16 size = (FLASH_SECTOR_SIZE / 128) * sectors;
   17cf0:	0152      	lsls	r2, r2, #5
   17cf2:	b292      	uxth	r2, r2
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:738

	//Ensure we have a sector address, by masking the lower address bits to zero
	CLR_BITS(addr, (FLASH_SECTOR_SIZE - 1));
   17cf4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   17cf8:	f021 010f 	bic.w	r1, r1, #15
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:741

	//Preparing passing parameter to erase a flash block
	cmdData[0] = FLASH_CMD_VERIFY_SECTION;
   17cfc:	2401      	movs	r4, #1
   17cfe:	f88d 4000 	strb.w	r4, [sp]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:742
	cmdData[1] = (uint8)((addr >> 16) & 0xFF);
   17d02:	0c0c      	lsrs	r4, r1, #16
   17d04:	f88d 4001 	strb.w	r4, [sp, #1]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:743
	cmdData[2] = (uint8)((addr >> 8) & 0xFF);
   17d08:	0a09      	lsrs	r1, r1, #8
   17d0a:	f88d 1002 	strb.w	r1, [sp, #2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:744
	cmdData[3] = (uint8)(addr & 0xFF);
   17d0e:	2100      	movs	r1, #0
   17d10:	f88d 1003 	strb.w	r1, [sp, #3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:745
	cmdData[4] = (uint8)((size >> 8) & 0xFF);
   17d14:	0a11      	lsrs	r1, r2, #8
   17d16:	f88d 1004 	strb.w	r1, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:746
	cmdData[5] = (uint8)(size & 0xFF);
   17d1a:	f88d 2005 	strb.w	r2, [sp, #5]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:747
	cmdData[6] = (uint8)marginLevel;
   17d1e:	f88d 3006 	strb.w	r3, [sp, #6]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:750

	//Calling flash command sequence function to execute the command
	return this->ExecuteCmd(7, cmdData);
   17d22:	2107      	movs	r1, #7
   17d24:	466a      	mov	r2, sp
   17d26:	f7ff fe91 	bl	17a4c <CFlash::ExecuteCmd(unsigned char, unsigned char*)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/flash.cpp:751
}
   17d2a:	b002      	add	sp, #8
   17d2c:	bd10      	pop	{r4, pc}
   17d2e:	bf00      	nop

00017d30 <CMcg::Initialise(TMcgConfig*)>:
_ZN4CMcg10InitialiseEP10TMcgConfig():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:21

/*!-----------------------------------------------------------------------------
Function that is called to initialise the MCG module
*/
void CMcg::Initialise(PMcgConfig cfg)
{
   17d30:	b4f0      	push	{r4, r5, r6, r7}
   17d32:	4606      	mov	r6, r0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:23
	//Store the config structure
	CMcg::Config = *cfg;
   17d34:	4f49      	ldr	r7, [pc, #292]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17d36:	463c      	mov	r4, r7
   17d38:	4605      	mov	r5, r0
   17d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17d3e:	682b      	ldr	r3, [r5, #0]
   17d40:	6023      	str	r3, [r4, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:28

	// --- MCU powers up in FEI (FLL Engaged Internal) mode ---

	// Select the internal load capacitors for a crystal oscillator capacitance of about 18pF
	OSC0->CR = (uint8)(CMcg::Config.OSCCR);
   17d42:	783a      	ldrb	r2, [r7, #0]
   17d44:	4b46      	ldr	r3, [pc, #280]	; (17e60 <CMcg::Initialise(TMcgConfig*)+0x130>)
   17d46:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:33

	// --- Switch FEI to FBE (FLL Bypassed External) mode ---

	// Choose the clock source to the MCG
	if(cfg->OscSrc == OSCSRC_OSC) {
   17d48:	7873      	ldrb	r3, [r6, #1]
   17d4a:	2b01      	cmp	r3, #1
   17d4c:	d108      	bne.n	17d60 <CMcg::Initialise(TMcgConfig*)+0x30>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:35
		//External Crystal Oscillator
		MCG->C2 = (uint8)(MCG_C2_EREFS0_MASK | MCG_C2_RANGE0(CMcg::Config.RANGE));
   17d4e:	78ba      	ldrb	r2, [r7, #2]
   17d50:	0112      	lsls	r2, r2, #4
   17d52:	f002 0230 	and.w	r2, r2, #48	; 0x30
   17d56:	f042 0204 	orr.w	r2, r2, #4
   17d5a:	4b42      	ldr	r3, [pc, #264]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d5c:	705a      	strb	r2, [r3, #1]
   17d5e:	e006      	b.n	17d6e <CMcg::Initialise(TMcgConfig*)+0x3e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:39
	}
	else {
		//External TTL Oscillator
		MCG->C2 = (uint8)(MCG_C2_RANGE0(CMcg::Config.RANGE));
   17d60:	4b3e      	ldr	r3, [pc, #248]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17d62:	789a      	ldrb	r2, [r3, #2]
   17d64:	0112      	lsls	r2, r2, #4
   17d66:	f002 0230 	and.w	r2, r2, #48	; 0x30
   17d6a:	4b3e      	ldr	r3, [pc, #248]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d6c:	705a      	strb	r2, [r3, #1]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:43
	}

	// Select the external oscillator and set the FLL reference divider (divide 20MHz by 512 to get 39.0625kHz)
	MCG->C1 = (uint8)(MCG_C1_CLKS(2) | MCG_C1_FRDIV(CMcg::Config.FRDIV));
   17d6e:	4b3b      	ldr	r3, [pc, #236]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17d70:	78da      	ldrb	r2, [r3, #3]
   17d72:	00d2      	lsls	r2, r2, #3
   17d74:	f002 0238 	and.w	r2, r2, #56	; 0x38
   17d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   17d7c:	4b39      	ldr	r3, [pc, #228]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d7e:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:46

	// Wait for the oscillator to initialise
	if(cfg->OscSrc == OSCSRC_OSC) {
   17d80:	7873      	ldrb	r3, [r6, #1]
   17d82:	2b01      	cmp	r3, #1
   17d84:	d104      	bne.n	17d90 <CMcg::Initialise(TMcgConfig*)+0x60>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:47 (discriminator 1)
		while (!(MCG->S & MCG_S_OSCINIT0_MASK));
   17d86:	4a37      	ldr	r2, [pc, #220]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d88:	7993      	ldrb	r3, [r2, #6]
   17d8a:	f013 0f02 	tst.w	r3, #2
   17d8e:	d0fb      	beq.n	17d88 <CMcg::Initialise(TMcgConfig*)+0x58>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:51 (discriminator 1)
	}

	// Wait for the reference clock to switch to the external reference
	while (MCG->S & MCG_S_IREFST_MASK);
   17d90:	4a34      	ldr	r2, [pc, #208]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d92:	7993      	ldrb	r3, [r2, #6]
   17d94:	f013 0f10 	tst.w	r3, #16
   17d98:	d1fb      	bne.n	17d92 <CMcg::Initialise(TMcgConfig*)+0x62>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:54 (discriminator 1)

	// Wait for MCGOUTCLK to switch over to the external reference clock
	while ((MCG->S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2));
   17d9a:	4a32      	ldr	r2, [pc, #200]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17d9c:	7993      	ldrb	r3, [r2, #6]
   17d9e:	f003 030c 	and.w	r3, r3, #12
   17da2:	2b08      	cmp	r3, #8
   17da4:	d1fa      	bne.n	17d9c <CMcg::Initialise(TMcgConfig*)+0x6c>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:59

	// --- Switch FBE to PBE (PLL Bypassed External) mode ---

	// Setup PLL divisor (documentation says between 8 and 16Mhz > See Page 650 (section 25.5.3))
	MCG->C5 = (uint8)(MCG_C5_PRDIV0(CMcg::Config.PRDIV));
   17da6:	4a2d      	ldr	r2, [pc, #180]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17da8:	7911      	ldrb	r1, [r2, #4]
   17daa:	f001 0107 	and.w	r1, r1, #7
   17dae:	4b2d      	ldr	r3, [pc, #180]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17db0:	7119      	strb	r1, [r3, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:62

	// Setup PLL multiplier
	MCG->C6 = (uint8)(MCG_C6_CME0_MASK | MCG_C6_PLLS_MASK | MCG_C6_VDIV0(CMcg::Config.VDIV));
   17db2:	7952      	ldrb	r2, [r2, #5]
   17db4:	f002 021f 	and.w	r2, r2, #31
   17db8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
   17dbc:	715a      	strb	r2, [r3, #5]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:65

	// Wait for the PLLST bit to be set, when PLLCS has obtained a lock
	while (!(MCG->S & MCG_S_PLLST_MASK));
   17dbe:	461a      	mov	r2, r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:65 (discriminator 1)
   17dc0:	7993      	ldrb	r3, [r2, #6]
   17dc2:	f013 0f20 	tst.w	r3, #32
   17dc6:	d0fb      	beq.n	17dc0 <CMcg::Initialise(TMcgConfig*)+0x90>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:68 (discriminator 1)

	// Wait for PLL0 to lock
	while (!(MCG->S & MCG_S_LOCK0_MASK));
   17dc8:	4a26      	ldr	r2, [pc, #152]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17dca:	7993      	ldrb	r3, [r2, #6]
   17dcc:	f013 0f40 	tst.w	r3, #64	; 0x40
   17dd0:	d0fb      	beq.n	17dca <CMcg::Initialise(TMcgConfig*)+0x9a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:71

	// Set up the clock dividers for Sys, Peripheral, Bus and Flash clocks
	SIM->CLKDIV1 = SIM_CLKDIV1_OUTDIV1(CMcg::Config.ClkDivSys - 1) | SIM_CLKDIV1_OUTDIV2(CMcg::Config.ClkDivPeripheral - 1) | SIM_CLKDIV1_OUTDIV3(CMcg::Config.ClkDivBus - 1) | SIM_CLKDIV1_OUTDIV4(CMcg::Config.ClkDivFlash - 1);
   17dd2:	4b22      	ldr	r3, [pc, #136]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17dd4:	7c19      	ldrb	r1, [r3, #16]
   17dd6:	3901      	subs	r1, #1
   17dd8:	7c5a      	ldrb	r2, [r3, #17]
   17dda:	3a01      	subs	r2, #1
   17ddc:	0612      	lsls	r2, r2, #24
   17dde:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
   17de2:	ea42 7101 	orr.w	r1, r2, r1, lsl #28
   17de6:	7c9a      	ldrb	r2, [r3, #18]
   17de8:	3a01      	subs	r2, #1
   17dea:	0512      	lsls	r2, r2, #20
   17dec:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
   17df0:	4311      	orrs	r1, r2
   17df2:	7cdb      	ldrb	r3, [r3, #19]
   17df4:	3b01      	subs	r3, #1
   17df6:	041b      	lsls	r3, r3, #16
   17df8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   17dfc:	4319      	orrs	r1, r3
   17dfe:	f241 0344 	movw	r3, #4164	; 0x1044
   17e02:	4a19      	ldr	r2, [pc, #100]	; (17e68 <CMcg::Initialise(TMcgConfig*)+0x138>)
   17e04:	50d1      	str	r1, [r2, r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:76

	// --- Switch PBE to PEE (PLL Engaged External) mode ---

	// Set the clock source back to PLL
	CLR_BITS(MCG->C1, MCG_C1_CLKS_MASK);
   17e06:	4b17      	ldr	r3, [pc, #92]	; (17e64 <CMcg::Initialise(TMcgConfig*)+0x134>)
   17e08:	781a      	ldrb	r2, [r3, #0]
   17e0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17e0e:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:79

	// Wait for PLL output to be selected
	while ((MCG->S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3));
   17e10:	461a      	mov	r2, r3
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:79 (discriminator 1)
   17e12:	7993      	ldrb	r3, [r2, #6]
   17e14:	f003 030c 	and.w	r3, r3, #12
   17e18:	2b0c      	cmp	r3, #12
   17e1a:	d1fa      	bne.n	17e12 <CMcg::Initialise(TMcgConfig*)+0xe2>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:82

	/* SIM_SCGC7: MPU=1 */
	SET_BITS(SIM->SCGC7, SIM_SCGC7_MPU_MASK);
   17e1c:	4b13      	ldr	r3, [pc, #76]	; (17e6c <CMcg::Initialise(TMcgConfig*)+0x13c>)
   17e1e:	681a      	ldr	r2, [r3, #0]
   17e20:	f042 0204 	orr.w	r2, r2, #4
   17e24:	601a      	str	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:85

	//Reset the memory protection unit (not really clock initialisation)
	MPU->CESR = 0x00;
   17e26:	2200      	movs	r2, #0
   17e28:	4b11      	ldr	r3, [pc, #68]	; (17e70 <CMcg::Initialise(TMcgConfig*)+0x140>)
   17e2a:	601a      	str	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:88

	//Initialise global MCG variables
	CMcg::ClkSysFreq = CMcg::Config.ClkMcgFreq / CMcg::Config.ClkDivSys;
   17e2c:	4b0b      	ldr	r3, [pc, #44]	; (17e5c <CMcg::Initialise(TMcgConfig*)+0x12c>)
   17e2e:	68da      	ldr	r2, [r3, #12]
   17e30:	7c18      	ldrb	r0, [r3, #16]
   17e32:	fbb2 f0f0 	udiv	r0, r2, r0
   17e36:	490f      	ldr	r1, [pc, #60]	; (17e74 <CMcg::Initialise(TMcgConfig*)+0x144>)
   17e38:	6008      	str	r0, [r1, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:89
	CMcg::ClkIntBusFreq = CMcg::Config.ClkMcgFreq / CMcg::Config.ClkDivPeripheral;
   17e3a:	7c58      	ldrb	r0, [r3, #17]
   17e3c:	fbb2 f0f0 	udiv	r0, r2, r0
   17e40:	490d      	ldr	r1, [pc, #52]	; (17e78 <CMcg::Initialise(TMcgConfig*)+0x148>)
   17e42:	6008      	str	r0, [r1, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:90
	CMcg::ClkFlexBusFreq = CMcg::Config.ClkMcgFreq / CMcg::Config.ClkDivBus;
   17e44:	7c98      	ldrb	r0, [r3, #18]
   17e46:	fbb2 f0f0 	udiv	r0, r2, r0
   17e4a:	490c      	ldr	r1, [pc, #48]	; (17e7c <CMcg::Initialise(TMcgConfig*)+0x14c>)
   17e4c:	6008      	str	r0, [r1, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:91
	CMcg::ClkFlashFreq = CMcg::Config.ClkMcgFreq / CMcg::Config.ClkDivFlash;
   17e4e:	7cdb      	ldrb	r3, [r3, #19]
   17e50:	fbb2 f2f3 	udiv	r2, r2, r3
   17e54:	4b0a      	ldr	r3, [pc, #40]	; (17e80 <CMcg::Initialise(TMcgConfig*)+0x150>)
   17e56:	601a      	str	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/mcg.cpp:92
}
   17e58:	bcf0      	pop	{r4, r5, r6, r7}
   17e5a:	4770      	bx	lr
   17e5c:	1fff00e4 	.word	0x1fff00e4
   17e60:	40065000 	.word	0x40065000
   17e64:	40064000 	.word	0x40064000
   17e68:	40047000 	.word	0x40047000
   17e6c:	40048040 	.word	0x40048040
   17e70:	4000d000 	.word	0x4000d000
   17e74:	1fff00f8 	.word	0x1fff00f8
   17e78:	1fff00dc 	.word	0x1fff00dc
   17e7c:	1fff00e0 	.word	0x1fff00e0
   17e80:	1fff00d8 	.word	0x1fff00d8

00017e84 <CSysTick::GetFrequency()>:
_ZN8CSysTick12GetFrequencyEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:37
Returns the actual tick frequency of the clock
*/
double CSysTick::GetFrequency()
{
	return CSysTick::_clkFrequency;
}
   17e84:	4b01      	ldr	r3, [pc, #4]	; (17e8c <CSysTick::GetFrequency()+0x8>)
   17e86:	ed93 0b00 	vldr	d0, [r3]
   17e8a:	4770      	bx	lr
   17e8c:	1fff0100 	.word	0x1fff0100

00017e90 <CSysTick::GetTicks()>:
_ZN8CSysTick8GetTicksEv():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:56
Returns the value of the clock in ticks (epochs of the SysTick timer)
*/
TTimeTicks CSysTick::GetTicks()
{
	TTimeTicks ticks;
	IRQ_DISABLE;
   17e90:	b672      	cpsid	i
   17e92:	4b0c      	ldr	r3, [pc, #48]	; (17ec4 <CSysTick::GetTicks()+0x34>)
   17e94:	781a      	ldrb	r2, [r3, #0]
   17e96:	3201      	adds	r2, #1
   17e98:	b2d2      	uxtb	r2, r2
   17e9a:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:57
	ticks = CSysTick::_clkTicks;
   17e9c:	4a0a      	ldr	r2, [pc, #40]	; (17ec8 <CSysTick::GetTicks()+0x38>)
   17e9e:	e9d2 0100 	ldrd	r0, r1, [r2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:58
	IRQ_ENABLE;
   17ea2:	b672      	cpsid	i
   17ea4:	781b      	ldrb	r3, [r3, #0]
   17ea6:	f013 0fff 	tst.w	r3, #255	; 0xff
   17eaa:	d004      	beq.n	17eb6 <CSysTick::GetTicks()+0x26>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:58 (discriminator 1)
   17eac:	4b05      	ldr	r3, [pc, #20]	; (17ec4 <CSysTick::GetTicks()+0x34>)
   17eae:	781a      	ldrb	r2, [r3, #0]
   17eb0:	3a01      	subs	r2, #1
   17eb2:	b2d2      	uxtb	r2, r2
   17eb4:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:58 (discriminator 2)
   17eb6:	4b03      	ldr	r3, [pc, #12]	; (17ec4 <CSysTick::GetTicks()+0x34>)
   17eb8:	781b      	ldrb	r3, [r3, #0]
   17eba:	f013 0fff 	tst.w	r3, #255	; 0xff
   17ebe:	d100      	bne.n	17ec2 <CSysTick::GetTicks()+0x32>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:58 (discriminator 1)
   17ec0:	b662      	cpsie	i
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:60
	return ticks;
}
   17ec2:	4770      	bx	lr
   17ec4:	1fff0310 	.word	0x1fff0310
   17ec8:	1fff0108 	.word	0x1fff0108

00017ecc <CSysTick::SetTicks(long long)>:
_ZN8CSysTick8SetTicksEx():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:77
/*!-----------------------------------------------------------------------------
Function the sets the value of the clock in ticks (epochs of the SysTick timer)
*/
void CSysTick::SetTicks(TTimeTicks ticks)
{
	IRQ_DISABLE;
   17ecc:	b672      	cpsid	i
   17ece:	4b0c      	ldr	r3, [pc, #48]	; (17f00 <CSysTick::SetTicks(long long)+0x34>)
   17ed0:	781a      	ldrb	r2, [r3, #0]
   17ed2:	3201      	adds	r2, #1
   17ed4:	b2d2      	uxtb	r2, r2
   17ed6:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:78
	CSysTick::_clkTicks = ticks;
   17ed8:	4a0a      	ldr	r2, [pc, #40]	; (17f04 <CSysTick::SetTicks(long long)+0x38>)
   17eda:	e9c2 0100 	strd	r0, r1, [r2]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:79
	IRQ_ENABLE;
   17ede:	b672      	cpsid	i
   17ee0:	781b      	ldrb	r3, [r3, #0]
   17ee2:	f013 0fff 	tst.w	r3, #255	; 0xff
   17ee6:	d004      	beq.n	17ef2 <CSysTick::SetTicks(long long)+0x26>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:79 (discriminator 1)
   17ee8:	4b05      	ldr	r3, [pc, #20]	; (17f00 <CSysTick::SetTicks(long long)+0x34>)
   17eea:	781a      	ldrb	r2, [r3, #0]
   17eec:	3a01      	subs	r2, #1
   17eee:	b2d2      	uxtb	r2, r2
   17ef0:	701a      	strb	r2, [r3, #0]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:79 (discriminator 2)
   17ef2:	4b03      	ldr	r3, [pc, #12]	; (17f00 <CSysTick::SetTicks(long long)+0x34>)
   17ef4:	781b      	ldrb	r3, [r3, #0]
   17ef6:	f013 0fff 	tst.w	r3, #255	; 0xff
   17efa:	d100      	bne.n	17efe <CSysTick::SetTicks(long long)+0x32>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:79 (discriminator 1)
   17efc:	b662      	cpsie	i
   17efe:	4770      	bx	lr
   17f00:	1fff0310 	.word	0x1fff0310
   17f04:	1fff0108 	.word	0x1fff0108

00017f08 <CSysTick::Initialise(double)>:
_ZN8CSysTick10InitialiseEd():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:13
volatile TTimeTicks CSysTick::_clkTicks = 0.0;

/*!-----------------------------------------------------------------------------
*/
void CSysTick::Initialise(double frequency)
{
   17f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f0c:	ec57 6b10 	vmov	r6, r7, d0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:15
	//Stop the SysTick timer
	CLR_BITS(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk);
   17f10:	f8df 806c 	ldr.w	r8, [pc, #108]	; 17f80 <CSysTick::Initialise(double)+0x78>
   17f14:	f8d8 3000 	ldr.w	r3, [r8]
   17f18:	f023 0301 	bic.w	r3, r3, #1
   17f1c:	f8c8 3000 	str.w	r3, [r8]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:18

	//Clear the overall timer counter
	CSysTick::SetTicks(0);
   17f20:	2000      	movs	r0, #0
   17f22:	2100      	movs	r1, #0
   17f24:	f7ff ffd2 	bl	17ecc <CSysTick::SetTicks(long long)>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:21

	//Compute the load interval
	uint32 load = (uint32)(((double)CMcg::ClkSysFreq / frequency) - 1);
   17f28:	4b12      	ldr	r3, [pc, #72]	; (17f74 <CSysTick::Initialise(double)+0x6c>)
   17f2a:	6818      	ldr	r0, [r3, #0]
   17f2c:	f7fd ffd8 	bl	15ee0 <__aeabi_ui2d>
   17f30:	4604      	mov	r4, r0
   17f32:	460d      	mov	r5, r1
   17f34:	4632      	mov	r2, r6
   17f36:	463b      	mov	r3, r7
   17f38:	f7fe f972 	bl	16220 <__aeabi_ddiv>
   17f3c:	2200      	movs	r2, #0
   17f3e:	4b0e      	ldr	r3, [pc, #56]	; (17f78 <CSysTick::Initialise(double)+0x70>)
   17f40:	f7fd fe90 	bl	15c64 <__aeabi_dsub>
   17f44:	f7fe fb04 	bl	16550 <__aeabi_d2uiz>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:22
	SysTick->LOAD = load;
   17f48:	f8c8 0004 	str.w	r0, [r8, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:25

	//Compute the actual frequency, based on the integer nature of the clock
	CSysTick::_clkFrequency = (double)CMcg::ClkSysFreq / (double)(load + 1);
   17f4c:	3001      	adds	r0, #1
   17f4e:	f7fd ffc7 	bl	15ee0 <__aeabi_ui2d>
   17f52:	4602      	mov	r2, r0
   17f54:	460b      	mov	r3, r1
   17f56:	4620      	mov	r0, r4
   17f58:	4629      	mov	r1, r5
   17f5a:	f7fe f961 	bl	16220 <__aeabi_ddiv>
   17f5e:	4b07      	ldr	r3, [pc, #28]	; (17f7c <CSysTick::Initialise(double)+0x74>)
   17f60:	e9c3 0100 	strd	r0, r1, [r3]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:28

	//Start the SysTick timer with the new load value, and allow interrupts
	SET_BITS(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk);
   17f64:	f8d8 3000 	ldr.w	r3, [r8]
   17f68:	f043 0307 	orr.w	r3, r3, #7
   17f6c:	f8c8 3000 	str.w	r3, [r8]
   17f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17f74:	1fff00f8 	.word	0x1fff00f8
   17f78:	3ff00000 	.word	0x3ff00000
   17f7c:	1fff0100 	.word	0x1fff0100
   17f80:	e000e010 	.word	0xe000e010

00017f84 <CSysTick::WaitMilliseconds(float)>:
_ZN8CSysTick16WaitMillisecondsEf():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:86

/*!-----------------------------------------------------------------------------
Function called to wait a set number of milliseconds, based on the SysTick timer
*/
void CSysTick::WaitMilliseconds(float interval)
{
   17f84:	b538      	push	{r3, r4, r5, lr}
   17f86:	ed2d 8b02 	vpush	{d8}
   17f8a:	eeb0 8a40 	vmov.f32	s16, s0
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:87
	if(interval > 0) {
   17f8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   17f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17f96:	dd22      	ble.n	17fde <CSysTick::WaitMilliseconds(float)+0x5a>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:89
		//Get the number of ticks at the starting time
		TTimeTicks start = CSysTick::GetTicks();
   17f98:	f7ff ff7a 	bl	17e90 <CSysTick::GetTicks()>
   17f9c:	4604      	mov	r4, r0
   17f9e:	460d      	mov	r5, r1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:92

		//Compute the number of ticks per millisecond
		float ticksPerMsec = (float)(CSysTick::_clkFrequency / 1000.0);
   17fa0:	4b10      	ldr	r3, [pc, #64]	; (17fe4 <CSysTick::WaitMilliseconds(float)+0x60>)
   17fa2:	e9d3 0100 	ldrd	r0, r1, [r3]
   17fa6:	2200      	movs	r2, #0
   17fa8:	4b0f      	ldr	r3, [pc, #60]	; (17fe8 <CSysTick::WaitMilliseconds(float)+0x64>)
   17faa:	f7fe f939 	bl	16220 <__aeabi_ddiv>
   17fae:	f7fe faef 	bl	16590 <__aeabi_d2f>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:96

		//Compute the ticks ending time
		float delta = interval * ticksPerMsec;
		TTimeTicks end = start + (TTimeTicks)delta;
   17fb2:	ee07 0a90 	vmov	s15, r0
   17fb6:	ee68 7a27 	vmul.f32	s15, s16, s15
   17fba:	ee17 0a90 	vmov	r0, s15
   17fbe:	f7fe fb37 	bl	16630 <__aeabi_f2lz>
   17fc2:	1824      	adds	r4, r4, r0
   17fc4:	eb45 0501 	adc.w	r5, r5, r1
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:99

		//Loop until we reach the ending time
		while(CSysTick::GetTicks() < end) {
   17fc8:	e003      	b.n	17fd2 <CSysTick::WaitMilliseconds(float)+0x4e>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:101
			//Allow some time between polling the ISR value
			NOP;
   17fca:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:102
			NOP;
   17fcc:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:103
			NOP;
   17fce:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:104
			NOP;
   17fd0:	bf00      	nop
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:99 (discriminator 1)
		//Compute the ticks ending time
		float delta = interval * ticksPerMsec;
		TTimeTicks end = start + (TTimeTicks)delta;

		//Loop until we reach the ending time
		while(CSysTick::GetTicks() < end) {
   17fd2:	f7ff ff5d 	bl	17e90 <CSysTick::GetTicks()>
   17fd6:	42a0      	cmp	r0, r4
   17fd8:	eb71 0305 	sbcs.w	r3, r1, r5
   17fdc:	dbf5      	blt.n	17fca <CSysTick::WaitMilliseconds(float)+0x46>
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:107
			NOP;
			NOP;
			NOP;
		}
	}
}
   17fde:	ecbd 8b02 	vpop	{d8}
   17fe2:	bd38      	pop	{r3, r4, r5, pc}
   17fe4:	1fff0100 	.word	0x1fff0100
   17fe8:	408f4000 	.word	0x408f4000

00017fec <ISR_SysTick>:
ISR_SysTick():
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:120

/*!-----------------------------------------------------------------------------
Handler for the SysTick interrupt
*/
void ISR_SysTick(void)
{
   17fec:	4668      	mov	r0, sp
   17fee:	f020 0107 	bic.w	r1, r0, #7
   17ff2:	468d      	mov	sp, r1
   17ff4:	b401      	push	{r0}
   17ff6:	b083      	sub	sp, #12
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:122
	//Clear interrupt by reading the Control/Status Register
	volatile uint32 dummy = SysTick->CTRL;
   17ff8:	4b07      	ldr	r3, [pc, #28]	; (18018 <ISR_SysTick+0x2c>)
   17ffa:	681b      	ldr	r3, [r3, #0]
   17ffc:	9301      	str	r3, [sp, #4]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:125

	//Increment the tick count
	CSysTick::_clkTicks++;
   17ffe:	4907      	ldr	r1, [pc, #28]	; (1801c <ISR_SysTick+0x30>)
   18000:	e9d1 2300 	ldrd	r2, r3, [r1]
   18004:	3201      	adds	r2, #1
   18006:	f143 0300 	adc.w	r3, r3, #0
   1800a:	e9c1 2300 	strd	r2, r3, [r1]
C:/Users/s.morris/OculusHub/BpDevices_K60/src/systick.cpp:126
}
   1800e:	b003      	add	sp, #12
   18010:	f85d 0b04 	ldr.w	r0, [sp], #4
   18014:	4685      	mov	sp, r0
   18016:	4770      	bx	lr
   18018:	e000e010 	.word	0xe000e010
   1801c:	1fff0108 	.word	0x1fff0108

00018020 <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)>:
_ZN6CCrc164CalcEPhjjt():
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:43
@param[in]	length	The number of bytes to run through the checksum.
@param[in]	init	The inital value to start computing the CRC from (this may be a previous CRC operation)
@result				The computed CRC value.
*/
uint16 CCrc16::Calc(puint8 buf, uint32 offset, uint32 length, uint16 init)
{	
   18020:	b470      	push	{r4, r5, r6}
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:48
	uint32 ctr = 0;
	uint32 csum = init;
	uint32 tmp;	
	
	for(ctr = offset; ctr < (length + offset); ctr++) {
   18022:	460c      	mov	r4, r1
   18024:	440a      	add	r2, r1
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:54
		//tmp = *(buf + ctr) ^ ((uint8)csum);
		//csum >>= 8;
		//csum ^= CCrc16::_lut[tmp];
		tmp = *(buf + ctr) ^ (csum & 0xFF);
		csum >>= 8;
		csum ^= CCrc16::_lut[(uint8)tmp];
   18026:	4907      	ldr	r1, [pc, #28]	; (18044 <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)+0x24>)
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:48
{	
	uint32 ctr = 0;
	uint32 csum = init;
	uint32 tmp;	
	
	for(ctr = offset; ctr < (length + offset); ctr++) {
   18028:	e007      	b.n	1803a <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)+0x1a>
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:52 (discriminator 2)
		//tmp = *(buf + ctr) ^ ((uint8)csum);
		//csum >>= 8;
		//csum ^= CCrc16::_lut[tmp];
		tmp = *(buf + ctr) ^ (csum & 0xFF);
   1802a:	5d06      	ldrb	r6, [r0, r4]
   1802c:	b2dd      	uxtb	r5, r3
   1802e:	4075      	eors	r5, r6
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:54 (discriminator 2)
		csum >>= 8;
		csum ^= CCrc16::_lut[(uint8)tmp];
   18030:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   18034:	ea85 2313 	eor.w	r3, r5, r3, lsr #8
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:48 (discriminator 2)
{	
	uint32 ctr = 0;
	uint32 csum = init;
	uint32 tmp;	
	
	for(ctr = offset; ctr < (length + offset); ctr++) {
   18038:	3401      	adds	r4, #1
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:48 (discriminator 1)
   1803a:	42a2      	cmp	r2, r4
   1803c:	d8f5      	bhi.n	1802a <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)+0xa>
C:/Users/s.morris/OculusHub/BpClasses/src/crc16.cpp:57
		tmp = *(buf + ctr) ^ (csum & 0xFF);
		csum >>= 8;
		csum ^= CCrc16::_lut[(uint8)tmp];
	}
	return csum & 0xFFFFu;
}
   1803e:	b298      	uxth	r0, r3
   18040:	bc70      	pop	{r4, r5, r6}
   18042:	4770      	bx	lr
   18044:	1fff0110 	.word	0x1fff0110

00018048 <CFlashData::Erase()>:
_ZN10CFlashData5EraseEv():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:60
/*!-----------------------------------------------------------------------------
Function that erases all data in the storage area, and reset everything back
to defaults
*/
bool CFlashData::Erase()
{
   18048:	b508      	push	{r3, lr}
   1804a:	4603      	mov	r3, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:62
	//Reset internal params
	_readAddr = 0;
   1804c:	2200      	movs	r2, #0
   1804e:	60c2      	str	r2, [r0, #12]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:63
	_readLength = 0;
   18050:	8202      	strh	r2, [r0, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:66

	//Erase the flash sectors for storage
	EFlashReturn returnCode = _flash->FlashEraseSectors(_storeAddr, (_storeSize / FLASH_SECTOR_SIZE));
   18052:	6882      	ldr	r2, [r0, #8]
   18054:	6800      	ldr	r0, [r0, #0]
   18056:	6859      	ldr	r1, [r3, #4]
   18058:	f3c2 320f 	ubfx	r2, r2, #12, #16
   1805c:	f7ff fdb0 	bl	17bc0 <CFlash::FlashEraseSectors(unsigned int, unsigned short)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:68
	return (returnCode == FLASH_OK);
}
   18060:	f1d0 0001 	rsbs	r0, r0, #1
   18064:	bf38      	it	cc
   18066:	2000      	movcc	r0, #0
   18068:	bd08      	pop	{r3, pc}
   1806a:	bf00      	nop

0001806c <CFlashData::EraseCheck()>:
_ZN10CFlashData10EraseCheckEv():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:75
/*!-----------------------------------------------------------------------------
Function that determines if the data storage area is blank and ready for programming
@result True if the storage area read's as all 1's, ready for programming
*/
bool CFlashData::EraseCheck()
{
   1806c:	b508      	push	{r3, lr}
   1806e:	4603      	mov	r3, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:89
	}
	return true;
	*/

	//Perform a blank verify check on the storage area
	EFlashReturn returnCode = _flash->FlashVerifySectors(_storeAddr, (_storeSize / FLASH_SECTOR_SIZE), FLASH_MARGIN_NORMAL);
   18070:	6882      	ldr	r2, [r0, #8]
   18072:	6800      	ldr	r0, [r0, #0]
   18074:	6859      	ldr	r1, [r3, #4]
   18076:	f3c2 320f 	ubfx	r2, r2, #12, #16
   1807a:	2300      	movs	r3, #0
   1807c:	f7ff fe36 	bl	17cec <CFlash::FlashVerifySectors(unsigned int, unsigned short, EFlashReadMargin)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:91
	return (returnCode == FLASH_OK);
}
   18080:	f1d0 0001 	rsbs	r0, r0, #1
   18084:	bf38      	it	cc
   18086:	2000      	movcc	r0, #0
   18088:	bd08      	pop	{r3, pc}
   1808a:	bf00      	nop

0001808c <CFlashData::FindActiveRecord(unsigned int*)>:
_ZN10CFlashData16FindActiveRecordEPj():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:102
first Active data record in encounders.
@param[out] dataAddr Pointer to where the address of the active data (or free) record should be stored.
@result The address of the starting data record header for the active (or free) location
*/
EFlashDataReturn CFlashData::FindActiveRecord(puint32 dataAddr)
{
   1808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18090:	460f      	mov	r7, r1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:108
	uint32 addr, addrEnd;
	//puint32 state;
	PFlashDataHeader header;

	//Set the address to the start of storage
	addr = _storeAddr;
   18092:	6844      	ldr	r4, [r0, #4]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:109
	addrEnd = _storeAddr + _storeSize;
   18094:	6886      	ldr	r6, [r0, #8]
   18096:	4426      	add	r6, r4
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:112

	//Set the initial contents of the data address result to 0
	*dataAddr = 0;
   18098:	2300      	movs	r3, #0
   1809a:	600b      	str	r3, [r1, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:125
			//If the header indicates this data record is FREE (unprogrammed), then
			//we have no programmed data record, so return with the free address an error
			*dataAddr = addr;
			return FDATA_ERR_EMPTY;
		}
		else if(header->State == FDATA_STATE_ACTIVE) {
   1809c:	2000      	movs	r0, #0
   1809e:	f04f 31ff 	mov.w	r1, #4294967295
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:115

	//Set the initial contents of the data address result to 0
	*dataAddr = 0;

	//Start loop traversing memory
	while(addr < addrEnd) {
   180a2:	e026      	b.n	180f2 <CFlashData::FindActiveRecord(unsigned int*)+0x66>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:117
		//Setup a pointer to the current header struct being pointed at...
		header = (PFlashDataHeader)addr;
   180a4:	4625      	mov	r5, r4
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:119

		if(header->State == FDATA_STATE_FREE) {
   180a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   180aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   180ae:	bf08      	it	eq
   180b0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   180b4:	d103      	bne.n	180be <CFlashData::FindActiveRecord(unsigned int*)+0x32>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:122
			//If the header indicates this data record is FREE (unprogrammed), then
			//we have no programmed data record, so return with the free address an error
			*dataAddr = addr;
   180b6:	603c      	str	r4, [r7, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:123
			return FDATA_ERR_EMPTY;
   180b8:	2001      	movs	r0, #1
   180ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:125
		}
		else if(header->State == FDATA_STATE_ACTIVE) {
   180be:	428b      	cmp	r3, r1
   180c0:	bf08      	it	eq
   180c2:	4282      	cmpeq	r2, r0
   180c4:	d111      	bne.n	180ea <CFlashData::FindActiveRecord(unsigned int*)+0x5e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:128
			//If we have an active data block, then check that data lies within
			//the valid storage area
			uint32 dataStart = addr + sizeof(TFlashDataHeader);
   180c6:	f104 0010 	add.w	r0, r4, #16
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:129
			uint32 dataEnd = dataStart + header->Length;
   180ca:	89a2      	ldrh	r2, [r4, #12]
   180cc:	eb02 0800 	add.w	r8, r2, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:130
			uint16 csum = CCrc16::Calc((puint8)dataStart, 0, header->Length);
   180d0:	2100      	movs	r1, #0
   180d2:	460b      	mov	r3, r1
   180d4:	f7ff ffa4 	bl	18020 <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:132

			if(dataEnd >= addrEnd) {
   180d8:	45b0      	cmp	r8, r6
   180da:	d20f      	bcs.n	180fc <CFlashData::FindActiveRecord(unsigned int*)+0x70>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:136
				//Data lies outside the valid storage area, so return an error
				return FDATA_ERR_RANGE;
			}
			else if(csum != header->Checksum) {
   180dc:	89e3      	ldrh	r3, [r4, #14]
   180de:	4283      	cmp	r3, r0
   180e0:	d10f      	bne.n	18102 <CFlashData::FindActiveRecord(unsigned int*)+0x76>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:142
				//The stored checksum does not match the data, so fail
				return FDATA_ERR_CHECKSUM;
			}
			else {
				//Data is valid and lies within the allowed storage area so return the address
				*dataAddr = addr;
   180e2:	603c      	str	r4, [r7, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:143
				return FDATA_OK;
   180e4:	2000      	movs	r0, #0
   180e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:146
			}
		}
		else if(header->State == FDATA_STATE_IGNORE) {
   180ea:	ea52 0403 	orrs.w	r4, r2, r3
   180ee:	d10b      	bne.n	18108 <CFlashData::FindActiveRecord(unsigned int*)+0x7c>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:151
			//If the header indicates this is an old record, now obsoleted, and should
			//be ignored, then skip over it.
			//addr += sizeof(TFlashDataHeader);
			//addr += header->Length;
			addr = header->NextHeader;
   180f0:	68ac      	ldr	r4, [r5, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:115 (discriminator 1)

	//Set the initial contents of the data address result to 0
	*dataAddr = 0;

	//Start loop traversing memory
	while(addr < addrEnd) {
   180f2:	42b4      	cmp	r4, r6
   180f4:	d3d6      	bcc.n	180a4 <CFlashData::FindActiveRecord(unsigned int*)+0x18>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:160
			return FDATA_ERR_CORRUPT;
		}
	}

	//If we reach here, the current address lies outside allowed storage, so return an error
	return FDATA_ERR_RANGE;
   180f6:	2002      	movs	r0, #2
   180f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:134
			uint32 dataEnd = dataStart + header->Length;
			uint16 csum = CCrc16::Calc((puint8)dataStart, 0, header->Length);

			if(dataEnd >= addrEnd) {
				//Data lies outside the valid storage area, so return an error
				return FDATA_ERR_RANGE;
   180fc:	2002      	movs	r0, #2
   180fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:138
			}
			else if(csum != header->Checksum) {
				//The stored checksum does not match the data, so fail
				return FDATA_ERR_CHECKSUM;
   18102:	2004      	movs	r0, #4
   18104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:155
			//addr += header->Length;
			addr = header->NextHeader;
		}
		else {
			//If the header state is unknown, then we have corrupt data, so abort
			return FDATA_ERR_CORRUPT;
   18108:	2003      	movs	r0, #3
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:161
		}
	}

	//If we reach here, the current address lies outside allowed storage, so return an error
	return FDATA_ERR_RANGE;
}
   1810a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1810e:	bf00      	nop

00018110 <CFlashData::Read(void*, unsigned short)>:
_ZN10CFlashData4ReadEPvt():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:180
@param dest	Pointer to where the read data should be stored to.
@param maxLength Optional maximum number of bytes to copy, or 0 for all bytes
@result The number of bytes read, 0 indicates a fail
*/
uint16 CFlashData::Read(pointer destData, uint16 maxLength)
{
   18110:	b470      	push	{r4, r5, r6}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:185
	puint8 pSrc, pDest;
	uint16 length;
	uint16 cnt;

	pSrc = (puint8)_readAddr;
   18112:	68c4      	ldr	r4, [r0, #12]
   18114:	4625      	mov	r5, r4
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:188
	pDest = (puint8)destData;

	if((_readLength == 0) || (_readAddr == 0)) {
   18116:	8a03      	ldrh	r3, [r0, #16]
   18118:	b133      	cbz	r3, 18128 <CFlashData::Read(void*, unsigned short)+0x18>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:188 (discriminator 1)
   1811a:	b13c      	cbz	r4, 1812c <CFlashData::Read(void*, unsigned short)+0x1c>
   1811c:	e00c      	b.n	18138 <CFlashData::Read(void*, unsigned short)+0x28>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:191 (discriminator 2)
		//If max length isn't 0, then blank this number of bytes at the dest Data
		for(uint16 i = 0; i < maxLength; i++) {
			*pDest = 0;
   1811e:	f801 0b01 	strb.w	r0, [r1], #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:190 (discriminator 2)
	pSrc = (puint8)_readAddr;
	pDest = (puint8)destData;

	if((_readLength == 0) || (_readAddr == 0)) {
		//If max length isn't 0, then blank this number of bytes at the dest Data
		for(uint16 i = 0; i < maxLength; i++) {
   18122:	3301      	adds	r3, #1
   18124:	b29b      	uxth	r3, r3
   18126:	e003      	b.n	18130 <CFlashData::Read(void*, unsigned short)+0x20>
   18128:	2300      	movs	r3, #0
   1812a:	e000      	b.n	1812e <CFlashData::Read(void*, unsigned short)+0x1e>
   1812c:	2300      	movs	r3, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:191 (discriminator 1)
			*pDest = 0;
   1812e:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:190 (discriminator 1)
	pSrc = (puint8)_readAddr;
	pDest = (puint8)destData;

	if((_readLength == 0) || (_readAddr == 0)) {
		//If max length isn't 0, then blank this number of bytes at the dest Data
		for(uint16 i = 0; i < maxLength; i++) {
   18130:	4293      	cmp	r3, r2
   18132:	d3f4      	bcc.n	1811e <CFlashData::Read(void*, unsigned short)+0xe>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:196
			*pDest = 0;
			pDest++;
		}

		//Return fail if no data is available to read.
		return 0;
   18134:	2000      	movs	r0, #0
   18136:	e01a      	b.n	1816e <CFlashData::Read(void*, unsigned short)+0x5e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:200
	}
	else {
		//If auto is specified, set the number of bytes to read
		if(maxLength == 0)
   18138:	b902      	cbnz	r2, 1813c <CFlashData::Read(void*, unsigned short)+0x2c>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:201
			maxLength = _readLength;
   1813a:	461a      	mov	r2, r3
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:204

		//Check we're reading a valid number of bytes
		if(maxLength > _readLength)
   1813c:	429a      	cmp	r2, r3
   1813e:	d800      	bhi.n	18142 <CFlashData::Read(void*, unsigned short)+0x32>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:207
			length = _readLength;
		else
			length = maxLength;
   18140:	4613      	mov	r3, r2
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:211

		//Copy the data out
		cnt = 0;
		for(uint16 i = 0; i < length; i++) {
   18142:	2400      	movs	r4, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:210
			length = _readLength;
		else
			length = maxLength;

		//Copy the data out
		cnt = 0;
   18144:	4620      	mov	r0, r4
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:211
		for(uint16 i = 0; i < length; i++) {
   18146:	e007      	b.n	18158 <CFlashData::Read(void*, unsigned short)+0x48>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:212 (discriminator 2)
			*pDest = *pSrc;
   18148:	f815 6b01 	ldrb.w	r6, [r5], #1
   1814c:	f801 6b01 	strb.w	r6, [r1], #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:215 (discriminator 2)
			pDest++;
			pSrc++;
			cnt++;
   18150:	3001      	adds	r0, #1
   18152:	b280      	uxth	r0, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:211 (discriminator 2)
		else
			length = maxLength;

		//Copy the data out
		cnt = 0;
		for(uint16 i = 0; i < length; i++) {
   18154:	3401      	adds	r4, #1
   18156:	b2a4      	uxth	r4, r4
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:211 (discriminator 1)
   18158:	429c      	cmp	r4, r3
   1815a:	d3f5      	bcc.n	18148 <CFlashData::Read(void*, unsigned short)+0x38>
   1815c:	e004      	b.n	18168 <CFlashData::Read(void*, unsigned short)+0x58>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:221 (discriminator 2)
		}

		//If maxLength specified more bytes than are available, fill 0's
		//into the remaining destData bytes
		for(uint16 i = length; i < maxLength; i++) {
			*pDest = 0;
   1815e:	f801 4b01 	strb.w	r4, [r1], #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:220 (discriminator 2)
			cnt++;
		}

		//If maxLength specified more bytes than are available, fill 0's
		//into the remaining destData bytes
		for(uint16 i = length; i < maxLength; i++) {
   18162:	3301      	adds	r3, #1
   18164:	b29b      	uxth	r3, r3
   18166:	e000      	b.n	1816a <CFlashData::Read(void*, unsigned short)+0x5a>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:221 (discriminator 1)
			*pDest = 0;
   18168:	2400      	movs	r4, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:220 (discriminator 1)
			cnt++;
		}

		//If maxLength specified more bytes than are available, fill 0's
		//into the remaining destData bytes
		for(uint16 i = length; i < maxLength; i++) {
   1816a:	4293      	cmp	r3, r2
   1816c:	d3f7      	bcc.n	1815e <CFlashData::Read(void*, unsigned short)+0x4e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:228
		}

		//Return the number of copied bytes
		return cnt;
	}
}
   1816e:	bc70      	pop	{r4, r5, r6}
   18170:	4770      	bx	lr
   18172:	bf00      	nop

00018174 <CFlashData::ReadFind()>:
_ZN10CFlashData8ReadFindEv():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:237
memory that can be read.
This procedure traverses the data storage area like a Linked list, looking for the
first Active data record in encounters, then sets up the classes read pointers.
*/
EFlashDataReturn CFlashData::ReadFind()
{
   18174:	b510      	push	{r4, lr}
   18176:	b082      	sub	sp, #8
   18178:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:243
	uint32 dataAddr;
	PFlashDataHeader header;
	EFlashDataReturn returnCode;

	//Attempt to find the active data record within the flash storage area
	returnCode = this->FindActiveRecord(&dataAddr);
   1817a:	a901      	add	r1, sp, #4
   1817c:	f7ff ff86 	bl	1808c <CFlashData::FindActiveRecord(unsigned int*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:245

	if(returnCode == FDATA_OK) {
   18180:	4603      	mov	r3, r0
   18182:	b930      	cbnz	r0, 18192 <CFlashData::ReadFind()+0x1e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:247
		//We have an active record, so setup pointers
		header = (PFlashDataHeader)dataAddr;
   18184:	9a01      	ldr	r2, [sp, #4]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:248
		_readAddr = dataAddr + sizeof(TFlashDataHeader);
   18186:	f102 0110 	add.w	r1, r2, #16
   1818a:	60e1      	str	r1, [r4, #12]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:249
		_readLength = header->Length;
   1818c:	8992      	ldrh	r2, [r2, #12]
   1818e:	8222      	strh	r2, [r4, #16]
   18190:	e002      	b.n	18198 <CFlashData::ReadFind()+0x24>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:253
	}
	else {
		//Indicate we have no valid data record
		_readAddr = 0;
   18192:	2200      	movs	r2, #0
   18194:	60e2      	str	r2, [r4, #12]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:254
		_readLength = 0;
   18196:	8222      	strh	r2, [r4, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:259
	}

	//Return the status code
	return returnCode;
}
   18198:	4618      	mov	r0, r3
   1819a:	b002      	add	sp, #8
   1819c:	bd10      	pop	{r4, pc}
   1819e:	bf00      	nop

000181a0 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)>:
_ZN10CFlashDataC2EP6CFlashjj():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:14
Constructor
@param flash		Pointer to the flash manager object
@param storeAddr	The flash memory address where data storage is allowed. This will be rounded down to the nearest sector address
@param storeSize	The number of bytes allocated for data storage (this will be rounded up to the nearest sector size)
*/
CFlashData::CFlashData(PFlash flash, uint32 storeAddr, uint32 storeSize)
   181a0:	b510      	push	{r4, lr}
   181a2:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:17
{
	//Store the storage details
	_flash = flash;
   181a4:	6001      	str	r1, [r0, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:22
	_storeAddr = storeAddr;
	_storeSize = storeSize;

	//Ensure we have a sector address, by masking the lower address bits to zero
	CLR_BITS(_storeAddr, (FLASH_SECTOR_SIZE - 1));
   181a6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   181aa:	f022 020f 	bic.w	r2, r2, #15
   181ae:	6042      	str	r2, [r0, #4]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:26

	//Ensure storage size if a multiple of sector length, but round up to the
	//nearest sector.
	CLR_BITS(_storeSize, (FLASH_SECTOR_SIZE - 1));
   181b0:	f423 627f 	bic.w	r2, r3, #4080	; 0xff0
   181b4:	f022 020f 	bic.w	r2, r2, #15
   181b8:	6082      	str	r2, [r0, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:27
	if((storeSize % FLASH_SECTOR_SIZE) > 0)
   181ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
   181be:	b113      	cbz	r3, 181c6 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)+0x26>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:28
		_storeSize += FLASH_SECTOR_SIZE;
   181c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   181c4:	6082      	str	r2, [r0, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:29
	if(_storeSize == 0)
   181c6:	68a3      	ldr	r3, [r4, #8]
   181c8:	b913      	cbnz	r3, 181d0 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)+0x30>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:30
		_storeSize = FLASH_SECTOR_SIZE;
   181ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   181ce:	60a3      	str	r3, [r4, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:33

	//Find if we have valid data stored, ready for reading
	EFlashDataReturn returnCode = this->ReadFind();
   181d0:	4620      	mov	r0, r4
   181d2:	f7ff ffcf 	bl	18174 <CFlashData::ReadFind()>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:37

	//If we have no valid read data record, then check to see if the data storage
	//area is fully erased.
	if(returnCode != FDATA_OK) {
   181d6:	b130      	cbz	r0, 181e6 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)+0x46>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:39
		//Check if the storage area is blank
		bool blank = this->EraseCheck();
   181d8:	4620      	mov	r0, r4
   181da:	f7ff ff47 	bl	1806c <CFlashData::EraseCheck()>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:41

		if(!blank) {
   181de:	b910      	cbnz	r0, 181e6 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)+0x46>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:43
			//If not fully erased, then erase it now so its ready and formatted for new writes.
			this->Erase();
   181e0:	4620      	mov	r0, r4
   181e2:	f7ff ff31 	bl	18048 <CFlashData::Erase()>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:46
		}
	}
}
   181e6:	4620      	mov	r0, r4
   181e8:	bd10      	pop	{r4, pc}
   181ea:	bf00      	nop

000181ec <CFlashData::Write(void*, unsigned short)>:
_ZN10CFlashData5WriteEPvt():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:270
If the data storage area becomes full, it is erased, and the new record written
at its start.
This function uses a state machine to control the operations.
*/
bool CFlashData::Write(pointer srcData, uint16 length)
{
   181ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f0:	b08d      	sub	sp, #52	; 0x34
   181f2:	4606      	mov	r6, r0
   181f4:	4689      	mov	r9, r1
   181f6:	4614      	mov	r4, r2
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:272
	//Initialise variables.
	uint32 writeAddr = 0;
   181f8:	2300      	movs	r3, #0
   181fa:	9307      	str	r3, [sp, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:279
	EFlashDataWrState writeState = WR_FIND_ACTIVE;
	bool writeSuccess = false;
	uint8 eraseCnt = 0;

	//Abort if the write length exceeds the storage size
	if((length + sizeof(TFlashDataHeader)) > _storeSize) {
   181fc:	4690      	mov	r8, r2
   181fe:	3210      	adds	r2, #16
   18200:	6883      	ldr	r3, [r0, #8]
   18202:	429a      	cmp	r2, r3
   18204:	f200 80ce 	bhi.w	183a4 <CFlashData::Write(void*, unsigned short)+0x1b8>
   18208:	2200      	movs	r2, #0
   1820a:	9203      	str	r2, [sp, #12]
   1820c:	4692      	mov	sl, r2
   1820e:	4613      	mov	r3, r2
   18210:	2501      	movs	r5, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:417
					//Store a range error, so the code below fails, and causes an erase cycle
					flashCode = FLASH_ERR_RANGE;
				}
				else {
					//Compute the record block length (length rounded up to the nearest 8 bytes)
					blockLength = length & ~(0x7);	//Mask the lower 3 bits to 0
   18212:	f024 0207 	bic.w	r2, r4, #7
   18216:	b292      	uxth	r2, r2
   18218:	9204      	str	r2, [sp, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:419
					if((length % 8) > 0)
						blockLength += 8;
   1821a:	3208      	adds	r2, #8
   1821c:	9205      	str	r2, [sp, #20]
   1821e:	e0bc      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:285
		return false;
	}

	//Build a state machine to perform the write
	while(writeStateEn) {
		switch(writeState) {
   18220:	2b05      	cmp	r3, #5
   18222:	f200 80ac 	bhi.w	1837e <CFlashData::Write(void*, unsigned short)+0x192>
   18226:	e8df f003 	tbb	[pc, r3]
   1822a:	0f03      	.short	0x0f03
   1822c:	b7675022 	.word	0xb7675022
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:288
			case WR_FIND_ACTIVE : {
				//Traverse the flash storage area to find any current active record
				EFlashDataReturn returnCode = this->FindActiveRecord(&writeAddr);
   18230:	4630      	mov	r0, r6
   18232:	a907      	add	r1, sp, #28
   18234:	f7ff ff2a 	bl	1808c <CFlashData::FindActiveRecord(unsigned int*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:290

				if(returnCode == FDATA_OK) {
   18238:	2800      	cmp	r0, #0
   1823a:	f000 80a2 	beq.w	18382 <CFlashData::Write(void*, unsigned short)+0x196>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:294
					//If we have an active record, then determine if it needs modification
					writeState = WR_MODIFY;
				}
				else if(returnCode == FDATA_ERR_EMPTY) {
   1823e:	2801      	cmp	r0, #1
   18240:	f040 80a1 	bne.w	18386 <CFlashData::Write(void*, unsigned short)+0x19a>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:296
					//If we have an un-programmed area, then just write into it
					writeState = WR_WRITE;
   18244:	2304      	movs	r3, #4
   18246:	e0a8      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:310
			case WR_ERASE : {
				//In this state, erase the flash storage
				bool success;

				//If we've not exceed the erase limit, then erase
				if(eraseCnt < 5) {
   18248:	9b03      	ldr	r3, [sp, #12]
   1824a:	2b04      	cmp	r3, #4
   1824c:	d807      	bhi.n	1825e <CFlashData::Write(void*, unsigned short)+0x72>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:311
					success = this->Erase();
   1824e:	4630      	mov	r0, r6
   18250:	f7ff fefa 	bl	18048 <CFlashData::Erase()>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:312
					eraseCnt++;
   18254:	9a03      	ldr	r2, [sp, #12]
   18256:	1c53      	adds	r3, r2, #1
   18258:	b2db      	uxtb	r3, r3
   1825a:	9303      	str	r3, [sp, #12]
   1825c:	e000      	b.n	18260 <CFlashData::Write(void*, unsigned short)+0x74>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:315
				}
				else
					success = false;
   1825e:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:317

				if(success) {
   18260:	2800      	cmp	r0, #0
   18262:	f000 8092 	beq.w	1838a <CFlashData::Write(void*, unsigned short)+0x19e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:320
					//If data was erased, then write the data to the start of storage
					//Reset writeAddr to the start of storage
					writeAddr = _storeAddr;
   18266:	6873      	ldr	r3, [r6, #4]
   18268:	9307      	str	r3, [sp, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:321
					writeState = WR_WRITE;
   1826a:	2304      	movs	r3, #4
   1826c:	e095      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:341
				PFlashDataHeader header;
				uint16 csum;
				puint8 psrc, pflash;

				//Get a pointer to the header structure
				header = (PFlashDataHeader)writeAddr;
   1826e:	9f07      	ldr	r7, [sp, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:344

				//Check the lengths match
				match = (length == header->Length);
   18270:	f8b7 b00c 	ldrh.w	fp, [r7, #12]
   18274:	45a3      	cmp	fp, r4
   18276:	bf14      	ite	ne
   18278:	f04f 0b00 	movne.w	fp, #0
   1827c:	f04f 0b01 	moveq.w	fp, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:347

				//Check the checksums match
				csum = CCrc16::Calc((puint8)srcData, 0, length);
   18280:	4648      	mov	r0, r9
   18282:	2100      	movs	r1, #0
   18284:	4642      	mov	r2, r8
   18286:	460b      	mov	r3, r1
   18288:	f7ff feca 	bl	18020 <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:348
				match &= (csum == header->Checksum);
   1828c:	89fb      	ldrh	r3, [r7, #14]
   1828e:	4283      	cmp	r3, r0
   18290:	bf14      	ite	ne
   18292:	2000      	movne	r0, #0
   18294:	f00b 0001 	andeq.w	r0, fp, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:352

				//Check the contents match
				psrc = (puint8)srcData;
				pflash = (puint8)(writeAddr + sizeof(TFlashDataHeader));
   18298:	9907      	ldr	r1, [sp, #28]
   1829a:	3110      	adds	r1, #16
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:351
				//Check the checksums match
				csum = CCrc16::Calc((puint8)srcData, 0, length);
				match &= (csum == header->Checksum);

				//Check the contents match
				psrc = (puint8)srcData;
   1829c:	464a      	mov	r2, r9
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:353
				pflash = (puint8)(writeAddr + sizeof(TFlashDataHeader));
				for(uint16 i = 0; i < length; i++) {
   1829e:	2300      	movs	r3, #0
   182a0:	e00a      	b.n	182b8 <CFlashData::Write(void*, unsigned short)+0xcc>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:354 (discriminator 2)
					match &= (*psrc == *pflash);
   182a2:	f812 cb01 	ldrb.w	ip, [r2], #1
   182a6:	f811 7b01 	ldrb.w	r7, [r1], #1
   182aa:	45bc      	cmp	ip, r7
   182ac:	bf14      	ite	ne
   182ae:	2000      	movne	r0, #0
   182b0:	f000 0001 	andeq.w	r0, r0, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:353 (discriminator 2)
				match &= (csum == header->Checksum);

				//Check the contents match
				psrc = (puint8)srcData;
				pflash = (puint8)(writeAddr + sizeof(TFlashDataHeader));
				for(uint16 i = 0; i < length; i++) {
   182b4:	3301      	adds	r3, #1
   182b6:	b29b      	uxth	r3, r3
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:353 (discriminator 1)
   182b8:	42a3      	cmp	r3, r4
   182ba:	d3f2      	bcc.n	182a2 <CFlashData::Write(void*, unsigned short)+0xb6>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:359
					match &= (*psrc == *pflash);
					psrc++;
					pflash++;
				}

				if(match) {
   182bc:	2800      	cmp	r0, #0
   182be:	d069      	beq.n	18394 <CFlashData::Write(void*, unsigned short)+0x1a8>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:363
					//Settings are the same, so don't change them.
					//Exit with success
					writeStateEn = false;	//Prevent further FSM execution
					writeSuccess = true;	//Set return code for success.
   182c0:	f04f 0a01 	mov.w	sl, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:364
					writeState = WR_DONE;
   182c4:	2305      	movs	r3, #5
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:362
				}

				if(match) {
					//Settings are the same, so don't change them.
					//Exit with success
					writeStateEn = false;	//Prevent further FSM execution
   182c6:	2500      	movs	r5, #0
   182c8:	e067      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:380
				//We have a current active record that's now obsolete, so mark it as invalid
				EFlashReturn flashCode;
				TFlashDataHeader header;

				//Read the current header from the writeAddr - this must be 8-byte aligned
				header = *((PFlashDataHeader)writeAddr);
   182ca:	f8dd e01c 	ldr.w	lr, [sp, #28]
   182ce:	af08      	add	r7, sp, #32
   182d0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   182d4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:381
				header.State = FDATA_STATE_IGNORE;
   182d8:	2000      	movs	r0, #0
   182da:	2100      	movs	r1, #0
   182dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:384

				//Over program the first phrase (8-bytes) with the INVALID code
				flashCode = _flash->FlashProgramPhrase(writeAddr, (puint8)&header);
   182e0:	6830      	ldr	r0, [r6, #0]
   182e2:	4671      	mov	r1, lr
   182e4:	463a      	mov	r2, r7
   182e6:	f7ff fc71 	bl	17bcc <CFlash::FlashProgramPhrase(unsigned int, unsigned char*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:386

				if(flashCode == FLASH_OK) {
   182ea:	b918      	cbnz	r0, 182f4 <CFlashData::Write(void*, unsigned short)+0x108>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:390
					//If the record was marked as invalid, then proceed to program the new record
					//Move the write pointer to the new location
					//writeAddr += (sizeof(TFlashDataHeader) + header.Length);
					writeAddr = header.NextHeader;
   182ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   182ee:	9307      	str	r3, [sp, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:391
					writeState = WR_WRITE;
   182f0:	2304      	movs	r3, #4
   182f2:	e052      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:396
				}
				else {
					//If over-programming failed, then we've no choice but to erase
					//the flash storage, and try again.
					writeState = WR_ERASE;
   182f4:	2301      	movs	r3, #1
   182f6:	e050      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:410
				TFlashDataHeader header;
				uint16 blockLength;
				uint32 writeAddrEnd;

				//If write exceeds storage length, then erase and start again
				writeAddrEnd = writeAddr + sizeof(TFlashDataHeader) + length;
   182f8:	9907      	ldr	r1, [sp, #28]
   182fa:	eb08 0001 	add.w	r0, r8, r1
   182fe:	3010      	adds	r0, #16
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:411
				if(writeAddrEnd >= (_storeAddr + _storeSize)) {
   18300:	6872      	ldr	r2, [r6, #4]
   18302:	68b3      	ldr	r3, [r6, #8]
   18304:	4413      	add	r3, r2
   18306:	4283      	cmp	r3, r0
   18308:	d92d      	bls.n	18366 <CFlashData::Write(void*, unsigned short)+0x17a>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:417
					//Store a range error, so the code below fails, and causes an erase cycle
					flashCode = FLASH_ERR_RANGE;
				}
				else {
					//Compute the record block length (length rounded up to the nearest 8 bytes)
					blockLength = length & ~(0x7);	//Mask the lower 3 bits to 0
   1830a:	9804      	ldr	r0, [sp, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:418
					if((length % 8) > 0)
   1830c:	f014 0f07 	tst.w	r4, #7
   18310:	d001      	beq.n	18316 <CFlashData::Write(void*, unsigned short)+0x12a>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:419
						blockLength += 8;
   18312:	9b05      	ldr	r3, [sp, #20]
   18314:	b298      	uxth	r0, r3
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:422

					//Make up a new header
					header.State = FDATA_STATE_ACTIVE;
   18316:	2200      	movs	r2, #0
   18318:	f04f 33ff 	mov.w	r3, #4294967295
   1831c:	e9cd 2308 	strd	r2, r3, [sp, #32]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:423
					header.NextHeader = writeAddr + sizeof(TFlashDataHeader) + blockLength;
   18320:	4401      	add	r1, r0
   18322:	3110      	adds	r1, #16
   18324:	910a      	str	r1, [sp, #40]	; 0x28
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:424
					header.Length = length;
   18326:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:425
					header.Checksum = CCrc16::Calc((puint8)srcData, 0, length);
   1832a:	4648      	mov	r0, r9
   1832c:	2100      	movs	r1, #0
   1832e:	4642      	mov	r2, r8
   18330:	460b      	mov	r3, r1
   18332:	f7ff fe75 	bl	18020 <CCrc16::Calc(unsigned char*, unsigned int, unsigned int, unsigned short)>
   18336:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:428

					//Program the header
					flashCode = _flash->FlashProgram(writeAddr, (puint8)&header, sizeof(TFlashDataHeader), NULL);
   1833a:	6830      	ldr	r0, [r6, #0]
   1833c:	2300      	movs	r3, #0
   1833e:	9300      	str	r3, [sp, #0]
   18340:	9907      	ldr	r1, [sp, #28]
   18342:	aa08      	add	r2, sp, #32
   18344:	2310      	movs	r3, #16
   18346:	f7ff fc83 	bl	17c50 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:430

					if(flashCode == FLASH_OK) {
   1834a:	4603      	mov	r3, r0
   1834c:	b960      	cbnz	r0, 18368 <CFlashData::Write(void*, unsigned short)+0x17c>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:432
						//Header programming ok, so program data
						writeAddr += sizeof(TFlashDataHeader);
   1834e:	9907      	ldr	r1, [sp, #28]
   18350:	3110      	adds	r1, #16
   18352:	9107      	str	r1, [sp, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:433
						flashCode = _flash->FlashProgram(writeAddr, (puint8)srcData, length, NULL);
   18354:	6830      	ldr	r0, [r6, #0]
   18356:	2300      	movs	r3, #0
   18358:	9300      	str	r3, [sp, #0]
   1835a:	464a      	mov	r2, r9
   1835c:	4643      	mov	r3, r8
   1835e:	f7ff fc77 	bl	17c50 <CFlash::FlashProgram(unsigned int, unsigned char*, unsigned int, unsigned int*)>
   18362:	4603      	mov	r3, r0
   18364:	e000      	b.n	18368 <CFlashData::Write(void*, unsigned short)+0x17c>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:413

				//If write exceeds storage length, then erase and start again
				writeAddrEnd = writeAddr + sizeof(TFlashDataHeader) + length;
				if(writeAddrEnd >= (_storeAddr + _storeSize)) {
					//Store a range error, so the code below fails, and causes an erase cycle
					flashCode = FLASH_ERR_RANGE;
   18366:	2303      	movs	r3, #3
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:437
						writeAddr += sizeof(TFlashDataHeader);
						flashCode = _flash->FlashProgram(writeAddr, (puint8)srcData, length, NULL);
					}
				}

				if(flashCode == FLASH_OK) {
   18368:	b93b      	cbnz	r3, 1837a <CFlashData::Write(void*, unsigned short)+0x18e>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:439
					//If data programmed OK, then setup the read pointers to the new data
					_readAddr = writeAddr;
   1836a:	9b07      	ldr	r3, [sp, #28]
   1836c:	60f3      	str	r3, [r6, #12]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:440
					_readLength = length;
   1836e:	8234      	strh	r4, [r6, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:444

					//Exit with success
					writeStateEn = false;	//Prevent further FSM execution
					writeSuccess = true;	//Set return code for success.
   18370:	f04f 0a01 	mov.w	sl, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:445
					writeState = WR_DONE;
   18374:	2305      	movs	r3, #5
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:443
					//If data programmed OK, then setup the read pointers to the new data
					_readAddr = writeAddr;
					_readLength = length;

					//Exit with success
					writeStateEn = false;	//Prevent further FSM execution
   18376:	2500      	movs	r5, #0
   18378:	e00f      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:449
					writeSuccess = true;	//Set return code for success.
					writeState = WR_DONE;
				}
				else {
					//If header programming fails, then erase flash and try again
					writeState = WR_ERASE;
   1837a:	2301      	movs	r3, #1
   1837c:	e00d      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:463
				break;
			}

			default : {
				//For error conditions, start the process.
				writeState = WR_FIND_ACTIVE;
   1837e:	2300      	movs	r3, #0
   18380:	e00b      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:292
				//Traverse the flash storage area to find any current active record
				EFlashDataReturn returnCode = this->FindActiveRecord(&writeAddr);

				if(returnCode == FDATA_OK) {
					//If we have an active record, then determine if it needs modification
					writeState = WR_MODIFY;
   18382:	2302      	movs	r3, #2
   18384:	e009      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:300
					//If we have an un-programmed area, then just write into it
					writeState = WR_WRITE;
				}
				else {
					//For all other errors, we should erase the flash and try again
					writeState = WR_ERASE;
   18386:	2301      	movs	r3, #1
   18388:	e007      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:326
					writeState = WR_WRITE;
				}
				else {
					//If erase failed (or attempt limit exceeded), then we're screwed and can't write data, so abort with failure
					writeStateEn = false;	//Prevent further FSM execution
					writeSuccess = false;	//Set return code for failure.
   1838a:	f04f 0a00 	mov.w	sl, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:327
					writeState = WR_DONE;
   1838e:	2305      	movs	r3, #5
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:325
					writeAddr = _storeAddr;
					writeState = WR_WRITE;
				}
				else {
					//If erase failed (or attempt limit exceeded), then we're screwed and can't write data, so abort with failure
					writeStateEn = false;	//Prevent further FSM execution
   18390:	4655      	mov	r5, sl
   18392:	e002      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:368
					writeSuccess = true;	//Set return code for success.
					writeState = WR_DONE;
				}
				else {
					//Settings are different, so start the update procedure
					writeState = WR_INVALIDATE;
   18394:	2303      	movs	r3, #3
   18396:	e000      	b.n	1839a <CFlashData::Write(void*, unsigned short)+0x1ae>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:457
				break;
			}

			case WR_DONE : {
				//This should never run, but is a catch state for the done condition.
				writeStateEn = false;	//Prevent further FSM execution
   18398:	2500      	movs	r5, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:284 (discriminator 1)
	if((length + sizeof(TFlashDataHeader)) > _storeSize) {
		return false;
	}

	//Build a state machine to perform the write
	while(writeStateEn) {
   1839a:	2d00      	cmp	r5, #0
   1839c:	f47f af40 	bne.w	18220 <CFlashData::Write(void*, unsigned short)+0x34>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:470
			}
		}
	}

	//Return the success code
	return writeSuccess;
   183a0:	4650      	mov	r0, sl
   183a2:	e000      	b.n	183a6 <CFlashData::Write(void*, unsigned short)+0x1ba>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:280
	bool writeSuccess = false;
	uint8 eraseCnt = 0;

	//Abort if the write length exceeds the storage size
	if((length + sizeof(TFlashDataHeader)) > _storeSize) {
		return false;
   183a4:	2000      	movs	r0, #0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_data.cpp:471
		}
	}

	//Return the success code
	return writeSuccess;
}
   183a6:	b00d      	add	sp, #52	; 0x34
   183a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000183ac <CFlashProg::ProgReset()>:
_ZN10CFlashProg9ProgResetEv():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:204
Function that resets the programming state
*/
void CFlashProg::ProgReset()
{
	//Reset programming vairables to default values.
	_update.Update = false;
   183ac:	2300      	movs	r3, #0
   183ae:	7303      	strb	r3, [r0, #12]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:205
	_update.SrcAddr = 0;
   183b0:	6103      	str	r3, [r0, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:206
	_update.SrcLength = 0;
   183b2:	6143      	str	r3, [r0, #20]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:207
	_update.SrcChecksum = 0;
   183b4:	6183      	str	r3, [r0, #24]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:208
	_update.DestSection = 0;
   183b6:	7703      	strb	r3, [r0, #28]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:209
	_update.DestAddr = 0;
   183b8:	6203      	str	r3, [r0, #32]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:210
	_update.DestSize = 0;
   183ba:	6243      	str	r3, [r0, #36]	; 0x24
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:212

	_scratchAddr = 0;
   183bc:	62c3      	str	r3, [r0, #44]	; 0x2c
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:213
	_scratchLength = 0;
   183be:	6303      	str	r3, [r0, #48]	; 0x30
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:214
	_scratchChecksum = 0;
   183c0:	6343      	str	r3, [r0, #52]	; 0x34
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:216

	_blockCnt = 0;
   183c2:	8103      	strh	r3, [r0, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:217
	_blockFormat = FPROG_DATA_BINARY;
   183c4:	7283      	strb	r3, [r0, #10]
   183c6:	4770      	bx	lr

000183c8 <CFlashProg::CFlashProg(CFlash*, unsigned int, unsigned int)>:
_ZN10CFlashProgC2EP6CFlashjj():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:14
@param flash		Pointer to the flash driver to use to access memory
@param cmdProc		Pointer to the command processor object to receive and send commands through
@param infoStart	Flash block start address when the ProgramInfo non-voltaile data should be stored
@param infoSize		Size of memory area where ProgramInfo non-volatile data should be store (in multiplies of 4kb block lengths)
*/
CFlashProg::CFlashProg(PFlash flash, uint32 infoStart, uint32 infoSize)
   183c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183cc:	4604      	mov	r4, r0
   183ce:	4690      	mov	r8, r2
   183d0:	461f      	mov	r7, r3
CCallback1():
C:\Users\s.morris\OculusHub\BpClasses\headers/callback.hpp:221
		typedef CDelegate1<ReturnT, Param1T>* PDelegate;
		PDelegate _delegate;
		
	public :
		//Constructor
		CCallback1() { _delegate = NULL; }
   183d2:	2500      	movs	r5, #0
   183d4:	6385      	str	r5, [r0, #56]	; 0x38
_ZN10CFlashProgC2EP6CFlashjj():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:17
{
	//Initialise device access pointers
	_flash = flash;		//CPlatform::DevFlash;
   183d6:	6001      	str	r1, [r0, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:20

	//Initialise the non-volatile Program Information storage
	_info = new CFlashData(_flash, infoStart, infoSize);
   183d8:	2014      	movs	r0, #20
   183da:	f000 f905 	bl	185e8 <operator new(unsigned int)>
   183de:	4606      	mov	r6, r0
   183e0:	6821      	ldr	r1, [r4, #0]
   183e2:	4642      	mov	r2, r8
   183e4:	463b      	mov	r3, r7
   183e6:	f7ff fedb 	bl	181a0 <CFlashData::CFlashData(CFlash*, unsigned int, unsigned int)>
   183ea:	6066      	str	r6, [r4, #4]
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:23

	//Initially indicate we have no hardware information available
	_hardware = NULL;
   183ec:	62a5      	str	r5, [r4, #40]	; 0x28
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:26

	//Initialise flash programming variables
	this->ProgReset();
   183ee:	4620      	mov	r0, r4
   183f0:	f7ff ffdc 	bl	183ac <CFlashProg::ProgReset()>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:27
}
   183f4:	4620      	mov	r0, r4
   183f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   183fa:	bf00      	nop

000183fc <CFlashProg::SetHardwareInfo(TFlashProgHardwareInfo*)>:
_ZN10CFlashProg15SetHardwareInfoEP22TFlashProgHardwareInfo():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:459
Function that sets the pointer to the hardware information to use when validating
weather to accept firmware.
*/
void CFlashProg::SetHardwareInfo(PFlashProgHardwareInfo value)
{
	_hardware = value;
   183fc:	6281      	str	r1, [r0, #40]	; 0x28
   183fe:	4770      	bx	lr

00018400 <int CFlashData::ReadType<TFlashProgInfo>(TFlashProgInfo*)>:
_ZN10CFlashData8ReadTypeI14TFlashProgInfoEEiPT_():
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:129
is returned. Otherwise, the number of bytes read is returned.
@param	destData Pointer to the type where read data should be stored
@result The return code, or +ve number of bytes copied, or -ve number of bytes that couldn't fit.
*/
template <typename T>
int32 CFlashData::ReadType(T* destData)
   18400:	b510      	push	{r4, lr}
   18402:	4604      	mov	r4, r0
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:132
{
	//Read out data and ensure it fits in the specified type
	uint16 readBytes = this->Read((pointer)destData, sizeof(T));
   18404:	2234      	movs	r2, #52	; 0x34
   18406:	f7ff fe83 	bl	18110 <CFlashData::Read(void*, unsigned short)>
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:136

	//If the read type is smaller than available data, then return -1 to indicate
	//returned data, but size doesn't match.
	if(_readLength > sizeof(T)) {
   1840a:	8a23      	ldrh	r3, [r4, #16]
   1840c:	2b34      	cmp	r3, #52	; 0x34
   1840e:	d901      	bls.n	18414 <int CFlashData::ReadType<TFlashProgInfo>(TFlashProgInfo*)+0x14>
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:138
		//Return a negative value for number of bytes extra available that wern't stored in struct
		return (sizeof(T) - _readLength);
   18410:	f1c3 0034 	rsb	r0, r3, #52	; 0x34
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:144
	}
	else {
		//Return the number of bytes read
		return readBytes;
	}
}
   18414:	bd10      	pop	{r4, pc}
   18416:	bf00      	nop

00018418 <CFlashProg::ReadInfo(TFlashProgInfo*)>:
_ZN10CFlashProg8ReadInfoEP14TFlashProgInfo():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:448
Function that reads the device programming information from non-volatile memory
@param info	Pointer to where the read information should be stored
@result True if the information was read (and fitted the struct) otherwise false.
*/
bool CFlashProg::ReadInfo(PFlashProgInfo info)
{
   18418:	b508      	push	{r3, lr}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:449
	int32 bytes = _info->ReadType(info);
   1841a:	6840      	ldr	r0, [r0, #4]
   1841c:	f7ff fff0 	bl	18400 <int CFlashData::ReadType<TFlashProgInfo>(TFlashProgInfo*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:451
	return (bytes == sizeof(TFlashProgInfo));
}
   18420:	2834      	cmp	r0, #52	; 0x34
   18422:	bf14      	ite	ne
   18424:	2000      	movne	r0, #0
   18426:	2001      	moveq	r0, #1
   18428:	bd08      	pop	{r3, pc}
   1842a:	bf00      	nop

0001842c <bool CFlashData::WriteType<TFlashProgInfo>(TFlashProgInfo*)>:
_ZN10CFlashData9WriteTypeI14TFlashProgInfoEEbPT_():
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:151
/*!-----------------------------------------------------------------------------
Function that writes the specified type into the settings memory
@return True if the write occurred successfully, false if it failed.
*/
template <typename T>
bool CFlashData::WriteType(T* srcData)
   1842c:	b508      	push	{r3, lr}
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:153
{
	return this->Write((pointer)srcData, sizeof(T));
   1842e:	2234      	movs	r2, #52	; 0x34
   18430:	f7ff fedc 	bl	181ec <CFlashData::Write(void*, unsigned short)>
C:\Users\s.morris\OculusHub\BpApplication\headers/flash_data.hpp:154
}
   18434:	bd08      	pop	{r3, pc}
   18436:	bf00      	nop

00018438 <CFlashProg::WriteInfo(TFlashProgInfo*)>:
_ZN10CFlashProg9WriteInfoEP14TFlashProgInfo():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:468
Function that write new device programming information to non-volatile memory
@param info	Pointer to where the read information should be programmed from
@result True if the data was written successfully.
*/
bool CFlashProg::WriteInfo(PFlashProgInfo info)
{
   18438:	b508      	push	{r3, lr}
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:469
	return _info->WriteType(info);
   1843a:	6840      	ldr	r0, [r0, #4]
   1843c:	f7ff fff6 	bl	1842c <bool CFlashData::WriteType<TFlashProgInfo>(TFlashProgInfo*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:470
}
   18440:	bd08      	pop	{r3, pc}
   18442:	bf00      	nop

00018444 <CFlashProg::UpdateFirmwareInfo()>:
_ZN10CFlashProg18UpdateFirmwareInfoEv():
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:640
information stored is correct and up to date. If not, the new values are written
into non-volatile memory.
@result True if the firmware is correct, or was written correctly.
*/
bool CFlashProg::UpdateFirmwareInfo()
{
   18444:	b510      	push	{r4, lr}
   18446:	b08e      	sub	sp, #56	; 0x38
   18448:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:645
	TFlashProgInfo info;
	bool success;

	//Read the device program status information from Flash
	success = this->ReadInfo(&info);
   1844a:	a901      	add	r1, sp, #4
   1844c:	f7ff ffe4 	bl	18418 <CFlashProg::ReadInfo(TFlashProgInfo*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:649

	//Determine if we need to change any of the values
	bool change = false;
	change |= (info.Firmware[FIRMWARE_SECTION].Valid == false);
   18450:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   18454:	f082 0201 	eor.w	r2, r2, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:650
	change |= (info.Firmware[FIRMWARE_SECTION].PartNumber != FIRMWARE_PARTNUMBER);
   18458:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
   1845c:	f240 43cb 	movw	r3, #1227	; 0x4cb
   18460:	4299      	cmp	r1, r3
   18462:	bf0c      	ite	eq
   18464:	4613      	moveq	r3, r2
   18466:	f042 0301 	orrne.w	r3, r2, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:651
	change |= (info.Firmware[FIRMWARE_SECTION].VersionMaj != FIRMWARE_VERSION_MAJOR);
   1846a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1846e:	2a01      	cmp	r2, #1
   18470:	bf18      	it	ne
   18472:	f043 0301 	orrne.w	r3, r3, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:652
	change |= (info.Firmware[FIRMWARE_SECTION].VersionMin != FIRMWARE_VERSION_MINOR);
   18476:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1847a:	2a00      	cmp	r2, #0
   1847c:	bf18      	it	ne
   1847e:	f043 0301 	orrne.w	r3, r3, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:653
	change |= (info.Firmware[FIRMWARE_SECTION].VersionBuild != FIRMWARE_VERSION_BUILD);
   18482:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   18486:	2a1f      	cmp	r2, #31
   18488:	bf18      	it	ne
   1848a:	f043 0301 	orrne.w	r3, r3, #1
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:655

	if(change) {
   1848e:	b193      	cbz	r3, 184b6 <CFlashProg::UpdateFirmwareInfo()+0x72>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:657
		//Update the info settings to match the current firmware values
		info.Firmware[FIRMWARE_SECTION].Valid = true;	//Ensure the firmware is reported as valid if we're executing this.
   18490:	2301      	movs	r3, #1
   18492:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:658
		info.Firmware[FIRMWARE_SECTION].PartNumber = FIRMWARE_PARTNUMBER;
   18496:	f240 42cb 	movw	r2, #1227	; 0x4cb
   1849a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:659
		info.Firmware[FIRMWARE_SECTION].VersionMaj = FIRMWARE_VERSION_MAJOR;
   1849e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:660
		info.Firmware[FIRMWARE_SECTION].VersionMin = FIRMWARE_VERSION_MINOR;
   184a2:	2300      	movs	r3, #0
   184a4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:661
		info.Firmware[FIRMWARE_SECTION].VersionBuild = FIRMWARE_VERSION_BUILD;
   184a8:	231f      	movs	r3, #31
   184aa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:664

		//Write the new info back into Flash
		success = this->WriteInfo(&info);
   184ae:	4620      	mov	r0, r4
   184b0:	a901      	add	r1, sp, #4
   184b2:	f7ff ffc1 	bl	18438 <CFlashProg::WriteInfo(TFlashProgInfo*)>
C:/Users/s.morris/OculusHub/BpApplication/src/flash_prog.cpp:668
	}

	return success;
}
   184b6:	b00e      	add	sp, #56	; 0x38
   184b8:	bd10      	pop	{r4, pc}
   184ba:	bf00      	nop

000184bc <CTickTimer::~CTickTimer()>:
_ZN10CTickTimerD2Ev():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:21
	_tickValid = false;
}

/*!-----------------------------------------------------------------------------
*/
CTickTimer::~CTickTimer()
   184bc:	4b01      	ldr	r3, [pc, #4]	; (184c4 <CTickTimer::~CTickTimer()+0x8>)
   184be:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:24
{
	//Nothing to clear up
}
   184c0:	4770      	bx	lr
   184c2:	bf00      	nop
   184c4:	0001a330 	.word	0x0001a330

000184c8 <CTickTimer::~CTickTimer()>:
_ZN10CTickTimerD0Ev():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:21
	_tickValid = false;
}

/*!-----------------------------------------------------------------------------
*/
CTickTimer::~CTickTimer()
   184c8:	b510      	push	{r4, lr}
   184ca:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:24
{
	//Nothing to clear up
}
   184cc:	f7ff fff6 	bl	184bc <CTickTimer::~CTickTimer()>
   184d0:	4620      	mov	r0, r4
   184d2:	f000 f89d 	bl	18610 <operator delete(void*)>
   184d6:	4620      	mov	r0, r4
   184d8:	bd10      	pop	{r4, pc}
   184da:	bf00      	nop

000184dc <CTickTimer::CTickTimer(bool)>:
_ZN10CTickTimerC2Eb():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:12
//==============================================================================
/*!-----------------------------------------------------------------------------
Constructor for a periodic polled interval timer object
@param enabled True to create the timer in enabled mode
*/
CTickTimer::CTickTimer(bool enabled)
   184dc:	b410      	push	{r4}
   184de:	4b06      	ldr	r3, [pc, #24]	; (184f8 <CTickTimer::CTickTimer(bool)+0x1c>)
   184e0:	6003      	str	r3, [r0, #0]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:14
{
	_enabled = enabled;
   184e2:	7101      	strb	r1, [r0, #4]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:15
	_tickDelta = 0;		//Set "poll" function to always execute
   184e4:	2200      	movs	r2, #0
   184e6:	2300      	movs	r3, #0
   184e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:16
	_tickValid = false;
   184ec:	2300      	movs	r3, #0
   184ee:	7603      	strb	r3, [r0, #24]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:17
}
   184f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   184f4:	4770      	bx	lr
   184f6:	bf00      	nop
   184f8:	0001a330 	.word	0x0001a330

000184fc <CTickTimer::Reset()>:
_ZN10CTickTimer5ResetEv():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:105
/*!-----------------------------------------------------------------------------
Function called to reset the timer to the current time when subsequent Poll
functions are called.
*/
void CTickTimer::Reset()
{
   184fc:	b510      	push	{r4, lr}
   184fe:	4604      	mov	r4, r0
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:106
	_tickValid = true;
   18500:	2301      	movs	r3, #1
   18502:	7603      	strb	r3, [r0, #24]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:107
	_tickLast = CSysTick::GetTicks();
   18504:	f7ff fcc4 	bl	17e90 <CSysTick::GetTicks()>
   18508:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1850c:	bd10      	pop	{r4, pc}
   1850e:	bf00      	nop

00018510 <CTickTimer::Poll()>:
_ZN10CTickTimer4PollEv():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:61
Function that should be called periodically to poll the timer and see how many
time periods have elapsed since the last poll.
@result The number of complete time periods that have elapsed, or 0 for none
*/
uint32 CTickTimer::Poll()
{
   18510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18514:	4682      	mov	sl, r0
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:63
	//If timer is disabled, then return no epochs have elapsed
	if(!_enabled)
   18516:	7903      	ldrb	r3, [r0, #4]
   18518:	2b00      	cmp	r3, #0
   1851a:	d041      	beq.n	185a0 <CTickTimer::Poll()+0x90>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:67
		return 0;

	//If tickDelta is 0, then always return an elapsed period
	if(_tickDelta == 0.0)
   1851c:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   18520:	2200      	movs	r2, #0
   18522:	2300      	movs	r3, #0
   18524:	f7fd ffba 	bl	1649c <__aeabi_dcmpeq>
   18528:	2800      	cmp	r0, #0
   1852a:	d13c      	bne.n	185a6 <CTickTimer::Poll()+0x96>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:71
		return 1;

	//Reset the timer if it isn't valid
	if(!_tickValid)
   1852c:	f89a 3018 	ldrb.w	r3, [sl, #24]
   18530:	b913      	cbnz	r3, 18538 <CTickTimer::Poll()+0x28>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:72
		this->Reset();
   18532:	4650      	mov	r0, sl
   18534:	f7ff ffe2 	bl	184fc <CTickTimer::Reset()>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:75

	// Read the number of from the timer
	TTimeTicks ticksNow = CSysTick::GetTicks();
   18538:	f7ff fcaa 	bl	17e90 <CSysTick::GetTicks()>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:78

	// Reset the last tick counter if we go back in time
	if(ticksNow < _tickLast) {
   1853c:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   18540:	4290      	cmp	r0, r2
   18542:	eb71 0403 	sbcs.w	r4, r1, r3
   18546:	da01      	bge.n	1854c <CTickTimer::Poll()+0x3c>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:80
		//printf("* %lld, %lld\r\n", ticksNow, _tickLast);
		_tickLast = ticksNow;
   18548:	e9ca 0104 	strd	r0, r1, [sl, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:86
	}

	//printf("Ticks Now: %f, %f, %f\r\n", ticksNow, _tickLast, _tickDelta);

	// Compute the difference since the last poll
	TTimeTicks ticksDiff = ticksNow - _tickLast;
   1854c:	e9da 6704 	ldrd	r6, r7, [sl, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:89

	// work out how many complete epochs have passed since the last poll
	uint32 epochs = (int32)(ticksDiff / _tickDelta);
   18550:	e9da 8902 	ldrd	r8, r9, [sl, #8]
   18554:	1b80      	subs	r0, r0, r6
   18556:	eb61 0107 	sbc.w	r1, r1, r7
   1855a:	f7fd fd09 	bl	15f70 <__aeabi_l2d>
   1855e:	4642      	mov	r2, r8
   18560:	464b      	mov	r3, r9
   18562:	f7fd fe5d 	bl	16220 <__aeabi_ddiv>
   18566:	f7fd ffcb 	bl	16500 <__aeabi_d2iz>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:92

	// Move the last time on by the number of complete epochs passed
	if (epochs > 0) {
   1856a:	4683      	mov	fp, r0
   1856c:	b1a8      	cbz	r0, 1859a <CTickTimer::Poll()+0x8a>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:93
		_tickLast += _tickDelta * epochs;
   1856e:	f7fd fcb7 	bl	15ee0 <__aeabi_ui2d>
   18572:	4602      	mov	r2, r0
   18574:	460b      	mov	r3, r1
   18576:	4640      	mov	r0, r8
   18578:	4649      	mov	r1, r9
   1857a:	f7fd fd27 	bl	15fcc <__aeabi_dmul>
   1857e:	4604      	mov	r4, r0
   18580:	460d      	mov	r5, r1
   18582:	4630      	mov	r0, r6
   18584:	4639      	mov	r1, r7
   18586:	f7fd fcf3 	bl	15f70 <__aeabi_l2d>
   1858a:	4622      	mov	r2, r4
   1858c:	462b      	mov	r3, r5
   1858e:	f7fd fb6b 	bl	15c68 <__adddf3>
   18592:	f7fe f863 	bl	1665c <__aeabi_d2lz>
   18596:	e9ca 0104 	strd	r0, r1, [sl, #16]
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:97
	}

	// Return the number of completed epochs
	return epochs;
   1859a:	4658      	mov	r0, fp
   1859c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:64
*/
uint32 CTickTimer::Poll()
{
	//If timer is disabled, then return no epochs have elapsed
	if(!_enabled)
		return 0;
   185a0:	2000      	movs	r0, #0
   185a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:68

	//If tickDelta is 0, then always return an elapsed period
	if(_tickDelta == 0.0)
		return 1;
   185a6:	2001      	movs	r0, #1
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:98
		_tickLast += _tickDelta * epochs;
	}

	// Return the number of completed epochs
	return epochs;
}
   185a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000185ac <CTickTimer::SetEnabled(bool)>:
_ZN10CTickTimer10SetEnabledEb():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:117
always return 0 epochs.
@param value True to enable the timer
*/
void CTickTimer::SetEnabled(bool value)
{
	_enabled = value;
   185ac:	7101      	strb	r1, [r0, #4]
   185ae:	4770      	bx	lr

000185b0 <CTickTimer::SetFrequency(double)>:
_ZN10CTickTimer12SetFrequencyEd():
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:126
Specified the frequency (approximate within resolution of the tick counter) that
the timer will generate epoch counter with when the Poll method is called.
@param value The frequency in Hertz. Use a value of zero, for "always execute" on poll
*/
void CTickTimer::SetFrequency(double value)
{
   185b0:	b570      	push	{r4, r5, r6, lr}
   185b2:	4606      	mov	r6, r0
   185b4:	ec55 4b10 	vmov	r4, r5, d0
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:128
	//Compute the number of tick counts per interval
	if(value <= 0.0)
   185b8:	ee10 0a10 	vmov	r0, s0
   185bc:	4629      	mov	r1, r5
   185be:	2200      	movs	r2, #0
   185c0:	2300      	movs	r3, #0
   185c2:	f7fd ff7f 	bl	164c4 <__aeabi_dcmple>
   185c6:	b120      	cbz	r0, 185d2 <CTickTimer::SetFrequency(double)+0x22>
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:129
		_tickDelta = 0.0;
   185c8:	2200      	movs	r2, #0
   185ca:	2300      	movs	r3, #0
   185cc:	e9c6 2302 	strd	r2, r3, [r6, #8]
   185d0:	bd70      	pop	{r4, r5, r6, pc}
C:/Users/s.morris/OculusHub/BpApplication/src/ticktimer.cpp:131
	else
		_tickDelta = CSysTick::GetFrequency() / value;
   185d2:	f7ff fc57 	bl	17e84 <CSysTick::GetFrequency()>
   185d6:	ec51 0b10 	vmov	r0, r1, d0
   185da:	4622      	mov	r2, r4
   185dc:	462b      	mov	r3, r5
   185de:	f7fd fe1f 	bl	16220 <__aeabi_ddiv>
   185e2:	e9c6 0102 	strd	r0, r1, [r6, #8]
   185e6:	bd70      	pop	{r4, r5, r6, pc}

000185e8 <operator new(unsigned int)>:
_Znwj():
   185e8:	b510      	push	{r4, lr}
   185ea:	2800      	cmp	r0, #0
   185ec:	bf14      	ite	ne
   185ee:	4604      	movne	r4, r0
   185f0:	2401      	moveq	r4, #1
   185f2:	4620      	mov	r0, r4
   185f4:	f000 f9b0 	bl	18958 <malloc>
   185f8:	b930      	cbnz	r0, 18608 <operator new(unsigned int)+0x20>
   185fa:	4b04      	ldr	r3, [pc, #16]	; (1860c <operator new(unsigned int)+0x24>)
   185fc:	681b      	ldr	r3, [r3, #0]
   185fe:	b90b      	cbnz	r3, 18604 <operator new(unsigned int)+0x1c>
   18600:	f000 f90a 	bl	18818 <abort>
   18604:	4798      	blx	r3
   18606:	e7f4      	b.n	185f2 <operator new(unsigned int)+0xa>
   18608:	bd10      	pop	{r4, pc}
   1860a:	bf00      	nop
   1860c:	1fff0318 	.word	0x1fff0318

00018610 <operator delete(void*)>:
_ZdlPv():
   18610:	b108      	cbz	r0, 18616 <operator delete(void*)+0x6>
   18612:	f000 b9a9 	b.w	18968 <free>
   18616:	4770      	bx	lr

00018618 <__cxa_pure_virtual>:
__cxa_pure_virtual():
   18618:	b508      	push	{r3, lr}
   1861a:	4903      	ldr	r1, [pc, #12]	; (18628 <__cxa_pure_virtual+0x10>)
   1861c:	221b      	movs	r2, #27
   1861e:	2002      	movs	r0, #2
   18620:	f000 fc78 	bl	18f14 <write>
   18624:	f000 f88c 	bl	18740 <std::terminate()>
   18628:	0001a338 	.word	0x0001a338

0001862c <std::string::_M_copy(char*, char const*, unsigned int)>:
_ZNSs7_M_copyEPcPKcj():
   1862c:	2a01      	cmp	r2, #1
   1862e:	b510      	push	{r4, lr}
   18630:	d102      	bne.n	18638 <std::string::_M_copy(char*, char const*, unsigned int)+0xc>
   18632:	780a      	ldrb	r2, [r1, #0]
   18634:	7002      	strb	r2, [r0, #0]
   18636:	bd10      	pop	{r4, pc}
   18638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1863c:	f000 b9ba 	b.w	189b4 <memcpy>

00018640 <std::string::_S_copy_chars(char*, char const*, char const*)>:
_ZNSs13_S_copy_charsEPcPKcS1_():
   18640:	b508      	push	{r3, lr}
   18642:	1a52      	subs	r2, r2, r1
   18644:	f7ff fff2 	bl	1862c <std::string::_M_copy(char*, char const*, unsigned int)>
   18648:	bd08      	pop	{r3, pc}
	...

0001864c <std::string::_Rep::_M_set_length_and_sharable(unsigned int)>:
_ZNSs4_Rep26_M_set_length_and_sharableEj():
   1864c:	4b04      	ldr	r3, [pc, #16]	; (18660 <std::string::_Rep::_M_set_length_and_sharable(unsigned int)+0x14>)
   1864e:	4298      	cmp	r0, r3
   18650:	d004      	beq.n	1865c <std::string::_Rep::_M_set_length_and_sharable(unsigned int)+0x10>
   18652:	2300      	movs	r3, #0
   18654:	6083      	str	r3, [r0, #8]
   18656:	6001      	str	r1, [r0, #0]
   18658:	4408      	add	r0, r1
   1865a:	7303      	strb	r3, [r0, #12]
   1865c:	4770      	bx	lr
   1865e:	bf00      	nop
   18660:	1fff031c 	.word	0x1fff031c

00018664 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>:
_ZNSs4_Rep9_S_createEjjRKSaIcE():
   18664:	4b13      	ldr	r3, [pc, #76]	; (186b4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x50>)
   18666:	4298      	cmp	r0, r3
   18668:	b510      	push	{r4, lr}
   1866a:	4604      	mov	r4, r0
   1866c:	d902      	bls.n	18674 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x10>
   1866e:	4812      	ldr	r0, [pc, #72]	; (186b8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x54>)
   18670:	f000 f8ca 	bl	18808 <std::__throw_length_error(char const*)>
   18674:	4288      	cmp	r0, r1
   18676:	d903      	bls.n	18680 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x1c>
   18678:	004b      	lsls	r3, r1, #1
   1867a:	429c      	cmp	r4, r3
   1867c:	bf38      	it	cc
   1867e:	461c      	movcc	r4, r3
   18680:	f104 031d 	add.w	r3, r4, #29
   18684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   18688:	f104 000d 	add.w	r0, r4, #13
   1868c:	d90c      	bls.n	186a8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x44>
   1868e:	428c      	cmp	r4, r1
   18690:	d90a      	bls.n	186a8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x44>
   18692:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   18696:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1869a:	4a06      	ldr	r2, [pc, #24]	; (186b4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x50>)
   1869c:	1ae4      	subs	r4, r4, r3
   1869e:	4294      	cmp	r4, r2
   186a0:	bf28      	it	cs
   186a2:	4614      	movcs	r4, r2
   186a4:	f104 000d 	add.w	r0, r4, #13
   186a8:	f7ff ff9e 	bl	185e8 <operator new(unsigned int)>
   186ac:	2200      	movs	r2, #0
   186ae:	6044      	str	r4, [r0, #4]
   186b0:	6082      	str	r2, [r0, #8]
   186b2:	bd10      	pop	{r4, pc}
   186b4:	3ffffffc 	.word	0x3ffffffc
   186b8:	0001a3ad 	.word	0x0001a3ad

000186bc <std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
_ZNSs4_Rep10_M_destroyERKSaIcE():
   186bc:	f7ff bfa8 	b.w	18610 <operator delete(void*)>

000186c0 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>:
_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag():
   186c0:	4288      	cmp	r0, r1
   186c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186c6:	4605      	mov	r5, r0
   186c8:	460c      	mov	r4, r1
   186ca:	d101      	bne.n	186d0 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x10>
   186cc:	4e0d      	ldr	r6, [pc, #52]	; (18704 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x44>)
   186ce:	e015      	b.n	186fc <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x3c>
   186d0:	b918      	cbnz	r0, 186da <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x1a>
   186d2:	b114      	cbz	r4, 186da <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x1a>
   186d4:	480c      	ldr	r0, [pc, #48]	; (18708 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)+0x48>)
   186d6:	f000 f894 	bl	18802 <std::__throw_logic_error(char const*)>
   186da:	1b67      	subs	r7, r4, r5
   186dc:	2100      	movs	r1, #0
   186de:	4638      	mov	r0, r7
   186e0:	f7ff ffc0 	bl	18664 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
   186e4:	f100 060c 	add.w	r6, r0, #12
   186e8:	4680      	mov	r8, r0
   186ea:	4629      	mov	r1, r5
   186ec:	4630      	mov	r0, r6
   186ee:	4622      	mov	r2, r4
   186f0:	f7ff ffa6 	bl	18640 <std::string::_S_copy_chars(char*, char const*, char const*)>
   186f4:	4640      	mov	r0, r8
   186f6:	4639      	mov	r1, r7
   186f8:	f7ff ffa8 	bl	1864c <std::string::_Rep::_M_set_length_and_sharable(unsigned int)>
   186fc:	4630      	mov	r0, r6
   186fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18702:	bf00      	nop
   18704:	1fff0328 	.word	0x1fff0328
   18708:	0001a460 	.word	0x0001a460

0001870c <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)>:
_ZNSsC1EPKcRKSaIcE():
   1870c:	b570      	push	{r4, r5, r6, lr}
   1870e:	4605      	mov	r5, r0
   18710:	4616      	mov	r6, r2
   18712:	460c      	mov	r4, r1
   18714:	b121      	cbz	r1, 18720 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x14>
   18716:	4608      	mov	r0, r1
   18718:	f000 fa92 	bl	18c40 <strlen>
   1871c:	1821      	adds	r1, r4, r0
   1871e:	e001      	b.n	18724 <std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)+0x18>
   18720:	f04f 31ff 	mov.w	r1, #4294967295
   18724:	4620      	mov	r0, r4
   18726:	4632      	mov	r2, r6
   18728:	f04f 0300 	mov.w	r3, #0
   1872c:	f7ff ffc8 	bl	186c0 <char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag)>
   18730:	6028      	str	r0, [r5, #0]
   18732:	4628      	mov	r0, r5
   18734:	bd70      	pop	{r4, r5, r6, pc}

00018736 <__cxxabiv1::__terminate(void (*)())>:
_ZN10__cxxabiv111__terminateEPFvvE():
   18736:	b508      	push	{r3, lr}
   18738:	4780      	blx	r0
   1873a:	f000 f86d 	bl	18818 <abort>
	...

00018740 <std::terminate()>:
_ZSt9terminatev():
   18740:	b508      	push	{r3, lr}
   18742:	4b02      	ldr	r3, [pc, #8]	; (1874c <std::terminate()+0xc>)
   18744:	6818      	ldr	r0, [r3, #0]
   18746:	f7ff fff6 	bl	18736 <__cxxabiv1::__terminate(void (*)())>
   1874a:	bf00      	nop
   1874c:	1fff0038 	.word	0x1fff0038

00018750 <__gnu_cxx::__verbose_terminate_handler()>:
_ZN9__gnu_cxx27__verbose_terminate_handlerEv():
   18750:	4b1f      	ldr	r3, [pc, #124]	; (187d0 <__gnu_cxx::__verbose_terminate_handler()+0x80>)
   18752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18754:	781a      	ldrb	r2, [r3, #0]
   18756:	4c1f      	ldr	r4, [pc, #124]	; (187d4 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
   18758:	b112      	cbz	r2, 18760 <__gnu_cxx::__verbose_terminate_handler()+0x10>
   1875a:	6823      	ldr	r3, [r4, #0]
   1875c:	481e      	ldr	r0, [pc, #120]	; (187d8 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
   1875e:	e032      	b.n	187c6 <__gnu_cxx::__verbose_terminate_handler()+0x76>
   18760:	2201      	movs	r2, #1
   18762:	701a      	strb	r2, [r3, #0]
   18764:	f000 f840 	bl	187e8 <__cxa_current_exception_type>
   18768:	2800      	cmp	r0, #0
   1876a:	d02a      	beq.n	187c2 <__gnu_cxx::__verbose_terminate_handler()+0x72>
   1876c:	6845      	ldr	r5, [r0, #4]
   1876e:	4f19      	ldr	r7, [pc, #100]	; (187d4 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
   18770:	782b      	ldrb	r3, [r5, #0]
   18772:	2b2a      	cmp	r3, #42	; 0x2a
   18774:	ab02      	add	r3, sp, #8
   18776:	bf08      	it	eq
   18778:	3501      	addeq	r5, #1
   1877a:	2100      	movs	r1, #0
   1877c:	f04f 32ff 	mov.w	r2, #4294967295
   18780:	f843 2d04 	str.w	r2, [r3, #-4]!
   18784:	4628      	mov	r0, r5
   18786:	460a      	mov	r2, r1
   18788:	f7fd f9f8 	bl	15b7c <__cxa_demangle>
   1878c:	6823      	ldr	r3, [r4, #0]
   1878e:	4606      	mov	r6, r0
   18790:	68d9      	ldr	r1, [r3, #12]
   18792:	4812      	ldr	r0, [pc, #72]	; (187dc <__gnu_cxx::__verbose_terminate_handler()+0x8c>)
   18794:	f000 f8b0 	bl	188f8 <fputs>
   18798:	9b01      	ldr	r3, [sp, #4]
   1879a:	b913      	cbnz	r3, 187a2 <__gnu_cxx::__verbose_terminate_handler()+0x52>
   1879c:	683b      	ldr	r3, [r7, #0]
   1879e:	4630      	mov	r0, r6
   187a0:	e001      	b.n	187a6 <__gnu_cxx::__verbose_terminate_handler()+0x56>
   187a2:	683b      	ldr	r3, [r7, #0]
   187a4:	4628      	mov	r0, r5
   187a6:	68d9      	ldr	r1, [r3, #12]
   187a8:	f000 f8a6 	bl	188f8 <fputs>
   187ac:	6823      	ldr	r3, [r4, #0]
   187ae:	480c      	ldr	r0, [pc, #48]	; (187e0 <__gnu_cxx::__verbose_terminate_handler()+0x90>)
   187b0:	68d9      	ldr	r1, [r3, #12]
   187b2:	f000 f8a1 	bl	188f8 <fputs>
   187b6:	9b01      	ldr	r3, [sp, #4]
   187b8:	b943      	cbnz	r3, 187cc <__gnu_cxx::__verbose_terminate_handler()+0x7c>
   187ba:	4630      	mov	r0, r6
   187bc:	f000 f8d4 	bl	18968 <free>
   187c0:	e004      	b.n	187cc <__gnu_cxx::__verbose_terminate_handler()+0x7c>
   187c2:	6823      	ldr	r3, [r4, #0]
   187c4:	4807      	ldr	r0, [pc, #28]	; (187e4 <__gnu_cxx::__verbose_terminate_handler()+0x94>)
   187c6:	68d9      	ldr	r1, [r3, #12]
   187c8:	f000 f896 	bl	188f8 <fputs>
   187cc:	f000 f824 	bl	18818 <abort>
   187d0:	1fff032c 	.word	0x1fff032c
   187d4:	1fff009c 	.word	0x1fff009c
   187d8:	0001a4ba 	.word	0x0001a4ba
   187dc:	0001a4d8 	.word	0x0001a4d8
   187e0:	0001a509 	.word	0x0001a509
   187e4:	0001a50c 	.word	0x0001a50c

000187e8 <__cxa_current_exception_type>:
__cxa_current_exception_type():
   187e8:	b508      	push	{r3, lr}
   187ea:	f000 f811 	bl	18810 <__cxa_get_globals>
   187ee:	6800      	ldr	r0, [r0, #0]
   187f0:	b130      	cbz	r0, 18800 <__cxa_current_exception_type+0x18>
   187f2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   187f6:	2b01      	cmp	r3, #1
   187f8:	bf04      	itt	eq
   187fa:	6800      	ldreq	r0, [r0, #0]
   187fc:	3878      	subeq	r0, #120	; 0x78
   187fe:	6800      	ldr	r0, [r0, #0]
   18800:	bd08      	pop	{r3, pc}

00018802 <std::__throw_logic_error(char const*)>:
_ZSt19__throw_logic_errorPKc():
   18802:	b508      	push	{r3, lr}
   18804:	f000 f808 	bl	18818 <abort>

00018808 <std::__throw_length_error(char const*)>:
_ZSt20__throw_length_errorPKc():
   18808:	b508      	push	{r3, lr}
   1880a:	f000 f805 	bl	18818 <abort>
	...

00018810 <__cxa_get_globals>:
__cxa_get_globals():
   18810:	4800      	ldr	r0, [pc, #0]	; (18814 <__cxa_get_globals+0x4>)
   18812:	4770      	bx	lr
   18814:	1fff0330 	.word	0x1fff0330

00018818 <abort>:
abort():
   18818:	b508      	push	{r3, lr}
   1881a:	2006      	movs	r0, #6
   1881c:	f000 f9d0 	bl	18bc0 <raise>
   18820:	2001      	movs	r0, #1
   18822:	f001 f8f7 	bl	19a14 <_exit>
	...

00018828 <exit>:
exit():
   18828:	b508      	push	{r3, lr}
   1882a:	4b07      	ldr	r3, [pc, #28]	; (18848 <exit+0x20>)
   1882c:	4604      	mov	r4, r0
   1882e:	b113      	cbz	r3, 18836 <exit+0xe>
   18830:	2100      	movs	r1, #0
   18832:	f3af 8000 	nop.w
   18836:	4b05      	ldr	r3, [pc, #20]	; (1884c <exit+0x24>)
   18838:	6818      	ldr	r0, [r3, #0]
   1883a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1883c:	b103      	cbz	r3, 18840 <exit+0x18>
   1883e:	4798      	blx	r3
   18840:	4620      	mov	r0, r4
   18842:	f001 f8e7 	bl	19a14 <_exit>
   18846:	bf00      	nop
   18848:	00000000 	.word	0x00000000
   1884c:	0001ad34 	.word	0x0001ad34

00018850 <_fputs_r>:
_fputs_r():
   18850:	b570      	push	{r4, r5, r6, lr}
   18852:	460e      	mov	r6, r1
   18854:	4614      	mov	r4, r2
   18856:	4605      	mov	r5, r0
   18858:	b118      	cbz	r0, 18862 <_fputs_r+0x12>
   1885a:	6983      	ldr	r3, [r0, #24]
   1885c:	b90b      	cbnz	r3, 18862 <_fputs_r+0x12>
   1885e:	f000 fefd 	bl	1965c <__sinit>
   18862:	4b22      	ldr	r3, [pc, #136]	; (188ec <_fputs_r+0x9c>)
   18864:	429c      	cmp	r4, r3
   18866:	d101      	bne.n	1886c <_fputs_r+0x1c>
   18868:	686c      	ldr	r4, [r5, #4]
   1886a:	e008      	b.n	1887e <_fputs_r+0x2e>
   1886c:	4b20      	ldr	r3, [pc, #128]	; (188f0 <_fputs_r+0xa0>)
   1886e:	429c      	cmp	r4, r3
   18870:	d101      	bne.n	18876 <_fputs_r+0x26>
   18872:	68ac      	ldr	r4, [r5, #8]
   18874:	e003      	b.n	1887e <_fputs_r+0x2e>
   18876:	4b1f      	ldr	r3, [pc, #124]	; (188f4 <_fputs_r+0xa4>)
   18878:	429c      	cmp	r4, r3
   1887a:	bf08      	it	eq
   1887c:	68ec      	ldreq	r4, [r5, #12]
   1887e:	89a3      	ldrh	r3, [r4, #12]
   18880:	071a      	lsls	r2, r3, #28
   18882:	d501      	bpl.n	18888 <_fputs_r+0x38>
   18884:	6923      	ldr	r3, [r4, #16]
   18886:	b99b      	cbnz	r3, 188b0 <_fputs_r+0x60>
   18888:	4628      	mov	r0, r5
   1888a:	4621      	mov	r1, r4
   1888c:	f000 fd76 	bl	1937c <__swsetup_r>
   18890:	b170      	cbz	r0, 188b0 <_fputs_r+0x60>
   18892:	f04f 30ff 	mov.w	r0, #4294967295
   18896:	bd70      	pop	{r4, r5, r6, pc}
   18898:	68a3      	ldr	r3, [r4, #8]
   1889a:	3b01      	subs	r3, #1
   1889c:	2b00      	cmp	r3, #0
   1889e:	60a3      	str	r3, [r4, #8]
   188a0:	db0b      	blt.n	188ba <_fputs_r+0x6a>
   188a2:	6823      	ldr	r3, [r4, #0]
   188a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   188a8:	701a      	strb	r2, [r3, #0]
   188aa:	6823      	ldr	r3, [r4, #0]
   188ac:	3301      	adds	r3, #1
   188ae:	6023      	str	r3, [r4, #0]
   188b0:	f816 0b01 	ldrb.w	r0, [r6], #1
   188b4:	2800      	cmp	r0, #0
   188b6:	d1ef      	bne.n	18898 <_fputs_r+0x48>
   188b8:	e017      	b.n	188ea <_fputs_r+0x9a>
   188ba:	69a2      	ldr	r2, [r4, #24]
   188bc:	4293      	cmp	r3, r2
   188be:	db09      	blt.n	188d4 <_fputs_r+0x84>
   188c0:	6823      	ldr	r3, [r4, #0]
   188c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
   188c6:	701a      	strb	r2, [r3, #0]
   188c8:	6823      	ldr	r3, [r4, #0]
   188ca:	7819      	ldrb	r1, [r3, #0]
   188cc:	290a      	cmp	r1, #10
   188ce:	d1ed      	bne.n	188ac <_fputs_r+0x5c>
   188d0:	4628      	mov	r0, r5
   188d2:	e002      	b.n	188da <_fputs_r+0x8a>
   188d4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   188d8:	4628      	mov	r0, r5
   188da:	4622      	mov	r2, r4
   188dc:	f000 fce8 	bl	192b0 <__swbuf_r>
   188e0:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   188e4:	4258      	negs	r0, r3
   188e6:	4158      	adcs	r0, r3
   188e8:	e7d2      	b.n	18890 <_fputs_r+0x40>
   188ea:	bd70      	pop	{r4, r5, r6, pc}
   188ec:	0001ad6c 	.word	0x0001ad6c
   188f0:	0001ad8c 	.word	0x0001ad8c
   188f4:	0001adac 	.word	0x0001adac

000188f8 <fputs>:
fputs():
   188f8:	460a      	mov	r2, r1
   188fa:	4903      	ldr	r1, [pc, #12]	; (18908 <fputs+0x10>)
   188fc:	4603      	mov	r3, r0
   188fe:	6808      	ldr	r0, [r1, #0]
   18900:	4619      	mov	r1, r3
   18902:	f7ff bfa5 	b.w	18850 <_fputs_r>
   18906:	bf00      	nop
   18908:	1fff009c 	.word	0x1fff009c

0001890c <__libc_init_array>:
__libc_init_array():
   1890c:	b570      	push	{r4, r5, r6, lr}
   1890e:	4b0e      	ldr	r3, [pc, #56]	; (18948 <__libc_init_array+0x3c>)
   18910:	4d0e      	ldr	r5, [pc, #56]	; (1894c <__libc_init_array+0x40>)
   18912:	1aed      	subs	r5, r5, r3
   18914:	10ad      	asrs	r5, r5, #2
   18916:	2400      	movs	r4, #0
   18918:	461e      	mov	r6, r3
   1891a:	42ac      	cmp	r4, r5
   1891c:	d004      	beq.n	18928 <__libc_init_array+0x1c>
   1891e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   18922:	4790      	blx	r2
   18924:	3401      	adds	r4, #1
   18926:	e7f8      	b.n	1891a <__libc_init_array+0xe>
   18928:	f002 fa50 	bl	1adcc <_init>
   1892c:	4d08      	ldr	r5, [pc, #32]	; (18950 <__libc_init_array+0x44>)
   1892e:	4b09      	ldr	r3, [pc, #36]	; (18954 <__libc_init_array+0x48>)
   18930:	1aed      	subs	r5, r5, r3
   18932:	10ad      	asrs	r5, r5, #2
   18934:	2400      	movs	r4, #0
   18936:	461e      	mov	r6, r3
   18938:	42ac      	cmp	r4, r5
   1893a:	d004      	beq.n	18946 <__libc_init_array+0x3a>
   1893c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   18940:	4790      	blx	r2
   18942:	3401      	adds	r4, #1
   18944:	e7f8      	b.n	18938 <__libc_init_array+0x2c>
   18946:	bd70      	pop	{r4, r5, r6, pc}
   18948:	0001adec 	.word	0x0001adec
   1894c:	0001adec 	.word	0x0001adec
   18950:	0001adf0 	.word	0x0001adf0
   18954:	0001adec 	.word	0x0001adec

00018958 <malloc>:
malloc():
   18958:	4b02      	ldr	r3, [pc, #8]	; (18964 <malloc+0xc>)
   1895a:	4601      	mov	r1, r0
   1895c:	6818      	ldr	r0, [r3, #0]
   1895e:	f000 b899 	b.w	18a94 <_malloc_r>
   18962:	bf00      	nop
   18964:	1fff009c 	.word	0x1fff009c

00018968 <free>:
free():
   18968:	4b02      	ldr	r3, [pc, #8]	; (18974 <free+0xc>)
   1896a:	4601      	mov	r1, r0
   1896c:	6818      	ldr	r0, [r3, #0]
   1896e:	f000 b84d 	b.w	18a0c <_free_r>
   18972:	bf00      	nop
   18974:	1fff009c 	.word	0x1fff009c

00018978 <memchr>:
memchr():
   18978:	b510      	push	{r4, lr}
   1897a:	b2c9      	uxtb	r1, r1
   1897c:	4402      	add	r2, r0
   1897e:	4290      	cmp	r0, r2
   18980:	4603      	mov	r3, r0
   18982:	d006      	beq.n	18992 <memchr+0x1a>
   18984:	781c      	ldrb	r4, [r3, #0]
   18986:	428c      	cmp	r4, r1
   18988:	f100 0001 	add.w	r0, r0, #1
   1898c:	d1f7      	bne.n	1897e <memchr+0x6>
   1898e:	4618      	mov	r0, r3
   18990:	bd10      	pop	{r4, pc}
   18992:	2000      	movs	r0, #0
   18994:	bd10      	pop	{r4, pc}

00018996 <memcmp>:
memcmp():
   18996:	b530      	push	{r4, r5, lr}
   18998:	2300      	movs	r3, #0
   1899a:	4293      	cmp	r3, r2
   1899c:	d008      	beq.n	189b0 <memcmp+0x1a>
   1899e:	5cc5      	ldrb	r5, [r0, r3]
   189a0:	3301      	adds	r3, #1
   189a2:	18cc      	adds	r4, r1, r3
   189a4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   189a8:	42a5      	cmp	r5, r4
   189aa:	d0f6      	beq.n	1899a <memcmp+0x4>
   189ac:	1b28      	subs	r0, r5, r4
   189ae:	bd30      	pop	{r4, r5, pc}
   189b0:	2000      	movs	r0, #0
   189b2:	bd30      	pop	{r4, r5, pc}

000189b4 <memcpy>:
memcpy():
   189b4:	b510      	push	{r4, lr}
   189b6:	2300      	movs	r3, #0
   189b8:	4293      	cmp	r3, r2
   189ba:	d003      	beq.n	189c4 <memcpy+0x10>
   189bc:	5ccc      	ldrb	r4, [r1, r3]
   189be:	54c4      	strb	r4, [r0, r3]
   189c0:	3301      	adds	r3, #1
   189c2:	e7f9      	b.n	189b8 <memcpy+0x4>
   189c4:	bd10      	pop	{r4, pc}

000189c6 <memmove>:
memmove():
   189c6:	4281      	cmp	r1, r0
   189c8:	b570      	push	{r4, r5, r6, lr}
   189ca:	d301      	bcc.n	189d0 <memmove+0xa>
   189cc:	2300      	movs	r3, #0
   189ce:	e00e      	b.n	189ee <memmove+0x28>
   189d0:	188c      	adds	r4, r1, r2
   189d2:	42a0      	cmp	r0, r4
   189d4:	d2fa      	bcs.n	189cc <memmove+0x6>
   189d6:	1885      	adds	r5, r0, r2
   189d8:	4613      	mov	r3, r2
   189da:	f113 33ff 	adds.w	r3, r3, #4294967295
   189de:	d305      	bcc.n	189ec <memmove+0x26>
   189e0:	4251      	negs	r1, r2
   189e2:	1866      	adds	r6, r4, r1
   189e4:	4429      	add	r1, r5
   189e6:	5cf6      	ldrb	r6, [r6, r3]
   189e8:	54ce      	strb	r6, [r1, r3]
   189ea:	e7f6      	b.n	189da <memmove+0x14>
   189ec:	bd70      	pop	{r4, r5, r6, pc}
   189ee:	4293      	cmp	r3, r2
   189f0:	d003      	beq.n	189fa <memmove+0x34>
   189f2:	5ccc      	ldrb	r4, [r1, r3]
   189f4:	54c4      	strb	r4, [r0, r3]
   189f6:	3301      	adds	r3, #1
   189f8:	e7f9      	b.n	189ee <memmove+0x28>
   189fa:	bd70      	pop	{r4, r5, r6, pc}

000189fc <memset>:
memset():
   189fc:	4402      	add	r2, r0
   189fe:	4603      	mov	r3, r0
   18a00:	4293      	cmp	r3, r2
   18a02:	d002      	beq.n	18a0a <memset+0xe>
   18a04:	f803 1b01 	strb.w	r1, [r3], #1
   18a08:	e7fa      	b.n	18a00 <memset+0x4>
   18a0a:	4770      	bx	lr

00018a0c <_free_r>:
_free_r():
   18a0c:	b530      	push	{r4, r5, lr}
   18a0e:	2900      	cmp	r1, #0
   18a10:	d03c      	beq.n	18a8c <_free_r+0x80>
   18a12:	f851 2c04 	ldr.w	r2, [r1, #-4]
   18a16:	1f0b      	subs	r3, r1, #4
   18a18:	491d      	ldr	r1, [pc, #116]	; (18a90 <_free_r+0x84>)
   18a1a:	2a00      	cmp	r2, #0
   18a1c:	bfb8      	it	lt
   18a1e:	189b      	addlt	r3, r3, r2
   18a20:	680a      	ldr	r2, [r1, #0]
   18a22:	460c      	mov	r4, r1
   18a24:	b912      	cbnz	r2, 18a2c <_free_r+0x20>
   18a26:	605a      	str	r2, [r3, #4]
   18a28:	600b      	str	r3, [r1, #0]
   18a2a:	bd30      	pop	{r4, r5, pc}
   18a2c:	4293      	cmp	r3, r2
   18a2e:	d20d      	bcs.n	18a4c <_free_r+0x40>
   18a30:	6819      	ldr	r1, [r3, #0]
   18a32:	1858      	adds	r0, r3, r1
   18a34:	4290      	cmp	r0, r2
   18a36:	d103      	bne.n	18a40 <_free_r+0x34>
   18a38:	585a      	ldr	r2, [r3, r1]
   18a3a:	4411      	add	r1, r2
   18a3c:	6842      	ldr	r2, [r0, #4]
   18a3e:	6019      	str	r1, [r3, #0]
   18a40:	605a      	str	r2, [r3, #4]
   18a42:	6023      	str	r3, [r4, #0]
   18a44:	bd30      	pop	{r4, r5, pc}
   18a46:	4299      	cmp	r1, r3
   18a48:	d803      	bhi.n	18a52 <_free_r+0x46>
   18a4a:	460a      	mov	r2, r1
   18a4c:	6851      	ldr	r1, [r2, #4]
   18a4e:	2900      	cmp	r1, #0
   18a50:	d1f9      	bne.n	18a46 <_free_r+0x3a>
   18a52:	6814      	ldr	r4, [r2, #0]
   18a54:	1915      	adds	r5, r2, r4
   18a56:	429d      	cmp	r5, r3
   18a58:	d10a      	bne.n	18a70 <_free_r+0x64>
   18a5a:	681b      	ldr	r3, [r3, #0]
   18a5c:	4423      	add	r3, r4
   18a5e:	18d0      	adds	r0, r2, r3
   18a60:	4288      	cmp	r0, r1
   18a62:	6013      	str	r3, [r2, #0]
   18a64:	d112      	bne.n	18a8c <_free_r+0x80>
   18a66:	6808      	ldr	r0, [r1, #0]
   18a68:	4403      	add	r3, r0
   18a6a:	6013      	str	r3, [r2, #0]
   18a6c:	684b      	ldr	r3, [r1, #4]
   18a6e:	e00c      	b.n	18a8a <_free_r+0x7e>
   18a70:	d902      	bls.n	18a78 <_free_r+0x6c>
   18a72:	230c      	movs	r3, #12
   18a74:	6003      	str	r3, [r0, #0]
   18a76:	bd30      	pop	{r4, r5, pc}
   18a78:	6818      	ldr	r0, [r3, #0]
   18a7a:	181c      	adds	r4, r3, r0
   18a7c:	428c      	cmp	r4, r1
   18a7e:	d103      	bne.n	18a88 <_free_r+0x7c>
   18a80:	680c      	ldr	r4, [r1, #0]
   18a82:	6849      	ldr	r1, [r1, #4]
   18a84:	4420      	add	r0, r4
   18a86:	6018      	str	r0, [r3, #0]
   18a88:	6059      	str	r1, [r3, #4]
   18a8a:	6053      	str	r3, [r2, #4]
   18a8c:	bd30      	pop	{r4, r5, pc}
   18a8e:	bf00      	nop
   18a90:	1fff0340 	.word	0x1fff0340

00018a94 <_malloc_r>:
_malloc_r():
   18a94:	b570      	push	{r4, r5, r6, lr}
   18a96:	1ccd      	adds	r5, r1, #3
   18a98:	f025 0503 	bic.w	r5, r5, #3
   18a9c:	3508      	adds	r5, #8
   18a9e:	2d0c      	cmp	r5, #12
   18aa0:	bf38      	it	cc
   18aa2:	250c      	movcc	r5, #12
   18aa4:	2d00      	cmp	r5, #0
   18aa6:	4606      	mov	r6, r0
   18aa8:	db3f      	blt.n	18b2a <_malloc_r+0x96>
   18aaa:	428d      	cmp	r5, r1
   18aac:	d33d      	bcc.n	18b2a <_malloc_r+0x96>
   18aae:	4b21      	ldr	r3, [pc, #132]	; (18b34 <_malloc_r+0xa0>)
   18ab0:	681c      	ldr	r4, [r3, #0]
   18ab2:	4618      	mov	r0, r3
   18ab4:	4621      	mov	r1, r4
   18ab6:	b1a1      	cbz	r1, 18ae2 <_malloc_r+0x4e>
   18ab8:	680b      	ldr	r3, [r1, #0]
   18aba:	1b5b      	subs	r3, r3, r5
   18abc:	d40e      	bmi.n	18adc <_malloc_r+0x48>
   18abe:	2b0b      	cmp	r3, #11
   18ac0:	d903      	bls.n	18aca <_malloc_r+0x36>
   18ac2:	600b      	str	r3, [r1, #0]
   18ac4:	18cc      	adds	r4, r1, r3
   18ac6:	50cd      	str	r5, [r1, r3]
   18ac8:	e01f      	b.n	18b0a <_malloc_r+0x76>
   18aca:	428c      	cmp	r4, r1
   18acc:	d102      	bne.n	18ad4 <_malloc_r+0x40>
   18ace:	6862      	ldr	r2, [r4, #4]
   18ad0:	6002      	str	r2, [r0, #0]
   18ad2:	e01a      	b.n	18b0a <_malloc_r+0x76>
   18ad4:	684b      	ldr	r3, [r1, #4]
   18ad6:	6063      	str	r3, [r4, #4]
   18ad8:	460c      	mov	r4, r1
   18ada:	e016      	b.n	18b0a <_malloc_r+0x76>
   18adc:	460c      	mov	r4, r1
   18ade:	6849      	ldr	r1, [r1, #4]
   18ae0:	e7e9      	b.n	18ab6 <_malloc_r+0x22>
   18ae2:	4c15      	ldr	r4, [pc, #84]	; (18b38 <_malloc_r+0xa4>)
   18ae4:	6823      	ldr	r3, [r4, #0]
   18ae6:	b91b      	cbnz	r3, 18af0 <_malloc_r+0x5c>
   18ae8:	4630      	mov	r0, r6
   18aea:	f000 f831 	bl	18b50 <_sbrk_r>
   18aee:	6020      	str	r0, [r4, #0]
   18af0:	4629      	mov	r1, r5
   18af2:	4630      	mov	r0, r6
   18af4:	f000 f82c 	bl	18b50 <_sbrk_r>
   18af8:	1c43      	adds	r3, r0, #1
   18afa:	4601      	mov	r1, r0
   18afc:	d015      	beq.n	18b2a <_malloc_r+0x96>
   18afe:	1cc4      	adds	r4, r0, #3
   18b00:	f024 0403 	bic.w	r4, r4, #3
   18b04:	4284      	cmp	r4, r0
   18b06:	d10a      	bne.n	18b1e <_malloc_r+0x8a>
   18b08:	6025      	str	r5, [r4, #0]
   18b0a:	f104 000b 	add.w	r0, r4, #11
   18b0e:	1d23      	adds	r3, r4, #4
   18b10:	f020 0007 	bic.w	r0, r0, #7
   18b14:	1ac3      	subs	r3, r0, r3
   18b16:	d00b      	beq.n	18b30 <_malloc_r+0x9c>
   18b18:	425a      	negs	r2, r3
   18b1a:	50e2      	str	r2, [r4, r3]
   18b1c:	bd70      	pop	{r4, r5, r6, pc}
   18b1e:	4630      	mov	r0, r6
   18b20:	1a61      	subs	r1, r4, r1
   18b22:	f000 f815 	bl	18b50 <_sbrk_r>
   18b26:	3001      	adds	r0, #1
   18b28:	d1ee      	bne.n	18b08 <_malloc_r+0x74>
   18b2a:	230c      	movs	r3, #12
   18b2c:	6033      	str	r3, [r6, #0]
   18b2e:	2000      	movs	r0, #0
   18b30:	bd70      	pop	{r4, r5, r6, pc}
   18b32:	bf00      	nop
   18b34:	1fff0340 	.word	0x1fff0340
   18b38:	1fff033c 	.word	0x1fff033c

00018b3c <realloc>:
realloc():
   18b3c:	460a      	mov	r2, r1
   18b3e:	4903      	ldr	r1, [pc, #12]	; (18b4c <realloc+0x10>)
   18b40:	4603      	mov	r3, r0
   18b42:	6808      	ldr	r0, [r1, #0]
   18b44:	4619      	mov	r1, r3
   18b46:	f000 be41 	b.w	197cc <_realloc_r>
   18b4a:	bf00      	nop
   18b4c:	1fff009c 	.word	0x1fff009c

00018b50 <_sbrk_r>:
_sbrk_r():
   18b50:	b538      	push	{r3, r4, r5, lr}
   18b52:	4c06      	ldr	r4, [pc, #24]	; (18b6c <_sbrk_r+0x1c>)
   18b54:	2300      	movs	r3, #0
   18b56:	4605      	mov	r5, r0
   18b58:	4608      	mov	r0, r1
   18b5a:	6023      	str	r3, [r4, #0]
   18b5c:	f000 ff38 	bl	199d0 <_sbrk>
   18b60:	1c43      	adds	r3, r0, #1
   18b62:	d102      	bne.n	18b6a <_sbrk_r+0x1a>
   18b64:	6823      	ldr	r3, [r4, #0]
   18b66:	b103      	cbz	r3, 18b6a <_sbrk_r+0x1a>
   18b68:	602b      	str	r3, [r5, #0]
   18b6a:	bd38      	pop	{r3, r4, r5, pc}
   18b6c:	1fff0348 	.word	0x1fff0348

00018b70 <_raise_r>:
_raise_r():
   18b70:	291f      	cmp	r1, #31
   18b72:	b538      	push	{r3, r4, r5, lr}
   18b74:	4605      	mov	r5, r0
   18b76:	460c      	mov	r4, r1
   18b78:	d904      	bls.n	18b84 <_raise_r+0x14>
   18b7a:	2316      	movs	r3, #22
   18b7c:	6003      	str	r3, [r0, #0]
   18b7e:	f04f 30ff 	mov.w	r0, #4294967295
   18b82:	bd38      	pop	{r3, r4, r5, pc}
   18b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18b86:	b112      	cbz	r2, 18b8e <_raise_r+0x1e>
   18b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18b8c:	b94b      	cbnz	r3, 18ba2 <_raise_r+0x32>
   18b8e:	4628      	mov	r0, r5
   18b90:	f000 f830 	bl	18bf4 <_getpid_r>
   18b94:	4622      	mov	r2, r4
   18b96:	4601      	mov	r1, r0
   18b98:	4628      	mov	r0, r5
   18b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18b9e:	f000 b817 	b.w	18bd0 <_kill_r>
   18ba2:	2b01      	cmp	r3, #1
   18ba4:	d00a      	beq.n	18bbc <_raise_r+0x4c>
   18ba6:	1c59      	adds	r1, r3, #1
   18ba8:	d103      	bne.n	18bb2 <_raise_r+0x42>
   18baa:	2316      	movs	r3, #22
   18bac:	6003      	str	r3, [r0, #0]
   18bae:	2001      	movs	r0, #1
   18bb0:	bd38      	pop	{r3, r4, r5, pc}
   18bb2:	2500      	movs	r5, #0
   18bb4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   18bb8:	4620      	mov	r0, r4
   18bba:	4798      	blx	r3
   18bbc:	2000      	movs	r0, #0
   18bbe:	bd38      	pop	{r3, r4, r5, pc}

00018bc0 <raise>:
raise():
   18bc0:	4b02      	ldr	r3, [pc, #8]	; (18bcc <raise+0xc>)
   18bc2:	4601      	mov	r1, r0
   18bc4:	6818      	ldr	r0, [r3, #0]
   18bc6:	f7ff bfd3 	b.w	18b70 <_raise_r>
   18bca:	bf00      	nop
   18bcc:	1fff009c 	.word	0x1fff009c

00018bd0 <_kill_r>:
_kill_r():
   18bd0:	b538      	push	{r3, r4, r5, lr}
   18bd2:	4c07      	ldr	r4, [pc, #28]	; (18bf0 <_kill_r+0x20>)
   18bd4:	2300      	movs	r3, #0
   18bd6:	4605      	mov	r5, r0
   18bd8:	4608      	mov	r0, r1
   18bda:	4611      	mov	r1, r2
   18bdc:	6023      	str	r3, [r4, #0]
   18bde:	f000 fedf 	bl	199a0 <_kill>
   18be2:	1c43      	adds	r3, r0, #1
   18be4:	d102      	bne.n	18bec <_kill_r+0x1c>
   18be6:	6823      	ldr	r3, [r4, #0]
   18be8:	b103      	cbz	r3, 18bec <_kill_r+0x1c>
   18bea:	602b      	str	r3, [r5, #0]
   18bec:	bd38      	pop	{r3, r4, r5, pc}
   18bee:	bf00      	nop
   18bf0:	1fff0348 	.word	0x1fff0348

00018bf4 <_getpid_r>:
_getpid_r():
   18bf4:	f000 bec4 	b.w	19980 <_getpid>

00018bf8 <siprintf>:
sprintf():
   18bf8:	b40e      	push	{r1, r2, r3}
   18bfa:	b500      	push	{lr}
   18bfc:	b09c      	sub	sp, #112	; 0x70
   18bfe:	f44f 7102 	mov.w	r1, #520	; 0x208
   18c02:	f8ad 1014 	strh.w	r1, [sp, #20]
   18c06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   18c0a:	9104      	str	r1, [sp, #16]
   18c0c:	9107      	str	r1, [sp, #28]
   18c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18c12:	ab1d      	add	r3, sp, #116	; 0x74
   18c14:	f8ad 1016 	strh.w	r1, [sp, #22]
   18c18:	4908      	ldr	r1, [pc, #32]	; (18c3c <siprintf+0x44>)
   18c1a:	f853 2b04 	ldr.w	r2, [r3], #4
   18c1e:	9002      	str	r0, [sp, #8]
   18c20:	9006      	str	r0, [sp, #24]
   18c22:	6808      	ldr	r0, [r1, #0]
   18c24:	9301      	str	r3, [sp, #4]
   18c26:	a902      	add	r1, sp, #8
   18c28:	f000 f886 	bl	18d38 <_svfiprintf_r>
   18c2c:	9b02      	ldr	r3, [sp, #8]
   18c2e:	2200      	movs	r2, #0
   18c30:	701a      	strb	r2, [r3, #0]
   18c32:	b01c      	add	sp, #112	; 0x70
   18c34:	f85d eb04 	ldr.w	lr, [sp], #4
   18c38:	b003      	add	sp, #12
   18c3a:	4770      	bx	lr
   18c3c:	1fff009c 	.word	0x1fff009c

00018c40 <strlen>:
strlen():
   18c40:	4603      	mov	r3, r0
   18c42:	f813 2b01 	ldrb.w	r2, [r3], #1
   18c46:	2a00      	cmp	r2, #0
   18c48:	d1fb      	bne.n	18c42 <strlen+0x2>
   18c4a:	1a18      	subs	r0, r3, r0
   18c4c:	3801      	subs	r0, #1
   18c4e:	4770      	bx	lr

00018c50 <strncmp>:
strncmp():
   18c50:	b570      	push	{r4, r5, r6, lr}
   18c52:	b192      	cbz	r2, 18c7a <strncmp+0x2a>
   18c54:	460b      	mov	r3, r1
   18c56:	4605      	mov	r5, r0
   18c58:	781c      	ldrb	r4, [r3, #0]
   18c5a:	f810 6b01 	ldrb.w	r6, [r0], #1
   18c5e:	42b4      	cmp	r4, r6
   18c60:	f101 0101 	add.w	r1, r1, #1
   18c64:	d101      	bne.n	18c6a <strncmp+0x1a>
   18c66:	2a01      	cmp	r2, #1
   18c68:	d103      	bne.n	18c72 <strncmp+0x22>
   18c6a:	7828      	ldrb	r0, [r5, #0]
   18c6c:	781b      	ldrb	r3, [r3, #0]
   18c6e:	1ac0      	subs	r0, r0, r3
   18c70:	bd70      	pop	{r4, r5, r6, pc}
   18c72:	3a01      	subs	r2, #1
   18c74:	2c00      	cmp	r4, #0
   18c76:	d1ed      	bne.n	18c54 <strncmp+0x4>
   18c78:	e7f7      	b.n	18c6a <strncmp+0x1a>
   18c7a:	4610      	mov	r0, r2
   18c7c:	bd70      	pop	{r4, r5, r6, pc}

00018c7e <__ssputs_r>:
__ssputs_r():
   18c7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c82:	688d      	ldr	r5, [r1, #8]
   18c84:	42ab      	cmp	r3, r5
   18c86:	4681      	mov	r9, r0
   18c88:	460c      	mov	r4, r1
   18c8a:	4692      	mov	sl, r2
   18c8c:	461f      	mov	r7, r3
   18c8e:	d343      	bcc.n	18d18 <__ssputs_r+0x9a>
   18c90:	898b      	ldrh	r3, [r1, #12]
   18c92:	f413 6f90 	tst.w	r3, #1152	; 0x480
   18c96:	d03d      	beq.n	18d14 <__ssputs_r+0x96>
   18c98:	6826      	ldr	r6, [r4, #0]
   18c9a:	6909      	ldr	r1, [r1, #16]
   18c9c:	ebc1 0806 	rsb	r8, r1, r6
   18ca0:	6966      	ldr	r6, [r4, #20]
   18ca2:	2202      	movs	r2, #2
   18ca4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   18ca8:	fb96 f6f2 	sdiv	r6, r6, r2
   18cac:	f108 0201 	add.w	r2, r8, #1
   18cb0:	443a      	add	r2, r7
   18cb2:	4296      	cmp	r6, r2
   18cb4:	bf38      	it	cc
   18cb6:	4616      	movcc	r6, r2
   18cb8:	055b      	lsls	r3, r3, #21
   18cba:	d50f      	bpl.n	18cdc <__ssputs_r+0x5e>
   18cbc:	4631      	mov	r1, r6
   18cbe:	f7ff fee9 	bl	18a94 <_malloc_r>
   18cc2:	4605      	mov	r5, r0
   18cc4:	b198      	cbz	r0, 18cee <__ssputs_r+0x70>
   18cc6:	6921      	ldr	r1, [r4, #16]
   18cc8:	4642      	mov	r2, r8
   18cca:	f7ff fe73 	bl	189b4 <memcpy>
   18cce:	89a3      	ldrh	r3, [r4, #12]
   18cd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   18cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18cd8:	81a3      	strh	r3, [r4, #12]
   18cda:	e013      	b.n	18d04 <__ssputs_r+0x86>
   18cdc:	4632      	mov	r2, r6
   18cde:	f000 fd75 	bl	197cc <_realloc_r>
   18ce2:	4605      	mov	r5, r0
   18ce4:	b970      	cbnz	r0, 18d04 <__ssputs_r+0x86>
   18ce6:	4648      	mov	r0, r9
   18ce8:	6921      	ldr	r1, [r4, #16]
   18cea:	f7ff fe8f 	bl	18a0c <_free_r>
   18cee:	230c      	movs	r3, #12
   18cf0:	f8c9 3000 	str.w	r3, [r9]
   18cf4:	89a3      	ldrh	r3, [r4, #12]
   18cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18cfa:	81a3      	strh	r3, [r4, #12]
   18cfc:	f04f 30ff 	mov.w	r0, #4294967295
   18d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d04:	6125      	str	r5, [r4, #16]
   18d06:	6166      	str	r6, [r4, #20]
   18d08:	4445      	add	r5, r8
   18d0a:	ebc8 0606 	rsb	r6, r8, r6
   18d0e:	6025      	str	r5, [r4, #0]
   18d10:	60a6      	str	r6, [r4, #8]
   18d12:	463d      	mov	r5, r7
   18d14:	42af      	cmp	r7, r5
   18d16:	d200      	bcs.n	18d1a <__ssputs_r+0x9c>
   18d18:	463d      	mov	r5, r7
   18d1a:	462a      	mov	r2, r5
   18d1c:	6820      	ldr	r0, [r4, #0]
   18d1e:	4651      	mov	r1, sl
   18d20:	f7ff fe51 	bl	189c6 <memmove>
   18d24:	68a3      	ldr	r3, [r4, #8]
   18d26:	1b5b      	subs	r3, r3, r5
   18d28:	60a3      	str	r3, [r4, #8]
   18d2a:	6823      	ldr	r3, [r4, #0]
   18d2c:	441d      	add	r5, r3
   18d2e:	6025      	str	r5, [r4, #0]
   18d30:	2000      	movs	r0, #0
   18d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00018d38 <_svfiprintf_r>:
_svfprintf_r():
   18d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18d3c:	b09d      	sub	sp, #116	; 0x74
   18d3e:	4607      	mov	r7, r0
   18d40:	9303      	str	r3, [sp, #12]
   18d42:	898b      	ldrh	r3, [r1, #12]
   18d44:	061c      	lsls	r4, r3, #24
   18d46:	460d      	mov	r5, r1
   18d48:	4616      	mov	r6, r2
   18d4a:	d50c      	bpl.n	18d66 <_svfiprintf_r+0x2e>
   18d4c:	690b      	ldr	r3, [r1, #16]
   18d4e:	b953      	cbnz	r3, 18d66 <_svfiprintf_r+0x2e>
   18d50:	2140      	movs	r1, #64	; 0x40
   18d52:	f7ff fe9f 	bl	18a94 <_malloc_r>
   18d56:	6028      	str	r0, [r5, #0]
   18d58:	6128      	str	r0, [r5, #16]
   18d5a:	b910      	cbnz	r0, 18d62 <_svfiprintf_r+0x2a>
   18d5c:	230c      	movs	r3, #12
   18d5e:	603b      	str	r3, [r7, #0]
   18d60:	e0c8      	b.n	18ef4 <_svfiprintf_r+0x1bc>
   18d62:	2340      	movs	r3, #64	; 0x40
   18d64:	616b      	str	r3, [r5, #20]
   18d66:	2300      	movs	r3, #0
   18d68:	9309      	str	r3, [sp, #36]	; 0x24
   18d6a:	2320      	movs	r3, #32
   18d6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   18d70:	2330      	movs	r3, #48	; 0x30
   18d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   18d76:	4633      	mov	r3, r6
   18d78:	461c      	mov	r4, r3
   18d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   18d7e:	b91a      	cbnz	r2, 18d88 <_svfiprintf_r+0x50>
   18d80:	ebb4 0906 	subs.w	r9, r4, r6
   18d84:	d00f      	beq.n	18da6 <_svfiprintf_r+0x6e>
   18d86:	e002      	b.n	18d8e <_svfiprintf_r+0x56>
   18d88:	2a25      	cmp	r2, #37	; 0x25
   18d8a:	d1f5      	bne.n	18d78 <_svfiprintf_r+0x40>
   18d8c:	e7f8      	b.n	18d80 <_svfiprintf_r+0x48>
   18d8e:	4638      	mov	r0, r7
   18d90:	4629      	mov	r1, r5
   18d92:	4632      	mov	r2, r6
   18d94:	464b      	mov	r3, r9
   18d96:	f7ff ff72 	bl	18c7e <__ssputs_r>
   18d9a:	3001      	adds	r0, #1
   18d9c:	f000 80a5 	beq.w	18eea <_svfiprintf_r+0x1b2>
   18da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18da2:	444b      	add	r3, r9
   18da4:	9309      	str	r3, [sp, #36]	; 0x24
   18da6:	7823      	ldrb	r3, [r4, #0]
   18da8:	2b00      	cmp	r3, #0
   18daa:	f000 809e 	beq.w	18eea <_svfiprintf_r+0x1b2>
   18dae:	2300      	movs	r3, #0
   18db0:	f04f 32ff 	mov.w	r2, #4294967295
   18db4:	9304      	str	r3, [sp, #16]
   18db6:	9307      	str	r3, [sp, #28]
   18db8:	9205      	str	r2, [sp, #20]
   18dba:	9306      	str	r3, [sp, #24]
   18dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   18dc0:	931a      	str	r3, [sp, #104]	; 0x68
   18dc2:	f104 0901 	add.w	r9, r4, #1
   18dc6:	464c      	mov	r4, r9
   18dc8:	4e4d      	ldr	r6, [pc, #308]	; (18f00 <_svfiprintf_r+0x1c8>)
   18dca:	7821      	ldrb	r1, [r4, #0]
   18dcc:	4630      	mov	r0, r6
   18dce:	2205      	movs	r2, #5
   18dd0:	f7ff fdd2 	bl	18978 <memchr>
   18dd4:	f109 0901 	add.w	r9, r9, #1
   18dd8:	9b04      	ldr	r3, [sp, #16]
   18dda:	b128      	cbz	r0, 18de8 <_svfiprintf_r+0xb0>
   18ddc:	1b86      	subs	r6, r0, r6
   18dde:	2001      	movs	r0, #1
   18de0:	40b0      	lsls	r0, r6
   18de2:	4303      	orrs	r3, r0
   18de4:	9304      	str	r3, [sp, #16]
   18de6:	e7ee      	b.n	18dc6 <_svfiprintf_r+0x8e>
   18de8:	06d9      	lsls	r1, r3, #27
   18dea:	bf44      	itt	mi
   18dec:	2220      	movmi	r2, #32
   18dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18df2:	071a      	lsls	r2, r3, #28
   18df4:	bf44      	itt	mi
   18df6:	222b      	movmi	r2, #43	; 0x2b
   18df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   18dfc:	7822      	ldrb	r2, [r4, #0]
   18dfe:	2a2a      	cmp	r2, #42	; 0x2a
   18e00:	d002      	beq.n	18e08 <_svfiprintf_r+0xd0>
   18e02:	9b07      	ldr	r3, [sp, #28]
   18e04:	4621      	mov	r1, r4
   18e06:	e00e      	b.n	18e26 <_svfiprintf_r+0xee>
   18e08:	9a03      	ldr	r2, [sp, #12]
   18e0a:	1d11      	adds	r1, r2, #4
   18e0c:	6812      	ldr	r2, [r2, #0]
   18e0e:	9103      	str	r1, [sp, #12]
   18e10:	2a00      	cmp	r2, #0
   18e12:	db01      	blt.n	18e18 <_svfiprintf_r+0xe0>
   18e14:	9207      	str	r2, [sp, #28]
   18e16:	e004      	b.n	18e22 <_svfiprintf_r+0xea>
   18e18:	4252      	negs	r2, r2
   18e1a:	f043 0302 	orr.w	r3, r3, #2
   18e1e:	9207      	str	r2, [sp, #28]
   18e20:	9304      	str	r3, [sp, #16]
   18e22:	3401      	adds	r4, #1
   18e24:	e00a      	b.n	18e3c <_svfiprintf_r+0x104>
   18e26:	460c      	mov	r4, r1
   18e28:	3101      	adds	r1, #1
   18e2a:	7822      	ldrb	r2, [r4, #0]
   18e2c:	3a30      	subs	r2, #48	; 0x30
   18e2e:	2a09      	cmp	r2, #9
   18e30:	d803      	bhi.n	18e3a <_svfiprintf_r+0x102>
   18e32:	200a      	movs	r0, #10
   18e34:	fb00 2303 	mla	r3, r0, r3, r2
   18e38:	e7f5      	b.n	18e26 <_svfiprintf_r+0xee>
   18e3a:	9307      	str	r3, [sp, #28]
   18e3c:	7823      	ldrb	r3, [r4, #0]
   18e3e:	2b2e      	cmp	r3, #46	; 0x2e
   18e40:	d11a      	bne.n	18e78 <_svfiprintf_r+0x140>
   18e42:	7863      	ldrb	r3, [r4, #1]
   18e44:	2b2a      	cmp	r3, #42	; 0x2a
   18e46:	d10a      	bne.n	18e5e <_svfiprintf_r+0x126>
   18e48:	9b03      	ldr	r3, [sp, #12]
   18e4a:	1d1a      	adds	r2, r3, #4
   18e4c:	681b      	ldr	r3, [r3, #0]
   18e4e:	9203      	str	r2, [sp, #12]
   18e50:	2b00      	cmp	r3, #0
   18e52:	f104 0402 	add.w	r4, r4, #2
   18e56:	bfb8      	it	lt
   18e58:	f04f 33ff 	movlt.w	r3, #4294967295
   18e5c:	e00b      	b.n	18e76 <_svfiprintf_r+0x13e>
   18e5e:	1c61      	adds	r1, r4, #1
   18e60:	2300      	movs	r3, #0
   18e62:	460c      	mov	r4, r1
   18e64:	3101      	adds	r1, #1
   18e66:	7822      	ldrb	r2, [r4, #0]
   18e68:	3a30      	subs	r2, #48	; 0x30
   18e6a:	2a09      	cmp	r2, #9
   18e6c:	d803      	bhi.n	18e76 <_svfiprintf_r+0x13e>
   18e6e:	200a      	movs	r0, #10
   18e70:	fb00 2303 	mla	r3, r0, r3, r2
   18e74:	e7f5      	b.n	18e62 <_svfiprintf_r+0x12a>
   18e76:	9305      	str	r3, [sp, #20]
   18e78:	4e22      	ldr	r6, [pc, #136]	; (18f04 <_svfiprintf_r+0x1cc>)
   18e7a:	7821      	ldrb	r1, [r4, #0]
   18e7c:	4630      	mov	r0, r6
   18e7e:	2203      	movs	r2, #3
   18e80:	f7ff fd7a 	bl	18978 <memchr>
   18e84:	b130      	cbz	r0, 18e94 <_svfiprintf_r+0x15c>
   18e86:	1b86      	subs	r6, r0, r6
   18e88:	9b04      	ldr	r3, [sp, #16]
   18e8a:	2040      	movs	r0, #64	; 0x40
   18e8c:	40b0      	lsls	r0, r6
   18e8e:	4303      	orrs	r3, r0
   18e90:	9304      	str	r3, [sp, #16]
   18e92:	3401      	adds	r4, #1
   18e94:	7821      	ldrb	r1, [r4, #0]
   18e96:	481c      	ldr	r0, [pc, #112]	; (18f08 <_svfiprintf_r+0x1d0>)
   18e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18e9c:	2206      	movs	r2, #6
   18e9e:	1c66      	adds	r6, r4, #1
   18ea0:	f7ff fd6a 	bl	18978 <memchr>
   18ea4:	b188      	cbz	r0, 18eca <_svfiprintf_r+0x192>
   18ea6:	4b19      	ldr	r3, [pc, #100]	; (18f0c <_svfiprintf_r+0x1d4>)
   18ea8:	b933      	cbnz	r3, 18eb8 <_svfiprintf_r+0x180>
   18eaa:	9b03      	ldr	r3, [sp, #12]
   18eac:	3307      	adds	r3, #7
   18eae:	f023 0307 	bic.w	r3, r3, #7
   18eb2:	3308      	adds	r3, #8
   18eb4:	9303      	str	r3, [sp, #12]
   18eb6:	e014      	b.n	18ee2 <_svfiprintf_r+0x1aa>
   18eb8:	ab03      	add	r3, sp, #12
   18eba:	9300      	str	r3, [sp, #0]
   18ebc:	4638      	mov	r0, r7
   18ebe:	a904      	add	r1, sp, #16
   18ec0:	462a      	mov	r2, r5
   18ec2:	4b13      	ldr	r3, [pc, #76]	; (18f10 <_svfiprintf_r+0x1d8>)
   18ec4:	f3af 8000 	nop.w
   18ec8:	e007      	b.n	18eda <_svfiprintf_r+0x1a2>
   18eca:	ab03      	add	r3, sp, #12
   18ecc:	9300      	str	r3, [sp, #0]
   18ece:	4638      	mov	r0, r7
   18ed0:	a904      	add	r1, sp, #16
   18ed2:	462a      	mov	r2, r5
   18ed4:	4b0e      	ldr	r3, [pc, #56]	; (18f10 <_svfiprintf_r+0x1d8>)
   18ed6:	f000 f89d 	bl	19014 <_printf_i>
   18eda:	f1b0 3fff 	cmp.w	r0, #4294967295
   18ede:	4680      	mov	r8, r0
   18ee0:	d003      	beq.n	18eea <_svfiprintf_r+0x1b2>
   18ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18ee4:	4443      	add	r3, r8
   18ee6:	9309      	str	r3, [sp, #36]	; 0x24
   18ee8:	e745      	b.n	18d76 <_svfiprintf_r+0x3e>
   18eea:	89ab      	ldrh	r3, [r5, #12]
   18eec:	065b      	lsls	r3, r3, #25
   18eee:	d401      	bmi.n	18ef4 <_svfiprintf_r+0x1bc>
   18ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
   18ef2:	e001      	b.n	18ef8 <_svfiprintf_r+0x1c0>
   18ef4:	f04f 30ff 	mov.w	r0, #4294967295
   18ef8:	b01d      	add	sp, #116	; 0x74
   18efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18efe:	bf00      	nop
   18f00:	0001ad38 	.word	0x0001ad38
   18f04:	0001ad3e 	.word	0x0001ad3e
   18f08:	0001ad42 	.word	0x0001ad42
   18f0c:	00000000 	.word	0x00000000
   18f10:	00018c7f 	.word	0x00018c7f

00018f14 <write>:
write():
   18f14:	b530      	push	{r4, r5, lr}
   18f16:	4613      	mov	r3, r2
   18f18:	4a04      	ldr	r2, [pc, #16]	; (18f2c <write+0x18>)
   18f1a:	4605      	mov	r5, r0
   18f1c:	460c      	mov	r4, r1
   18f1e:	6810      	ldr	r0, [r2, #0]
   18f20:	4629      	mov	r1, r5
   18f22:	4622      	mov	r2, r4
   18f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   18f28:	f000 ba16 	b.w	19358 <_write_r>
   18f2c:	1fff009c 	.word	0x1fff009c

00018f30 <_printf_common>:
_printf_common():
   18f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18f34:	4615      	mov	r5, r2
   18f36:	461f      	mov	r7, r3
   18f38:	688a      	ldr	r2, [r1, #8]
   18f3a:	690b      	ldr	r3, [r1, #16]
   18f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   18f40:	429a      	cmp	r2, r3
   18f42:	bfa8      	it	ge
   18f44:	4613      	movge	r3, r2
   18f46:	602b      	str	r3, [r5, #0]
   18f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   18f4c:	4606      	mov	r6, r0
   18f4e:	460c      	mov	r4, r1
   18f50:	b10a      	cbz	r2, 18f56 <_printf_common+0x26>
   18f52:	3301      	adds	r3, #1
   18f54:	602b      	str	r3, [r5, #0]
   18f56:	6823      	ldr	r3, [r4, #0]
   18f58:	0699      	lsls	r1, r3, #26
   18f5a:	d502      	bpl.n	18f62 <_printf_common+0x32>
   18f5c:	682b      	ldr	r3, [r5, #0]
   18f5e:	3302      	adds	r3, #2
   18f60:	602b      	str	r3, [r5, #0]
   18f62:	6823      	ldr	r3, [r4, #0]
   18f64:	f013 0906 	ands.w	r9, r3, #6
   18f68:	d01d      	beq.n	18fa6 <_printf_common+0x76>
   18f6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   18f6e:	6822      	ldr	r2, [r4, #0]
   18f70:	3300      	adds	r3, #0
   18f72:	bf18      	it	ne
   18f74:	2301      	movne	r3, #1
   18f76:	0692      	lsls	r2, r2, #26
   18f78:	d51f      	bpl.n	18fba <_printf_common+0x8a>
   18f7a:	18e1      	adds	r1, r4, r3
   18f7c:	1c5a      	adds	r2, r3, #1
   18f7e:	2030      	movs	r0, #48	; 0x30
   18f80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   18f84:	4422      	add	r2, r4
   18f86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   18f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   18f8e:	3302      	adds	r3, #2
   18f90:	e013      	b.n	18fba <_printf_common+0x8a>
   18f92:	4630      	mov	r0, r6
   18f94:	4639      	mov	r1, r7
   18f96:	f104 0219 	add.w	r2, r4, #25
   18f9a:	2301      	movs	r3, #1
   18f9c:	47c0      	blx	r8
   18f9e:	3001      	adds	r0, #1
   18fa0:	d007      	beq.n	18fb2 <_printf_common+0x82>
   18fa2:	f109 0901 	add.w	r9, r9, #1
   18fa6:	68e2      	ldr	r2, [r4, #12]
   18fa8:	682b      	ldr	r3, [r5, #0]
   18faa:	1ad3      	subs	r3, r2, r3
   18fac:	4599      	cmp	r9, r3
   18fae:	dbf0      	blt.n	18f92 <_printf_common+0x62>
   18fb0:	e7db      	b.n	18f6a <_printf_common+0x3a>
   18fb2:	f04f 30ff 	mov.w	r0, #4294967295
   18fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18fba:	4630      	mov	r0, r6
   18fbc:	4639      	mov	r1, r7
   18fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
   18fc2:	47c0      	blx	r8
   18fc4:	3001      	adds	r0, #1
   18fc6:	d0f4      	beq.n	18fb2 <_printf_common+0x82>
   18fc8:	6823      	ldr	r3, [r4, #0]
   18fca:	682a      	ldr	r2, [r5, #0]
   18fcc:	68e1      	ldr	r1, [r4, #12]
   18fce:	f003 0306 	and.w	r3, r3, #6
   18fd2:	2b04      	cmp	r3, #4
   18fd4:	bf08      	it	eq
   18fd6:	ebc2 0501 	rsbeq	r5, r2, r1
   18fda:	6923      	ldr	r3, [r4, #16]
   18fdc:	68a2      	ldr	r2, [r4, #8]
   18fde:	bf0c      	ite	eq
   18fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   18fe4:	2500      	movne	r5, #0
   18fe6:	429a      	cmp	r2, r3
   18fe8:	bfc4      	itt	gt
   18fea:	ebc3 0302 	rsbgt	r3, r3, r2
   18fee:	18ed      	addgt	r5, r5, r3
   18ff0:	f04f 0900 	mov.w	r9, #0
   18ff4:	45a9      	cmp	r9, r5
   18ff6:	da0a      	bge.n	1900e <_printf_common+0xde>
   18ff8:	4630      	mov	r0, r6
   18ffa:	4639      	mov	r1, r7
   18ffc:	f104 021a 	add.w	r2, r4, #26
   19000:	2301      	movs	r3, #1
   19002:	47c0      	blx	r8
   19004:	3001      	adds	r0, #1
   19006:	d0d4      	beq.n	18fb2 <_printf_common+0x82>
   19008:	f109 0901 	add.w	r9, r9, #1
   1900c:	e7f2      	b.n	18ff4 <_printf_common+0xc4>
   1900e:	2000      	movs	r0, #0
   19010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019014 <_printf_i>:
_printf_i():
   19014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   19018:	7e0e      	ldrb	r6, [r1, #24]
   1901a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1901c:	2e6e      	cmp	r6, #110	; 0x6e
   1901e:	4680      	mov	r8, r0
   19020:	460c      	mov	r4, r1
   19022:	4691      	mov	r9, r2
   19024:	469a      	mov	sl, r3
   19026:	f101 0043 	add.w	r0, r1, #67	; 0x43
   1902a:	f000 80a5 	beq.w	19178 <_printf_i+0x164>
   1902e:	d811      	bhi.n	19054 <_printf_i+0x40>
   19030:	2e63      	cmp	r6, #99	; 0x63
   19032:	d022      	beq.n	1907a <_printf_i+0x66>
   19034:	d809      	bhi.n	1904a <_printf_i+0x36>
   19036:	2e00      	cmp	r6, #0
   19038:	f000 80af 	beq.w	1919a <_printf_i+0x186>
   1903c:	2e58      	cmp	r6, #88	; 0x58
   1903e:	f040 80bf 	bne.w	191c0 <_printf_i+0x1ac>
   19042:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
   19046:	4a7b      	ldr	r2, [pc, #492]	; (19234 <_printf_i+0x220>)
   19048:	e04f      	b.n	190ea <_printf_i+0xd6>
   1904a:	2e64      	cmp	r6, #100	; 0x64
   1904c:	d01e      	beq.n	1908c <_printf_i+0x78>
   1904e:	2e69      	cmp	r6, #105	; 0x69
   19050:	d01c      	beq.n	1908c <_printf_i+0x78>
   19052:	e0b5      	b.n	191c0 <_printf_i+0x1ac>
   19054:	2e73      	cmp	r6, #115	; 0x73
   19056:	f000 80a4 	beq.w	191a2 <_printf_i+0x18e>
   1905a:	d809      	bhi.n	19070 <_printf_i+0x5c>
   1905c:	2e6f      	cmp	r6, #111	; 0x6f
   1905e:	d02b      	beq.n	190b8 <_printf_i+0xa4>
   19060:	2e70      	cmp	r6, #112	; 0x70
   19062:	f040 80ad 	bne.w	191c0 <_printf_i+0x1ac>
   19066:	680b      	ldr	r3, [r1, #0]
   19068:	f043 0320 	orr.w	r3, r3, #32
   1906c:	600b      	str	r3, [r1, #0]
   1906e:	e038      	b.n	190e2 <_printf_i+0xce>
   19070:	2e75      	cmp	r6, #117	; 0x75
   19072:	d021      	beq.n	190b8 <_printf_i+0xa4>
   19074:	2e78      	cmp	r6, #120	; 0x78
   19076:	d034      	beq.n	190e2 <_printf_i+0xce>
   19078:	e0a2      	b.n	191c0 <_printf_i+0x1ac>
   1907a:	682b      	ldr	r3, [r5, #0]
   1907c:	1d1a      	adds	r2, r3, #4
   1907e:	681b      	ldr	r3, [r3, #0]
   19080:	602a      	str	r2, [r5, #0]
   19082:	f101 0742 	add.w	r7, r1, #66	; 0x42
   19086:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
   1908a:	e09d      	b.n	191c8 <_printf_i+0x1b4>
   1908c:	6822      	ldr	r2, [r4, #0]
   1908e:	682b      	ldr	r3, [r5, #0]
   19090:	f012 0f80 	tst.w	r2, #128	; 0x80
   19094:	d003      	beq.n	1909e <_printf_i+0x8a>
   19096:	1d1a      	adds	r2, r3, #4
   19098:	602a      	str	r2, [r5, #0]
   1909a:	681d      	ldr	r5, [r3, #0]
   1909c:	e005      	b.n	190aa <_printf_i+0x96>
   1909e:	0651      	lsls	r1, r2, #25
   190a0:	d5f9      	bpl.n	19096 <_printf_i+0x82>
   190a2:	1d1a      	adds	r2, r3, #4
   190a4:	602a      	str	r2, [r5, #0]
   190a6:	f9b3 5000 	ldrsh.w	r5, [r3]
   190aa:	2d00      	cmp	r5, #0
   190ac:	da39      	bge.n	19122 <_printf_i+0x10e>
   190ae:	232d      	movs	r3, #45	; 0x2d
   190b0:	426d      	negs	r5, r5
   190b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   190b6:	e034      	b.n	19122 <_printf_i+0x10e>
   190b8:	6822      	ldr	r2, [r4, #0]
   190ba:	682b      	ldr	r3, [r5, #0]
   190bc:	f012 0f80 	tst.w	r2, #128	; 0x80
   190c0:	d003      	beq.n	190ca <_printf_i+0xb6>
   190c2:	1d1a      	adds	r2, r3, #4
   190c4:	602a      	str	r2, [r5, #0]
   190c6:	681d      	ldr	r5, [r3, #0]
   190c8:	e004      	b.n	190d4 <_printf_i+0xc0>
   190ca:	0652      	lsls	r2, r2, #25
   190cc:	d5f9      	bpl.n	190c2 <_printf_i+0xae>
   190ce:	1d1a      	adds	r2, r3, #4
   190d0:	602a      	str	r2, [r5, #0]
   190d2:	881d      	ldrh	r5, [r3, #0]
   190d4:	7e23      	ldrb	r3, [r4, #24]
   190d6:	4a57      	ldr	r2, [pc, #348]	; (19234 <_printf_i+0x220>)
   190d8:	2b6f      	cmp	r3, #111	; 0x6f
   190da:	bf14      	ite	ne
   190dc:	230a      	movne	r3, #10
   190de:	2308      	moveq	r3, #8
   190e0:	e01b      	b.n	1911a <_printf_i+0x106>
   190e2:	2378      	movs	r3, #120	; 0x78
   190e4:	4a54      	ldr	r2, [pc, #336]	; (19238 <_printf_i+0x224>)
   190e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   190ea:	6823      	ldr	r3, [r4, #0]
   190ec:	6829      	ldr	r1, [r5, #0]
   190ee:	f013 0f80 	tst.w	r3, #128	; 0x80
   190f2:	f101 0604 	add.w	r6, r1, #4
   190f6:	602e      	str	r6, [r5, #0]
   190f8:	d001      	beq.n	190fe <_printf_i+0xea>
   190fa:	680d      	ldr	r5, [r1, #0]
   190fc:	e002      	b.n	19104 <_printf_i+0xf0>
   190fe:	065f      	lsls	r7, r3, #25
   19100:	d5fb      	bpl.n	190fa <_printf_i+0xe6>
   19102:	880d      	ldrh	r5, [r1, #0]
   19104:	07de      	lsls	r6, r3, #31
   19106:	bf44      	itt	mi
   19108:	f043 0320 	orrmi.w	r3, r3, #32
   1910c:	6023      	strmi	r3, [r4, #0]
   1910e:	b91d      	cbnz	r5, 19118 <_printf_i+0x104>
   19110:	6823      	ldr	r3, [r4, #0]
   19112:	f023 0320 	bic.w	r3, r3, #32
   19116:	6023      	str	r3, [r4, #0]
   19118:	2310      	movs	r3, #16
   1911a:	2100      	movs	r1, #0
   1911c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   19120:	e001      	b.n	19126 <_printf_i+0x112>
   19122:	4a44      	ldr	r2, [pc, #272]	; (19234 <_printf_i+0x220>)
   19124:	230a      	movs	r3, #10
   19126:	6866      	ldr	r6, [r4, #4]
   19128:	60a6      	str	r6, [r4, #8]
   1912a:	2e00      	cmp	r6, #0
   1912c:	db03      	blt.n	19136 <_printf_i+0x122>
   1912e:	6821      	ldr	r1, [r4, #0]
   19130:	f021 0104 	bic.w	r1, r1, #4
   19134:	6021      	str	r1, [r4, #0]
   19136:	b905      	cbnz	r5, 1913a <_printf_i+0x126>
   19138:	b16e      	cbz	r6, 19156 <_printf_i+0x142>
   1913a:	f104 0142 	add.w	r1, r4, #66	; 0x42
   1913e:	fbb5 f6f3 	udiv	r6, r5, r3
   19142:	fb03 5516 	mls	r5, r3, r6, r5
   19146:	460f      	mov	r7, r1
   19148:	5d55      	ldrb	r5, [r2, r5]
   1914a:	f801 5901 	strb.w	r5, [r1], #-1
   1914e:	4635      	mov	r5, r6
   19150:	2e00      	cmp	r6, #0
   19152:	d1f4      	bne.n	1913e <_printf_i+0x12a>
   19154:	e000      	b.n	19158 <_printf_i+0x144>
   19156:	4607      	mov	r7, r0
   19158:	2b08      	cmp	r3, #8
   1915a:	d10a      	bne.n	19172 <_printf_i+0x15e>
   1915c:	6823      	ldr	r3, [r4, #0]
   1915e:	07dd      	lsls	r5, r3, #31
   19160:	d507      	bpl.n	19172 <_printf_i+0x15e>
   19162:	6862      	ldr	r2, [r4, #4]
   19164:	6923      	ldr	r3, [r4, #16]
   19166:	429a      	cmp	r2, r3
   19168:	dc03      	bgt.n	19172 <_printf_i+0x15e>
   1916a:	2330      	movs	r3, #48	; 0x30
   1916c:	f807 3c01 	strb.w	r3, [r7, #-1]
   19170:	3f01      	subs	r7, #1
   19172:	1bc0      	subs	r0, r0, r7
   19174:	6120      	str	r0, [r4, #16]
   19176:	e02c      	b.n	191d2 <_printf_i+0x1be>
   19178:	6809      	ldr	r1, [r1, #0]
   1917a:	682b      	ldr	r3, [r5, #0]
   1917c:	6962      	ldr	r2, [r4, #20]
   1917e:	f011 0f80 	tst.w	r1, #128	; 0x80
   19182:	d004      	beq.n	1918e <_printf_i+0x17a>
   19184:	1d19      	adds	r1, r3, #4
   19186:	6029      	str	r1, [r5, #0]
   19188:	681b      	ldr	r3, [r3, #0]
   1918a:	601a      	str	r2, [r3, #0]
   1918c:	e005      	b.n	1919a <_printf_i+0x186>
   1918e:	0649      	lsls	r1, r1, #25
   19190:	d5f8      	bpl.n	19184 <_printf_i+0x170>
   19192:	1d19      	adds	r1, r3, #4
   19194:	6029      	str	r1, [r5, #0]
   19196:	681b      	ldr	r3, [r3, #0]
   19198:	801a      	strh	r2, [r3, #0]
   1919a:	2300      	movs	r3, #0
   1919c:	6123      	str	r3, [r4, #16]
   1919e:	4607      	mov	r7, r0
   191a0:	e017      	b.n	191d2 <_printf_i+0x1be>
   191a2:	682b      	ldr	r3, [r5, #0]
   191a4:	1d1a      	adds	r2, r3, #4
   191a6:	602a      	str	r2, [r5, #0]
   191a8:	681f      	ldr	r7, [r3, #0]
   191aa:	4638      	mov	r0, r7
   191ac:	f7ff fd48 	bl	18c40 <strlen>
   191b0:	6863      	ldr	r3, [r4, #4]
   191b2:	6120      	str	r0, [r4, #16]
   191b4:	4298      	cmp	r0, r3
   191b6:	bf88      	it	hi
   191b8:	6123      	strhi	r3, [r4, #16]
   191ba:	6923      	ldr	r3, [r4, #16]
   191bc:	6063      	str	r3, [r4, #4]
   191be:	e005      	b.n	191cc <_printf_i+0x1b8>
   191c0:	f104 0742 	add.w	r7, r4, #66	; 0x42
   191c4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
   191c8:	2301      	movs	r3, #1
   191ca:	6123      	str	r3, [r4, #16]
   191cc:	2300      	movs	r3, #0
   191ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   191d2:	f8cd a000 	str.w	sl, [sp]
   191d6:	4640      	mov	r0, r8
   191d8:	4621      	mov	r1, r4
   191da:	aa03      	add	r2, sp, #12
   191dc:	464b      	mov	r3, r9
   191de:	f7ff fea7 	bl	18f30 <_printf_common>
   191e2:	3001      	adds	r0, #1
   191e4:	d102      	bne.n	191ec <_printf_i+0x1d8>
   191e6:	f04f 30ff 	mov.w	r0, #4294967295
   191ea:	e01f      	b.n	1922c <_printf_i+0x218>
   191ec:	4640      	mov	r0, r8
   191ee:	4649      	mov	r1, r9
   191f0:	463a      	mov	r2, r7
   191f2:	6923      	ldr	r3, [r4, #16]
   191f4:	47d0      	blx	sl
   191f6:	3001      	adds	r0, #1
   191f8:	d0f5      	beq.n	191e6 <_printf_i+0x1d2>
   191fa:	6823      	ldr	r3, [r4, #0]
   191fc:	079b      	lsls	r3, r3, #30
   191fe:	d405      	bmi.n	1920c <_printf_i+0x1f8>
   19200:	68e0      	ldr	r0, [r4, #12]
   19202:	9b03      	ldr	r3, [sp, #12]
   19204:	4298      	cmp	r0, r3
   19206:	bfb8      	it	lt
   19208:	4618      	movlt	r0, r3
   1920a:	e00f      	b.n	1922c <_printf_i+0x218>
   1920c:	2500      	movs	r5, #0
   1920e:	68e2      	ldr	r2, [r4, #12]
   19210:	9b03      	ldr	r3, [sp, #12]
   19212:	1ad3      	subs	r3, r2, r3
   19214:	429d      	cmp	r5, r3
   19216:	daf3      	bge.n	19200 <_printf_i+0x1ec>
   19218:	4640      	mov	r0, r8
   1921a:	4649      	mov	r1, r9
   1921c:	f104 0219 	add.w	r2, r4, #25
   19220:	2301      	movs	r3, #1
   19222:	47d0      	blx	sl
   19224:	3001      	adds	r0, #1
   19226:	d0de      	beq.n	191e6 <_printf_i+0x1d2>
   19228:	3501      	adds	r5, #1
   1922a:	e7f0      	b.n	1920e <_printf_i+0x1fa>
   1922c:	b004      	add	sp, #16
   1922e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19232:	bf00      	nop
   19234:	0001ad49 	.word	0x0001ad49
   19238:	0001ad5a 	.word	0x0001ad5a

0001923c <_vsniprintf_r>:
_vsnprintf_r():
   1923c:	b530      	push	{r4, r5, lr}
   1923e:	1e14      	subs	r4, r2, #0
   19240:	b09b      	sub	sp, #108	; 0x6c
   19242:	4605      	mov	r5, r0
   19244:	da04      	bge.n	19250 <_vsniprintf_r+0x14>
   19246:	238b      	movs	r3, #139	; 0x8b
   19248:	6003      	str	r3, [r0, #0]
   1924a:	f04f 30ff 	mov.w	r0, #4294967295
   1924e:	e01c      	b.n	1928a <_vsniprintf_r+0x4e>
   19250:	f44f 7202 	mov.w	r2, #520	; 0x208
   19254:	9100      	str	r1, [sp, #0]
   19256:	9104      	str	r1, [sp, #16]
   19258:	f8ad 200c 	strh.w	r2, [sp, #12]
   1925c:	bf14      	ite	ne
   1925e:	f104 31ff 	addne.w	r1, r4, #4294967295
   19262:	4621      	moveq	r1, r4
   19264:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19268:	9102      	str	r1, [sp, #8]
   1926a:	9105      	str	r1, [sp, #20]
   1926c:	f8ad 200e 	strh.w	r2, [sp, #14]
   19270:	4669      	mov	r1, sp
   19272:	461a      	mov	r2, r3
   19274:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   19276:	f7ff fd5f 	bl	18d38 <_svfiprintf_r>
   1927a:	1c43      	adds	r3, r0, #1
   1927c:	bfbc      	itt	lt
   1927e:	238b      	movlt	r3, #139	; 0x8b
   19280:	602b      	strlt	r3, [r5, #0]
   19282:	b114      	cbz	r4, 1928a <_vsniprintf_r+0x4e>
   19284:	9b00      	ldr	r3, [sp, #0]
   19286:	2200      	movs	r2, #0
   19288:	701a      	strb	r2, [r3, #0]
   1928a:	b01b      	add	sp, #108	; 0x6c
   1928c:	bd30      	pop	{r4, r5, pc}
	...

00019290 <vsniprintf>:
vsnprintf():
   19290:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19292:	9300      	str	r3, [sp, #0]
   19294:	4b05      	ldr	r3, [pc, #20]	; (192ac <vsniprintf+0x1c>)
   19296:	4606      	mov	r6, r0
   19298:	460d      	mov	r5, r1
   1929a:	4614      	mov	r4, r2
   1929c:	6818      	ldr	r0, [r3, #0]
   1929e:	4631      	mov	r1, r6
   192a0:	462a      	mov	r2, r5
   192a2:	4623      	mov	r3, r4
   192a4:	f7ff ffca 	bl	1923c <_vsniprintf_r>
   192a8:	b002      	add	sp, #8
   192aa:	bd70      	pop	{r4, r5, r6, pc}
   192ac:	1fff009c 	.word	0x1fff009c

000192b0 <__swbuf_r>:
__swbuf_r():
   192b0:	b570      	push	{r4, r5, r6, lr}
   192b2:	460e      	mov	r6, r1
   192b4:	4614      	mov	r4, r2
   192b6:	4605      	mov	r5, r0
   192b8:	b118      	cbz	r0, 192c2 <__swbuf_r+0x12>
   192ba:	6983      	ldr	r3, [r0, #24]
   192bc:	b90b      	cbnz	r3, 192c2 <__swbuf_r+0x12>
   192be:	f000 f9cd 	bl	1965c <__sinit>
   192c2:	4b22      	ldr	r3, [pc, #136]	; (1934c <__swbuf_r+0x9c>)
   192c4:	429c      	cmp	r4, r3
   192c6:	d101      	bne.n	192cc <__swbuf_r+0x1c>
   192c8:	686c      	ldr	r4, [r5, #4]
   192ca:	e008      	b.n	192de <__swbuf_r+0x2e>
   192cc:	4b20      	ldr	r3, [pc, #128]	; (19350 <__swbuf_r+0xa0>)
   192ce:	429c      	cmp	r4, r3
   192d0:	d101      	bne.n	192d6 <__swbuf_r+0x26>
   192d2:	68ac      	ldr	r4, [r5, #8]
   192d4:	e003      	b.n	192de <__swbuf_r+0x2e>
   192d6:	4b1f      	ldr	r3, [pc, #124]	; (19354 <__swbuf_r+0xa4>)
   192d8:	429c      	cmp	r4, r3
   192da:	bf08      	it	eq
   192dc:	68ec      	ldreq	r4, [r5, #12]
   192de:	69a3      	ldr	r3, [r4, #24]
   192e0:	60a3      	str	r3, [r4, #8]
   192e2:	89a3      	ldrh	r3, [r4, #12]
   192e4:	071a      	lsls	r2, r3, #28
   192e6:	d509      	bpl.n	192fc <__swbuf_r+0x4c>
   192e8:	6923      	ldr	r3, [r4, #16]
   192ea:	b13b      	cbz	r3, 192fc <__swbuf_r+0x4c>
   192ec:	6923      	ldr	r3, [r4, #16]
   192ee:	6820      	ldr	r0, [r4, #0]
   192f0:	1ac0      	subs	r0, r0, r3
   192f2:	6963      	ldr	r3, [r4, #20]
   192f4:	4298      	cmp	r0, r3
   192f6:	b2f6      	uxtb	r6, r6
   192f8:	db0f      	blt.n	1931a <__swbuf_r+0x6a>
   192fa:	e008      	b.n	1930e <__swbuf_r+0x5e>
   192fc:	4628      	mov	r0, r5
   192fe:	4621      	mov	r1, r4
   19300:	f000 f83c 	bl	1937c <__swsetup_r>
   19304:	2800      	cmp	r0, #0
   19306:	d0f1      	beq.n	192ec <__swbuf_r+0x3c>
   19308:	f04f 30ff 	mov.w	r0, #4294967295
   1930c:	bd70      	pop	{r4, r5, r6, pc}
   1930e:	4628      	mov	r0, r5
   19310:	4621      	mov	r1, r4
   19312:	f000 f925 	bl	19560 <_fflush_r>
   19316:	2800      	cmp	r0, #0
   19318:	d1f6      	bne.n	19308 <__swbuf_r+0x58>
   1931a:	68a3      	ldr	r3, [r4, #8]
   1931c:	3b01      	subs	r3, #1
   1931e:	60a3      	str	r3, [r4, #8]
   19320:	6823      	ldr	r3, [r4, #0]
   19322:	1c5a      	adds	r2, r3, #1
   19324:	6022      	str	r2, [r4, #0]
   19326:	701e      	strb	r6, [r3, #0]
   19328:	6963      	ldr	r3, [r4, #20]
   1932a:	3001      	adds	r0, #1
   1932c:	4298      	cmp	r0, r3
   1932e:	d004      	beq.n	1933a <__swbuf_r+0x8a>
   19330:	89a3      	ldrh	r3, [r4, #12]
   19332:	07db      	lsls	r3, r3, #31
   19334:	d507      	bpl.n	19346 <__swbuf_r+0x96>
   19336:	2e0a      	cmp	r6, #10
   19338:	d105      	bne.n	19346 <__swbuf_r+0x96>
   1933a:	4628      	mov	r0, r5
   1933c:	4621      	mov	r1, r4
   1933e:	f000 f90f 	bl	19560 <_fflush_r>
   19342:	2800      	cmp	r0, #0
   19344:	d1e0      	bne.n	19308 <__swbuf_r+0x58>
   19346:	4630      	mov	r0, r6
   19348:	bd70      	pop	{r4, r5, r6, pc}
   1934a:	bf00      	nop
   1934c:	0001ad6c 	.word	0x0001ad6c
   19350:	0001ad8c 	.word	0x0001ad8c
   19354:	0001adac 	.word	0x0001adac

00019358 <_write_r>:
_write_r():
   19358:	b538      	push	{r3, r4, r5, lr}
   1935a:	4c07      	ldr	r4, [pc, #28]	; (19378 <_write_r+0x20>)
   1935c:	4605      	mov	r5, r0
   1935e:	2000      	movs	r0, #0
   19360:	6020      	str	r0, [r4, #0]
   19362:	4608      	mov	r0, r1
   19364:	4611      	mov	r1, r2
   19366:	461a      	mov	r2, r3
   19368:	f000 fb4c 	bl	19a04 <_write>
   1936c:	1c43      	adds	r3, r0, #1
   1936e:	d102      	bne.n	19376 <_write_r+0x1e>
   19370:	6823      	ldr	r3, [r4, #0]
   19372:	b103      	cbz	r3, 19376 <_write_r+0x1e>
   19374:	602b      	str	r3, [r5, #0]
   19376:	bd38      	pop	{r3, r4, r5, pc}
   19378:	1fff0348 	.word	0x1fff0348

0001937c <__swsetup_r>:
__swsetup_r():
   1937c:	4b32      	ldr	r3, [pc, #200]	; (19448 <__swsetup_r+0xcc>)
   1937e:	b570      	push	{r4, r5, r6, lr}
   19380:	681d      	ldr	r5, [r3, #0]
   19382:	4606      	mov	r6, r0
   19384:	460c      	mov	r4, r1
   19386:	b125      	cbz	r5, 19392 <__swsetup_r+0x16>
   19388:	69ab      	ldr	r3, [r5, #24]
   1938a:	b913      	cbnz	r3, 19392 <__swsetup_r+0x16>
   1938c:	4628      	mov	r0, r5
   1938e:	f000 f965 	bl	1965c <__sinit>
   19392:	4b2e      	ldr	r3, [pc, #184]	; (1944c <__swsetup_r+0xd0>)
   19394:	429c      	cmp	r4, r3
   19396:	d101      	bne.n	1939c <__swsetup_r+0x20>
   19398:	686c      	ldr	r4, [r5, #4]
   1939a:	e008      	b.n	193ae <__swsetup_r+0x32>
   1939c:	4b2c      	ldr	r3, [pc, #176]	; (19450 <__swsetup_r+0xd4>)
   1939e:	429c      	cmp	r4, r3
   193a0:	d101      	bne.n	193a6 <__swsetup_r+0x2a>
   193a2:	68ac      	ldr	r4, [r5, #8]
   193a4:	e003      	b.n	193ae <__swsetup_r+0x32>
   193a6:	4b2b      	ldr	r3, [pc, #172]	; (19454 <__swsetup_r+0xd8>)
   193a8:	429c      	cmp	r4, r3
   193aa:	bf08      	it	eq
   193ac:	68ec      	ldreq	r4, [r5, #12]
   193ae:	89a2      	ldrh	r2, [r4, #12]
   193b0:	b293      	uxth	r3, r2
   193b2:	0719      	lsls	r1, r3, #28
   193b4:	d420      	bmi.n	193f8 <__swsetup_r+0x7c>
   193b6:	06dd      	lsls	r5, r3, #27
   193b8:	d405      	bmi.n	193c6 <__swsetup_r+0x4a>
   193ba:	2309      	movs	r3, #9
   193bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   193c0:	6033      	str	r3, [r6, #0]
   193c2:	81a2      	strh	r2, [r4, #12]
   193c4:	e03b      	b.n	1943e <__swsetup_r+0xc2>
   193c6:	0758      	lsls	r0, r3, #29
   193c8:	d512      	bpl.n	193f0 <__swsetup_r+0x74>
   193ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   193cc:	b141      	cbz	r1, 193e0 <__swsetup_r+0x64>
   193ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
   193d2:	4299      	cmp	r1, r3
   193d4:	d002      	beq.n	193dc <__swsetup_r+0x60>
   193d6:	4630      	mov	r0, r6
   193d8:	f7ff fb18 	bl	18a0c <_free_r>
   193dc:	2300      	movs	r3, #0
   193de:	6363      	str	r3, [r4, #52]	; 0x34
   193e0:	89a3      	ldrh	r3, [r4, #12]
   193e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   193e6:	81a3      	strh	r3, [r4, #12]
   193e8:	2300      	movs	r3, #0
   193ea:	6063      	str	r3, [r4, #4]
   193ec:	6923      	ldr	r3, [r4, #16]
   193ee:	6023      	str	r3, [r4, #0]
   193f0:	89a3      	ldrh	r3, [r4, #12]
   193f2:	f043 0308 	orr.w	r3, r3, #8
   193f6:	81a3      	strh	r3, [r4, #12]
   193f8:	6923      	ldr	r3, [r4, #16]
   193fa:	b94b      	cbnz	r3, 19410 <__swsetup_r+0x94>
   193fc:	89a3      	ldrh	r3, [r4, #12]
   193fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
   19402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   19406:	d003      	beq.n	19410 <__swsetup_r+0x94>
   19408:	4630      	mov	r0, r6
   1940a:	4621      	mov	r1, r4
   1940c:	f000 f990 	bl	19730 <__smakebuf_r>
   19410:	89a3      	ldrh	r3, [r4, #12]
   19412:	f013 0201 	ands.w	r2, r3, #1
   19416:	d005      	beq.n	19424 <__swsetup_r+0xa8>
   19418:	2200      	movs	r2, #0
   1941a:	60a2      	str	r2, [r4, #8]
   1941c:	6962      	ldr	r2, [r4, #20]
   1941e:	4252      	negs	r2, r2
   19420:	61a2      	str	r2, [r4, #24]
   19422:	e003      	b.n	1942c <__swsetup_r+0xb0>
   19424:	0799      	lsls	r1, r3, #30
   19426:	bf58      	it	pl
   19428:	6962      	ldrpl	r2, [r4, #20]
   1942a:	60a2      	str	r2, [r4, #8]
   1942c:	6922      	ldr	r2, [r4, #16]
   1942e:	b94a      	cbnz	r2, 19444 <__swsetup_r+0xc8>
   19430:	f003 0080 	and.w	r0, r3, #128	; 0x80
   19434:	b280      	uxth	r0, r0
   19436:	b130      	cbz	r0, 19446 <__swsetup_r+0xca>
   19438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1943c:	81a3      	strh	r3, [r4, #12]
   1943e:	f04f 30ff 	mov.w	r0, #4294967295
   19442:	bd70      	pop	{r4, r5, r6, pc}
   19444:	2000      	movs	r0, #0
   19446:	bd70      	pop	{r4, r5, r6, pc}
   19448:	1fff009c 	.word	0x1fff009c
   1944c:	0001ad6c 	.word	0x0001ad6c
   19450:	0001ad8c 	.word	0x0001ad8c
   19454:	0001adac 	.word	0x0001adac

00019458 <__sflush_r>:
__sflush_r():
   19458:	898a      	ldrh	r2, [r1, #12]
   1945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1945e:	4605      	mov	r5, r0
   19460:	0710      	lsls	r0, r2, #28
   19462:	460c      	mov	r4, r1
   19464:	d457      	bmi.n	19516 <__sflush_r+0xbe>
   19466:	684b      	ldr	r3, [r1, #4]
   19468:	2b00      	cmp	r3, #0
   1946a:	dc02      	bgt.n	19472 <__sflush_r+0x1a>
   1946c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1946e:	2b00      	cmp	r3, #0
   19470:	dd18      	ble.n	194a4 <__sflush_r+0x4c>
   19472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   19474:	b1b6      	cbz	r6, 194a4 <__sflush_r+0x4c>
   19476:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
   1947a:	2300      	movs	r3, #0
   1947c:	b292      	uxth	r2, r2
   1947e:	682f      	ldr	r7, [r5, #0]
   19480:	602b      	str	r3, [r5, #0]
   19482:	b10a      	cbz	r2, 19488 <__sflush_r+0x30>
   19484:	6d62      	ldr	r2, [r4, #84]	; 0x54
   19486:	e010      	b.n	194aa <__sflush_r+0x52>
   19488:	6a21      	ldr	r1, [r4, #32]
   1948a:	4628      	mov	r0, r5
   1948c:	2301      	movs	r3, #1
   1948e:	47b0      	blx	r6
   19490:	1c41      	adds	r1, r0, #1
   19492:	4602      	mov	r2, r0
   19494:	d109      	bne.n	194aa <__sflush_r+0x52>
   19496:	682b      	ldr	r3, [r5, #0]
   19498:	b13b      	cbz	r3, 194aa <__sflush_r+0x52>
   1949a:	2b1d      	cmp	r3, #29
   1949c:	d001      	beq.n	194a2 <__sflush_r+0x4a>
   1949e:	2b16      	cmp	r3, #22
   194a0:	d146      	bne.n	19530 <__sflush_r+0xd8>
   194a2:	602f      	str	r7, [r5, #0]
   194a4:	2000      	movs	r0, #0
   194a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194aa:	89a3      	ldrh	r3, [r4, #12]
   194ac:	075b      	lsls	r3, r3, #29
   194ae:	d505      	bpl.n	194bc <__sflush_r+0x64>
   194b0:	6863      	ldr	r3, [r4, #4]
   194b2:	1ad2      	subs	r2, r2, r3
   194b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   194b6:	b10b      	cbz	r3, 194bc <__sflush_r+0x64>
   194b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   194ba:	1ad2      	subs	r2, r2, r3
   194bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   194be:	6a21      	ldr	r1, [r4, #32]
   194c0:	4628      	mov	r0, r5
   194c2:	2300      	movs	r3, #0
   194c4:	47b0      	blx	r6
   194c6:	1c46      	adds	r6, r0, #1
   194c8:	89a2      	ldrh	r2, [r4, #12]
   194ca:	d105      	bne.n	194d8 <__sflush_r+0x80>
   194cc:	682b      	ldr	r3, [r5, #0]
   194ce:	b11b      	cbz	r3, 194d8 <__sflush_r+0x80>
   194d0:	2b1d      	cmp	r3, #29
   194d2:	d001      	beq.n	194d8 <__sflush_r+0x80>
   194d4:	2b16      	cmp	r3, #22
   194d6:	d119      	bne.n	1950c <__sflush_r+0xb4>
   194d8:	2300      	movs	r3, #0
   194da:	6063      	str	r3, [r4, #4]
   194dc:	04d1      	lsls	r1, r2, #19
   194de:	6923      	ldr	r3, [r4, #16]
   194e0:	6023      	str	r3, [r4, #0]
   194e2:	d504      	bpl.n	194ee <__sflush_r+0x96>
   194e4:	1c42      	adds	r2, r0, #1
   194e6:	d101      	bne.n	194ec <__sflush_r+0x94>
   194e8:	682b      	ldr	r3, [r5, #0]
   194ea:	b903      	cbnz	r3, 194ee <__sflush_r+0x96>
   194ec:	6560      	str	r0, [r4, #84]	; 0x54
   194ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
   194f0:	602f      	str	r7, [r5, #0]
   194f2:	2900      	cmp	r1, #0
   194f4:	d0d6      	beq.n	194a4 <__sflush_r+0x4c>
   194f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   194fa:	4299      	cmp	r1, r3
   194fc:	d002      	beq.n	19504 <__sflush_r+0xac>
   194fe:	4628      	mov	r0, r5
   19500:	f7ff fa84 	bl	18a0c <_free_r>
   19504:	2000      	movs	r0, #0
   19506:	6360      	str	r0, [r4, #52]	; 0x34
   19508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1950c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19510:	81a2      	strh	r2, [r4, #12]
   19512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19516:	690e      	ldr	r6, [r1, #16]
   19518:	2e00      	cmp	r6, #0
   1951a:	d0c3      	beq.n	194a4 <__sflush_r+0x4c>
   1951c:	680b      	ldr	r3, [r1, #0]
   1951e:	600e      	str	r6, [r1, #0]
   19520:	ebc6 0803 	rsb	r8, r6, r3
   19524:	0793      	lsls	r3, r2, #30
   19526:	bf0c      	ite	eq
   19528:	694b      	ldreq	r3, [r1, #20]
   1952a:	2300      	movne	r3, #0
   1952c:	608b      	str	r3, [r1, #8]
   1952e:	e012      	b.n	19556 <__sflush_r+0xfe>
   19530:	89a3      	ldrh	r3, [r4, #12]
   19532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19536:	81a3      	strh	r3, [r4, #12]
   19538:	f04f 30ff 	mov.w	r0, #4294967295
   1953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19540:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   19542:	6a21      	ldr	r1, [r4, #32]
   19544:	4628      	mov	r0, r5
   19546:	4632      	mov	r2, r6
   19548:	4643      	mov	r3, r8
   1954a:	47b8      	blx	r7
   1954c:	2800      	cmp	r0, #0
   1954e:	ddef      	ble.n	19530 <__sflush_r+0xd8>
   19550:	4406      	add	r6, r0
   19552:	ebc0 0808 	rsb	r8, r0, r8
   19556:	f1b8 0f00 	cmp.w	r8, #0
   1955a:	dcf1      	bgt.n	19540 <__sflush_r+0xe8>
   1955c:	e7a2      	b.n	194a4 <__sflush_r+0x4c>
	...

00019560 <_fflush_r>:
_fflush_r():
   19560:	b538      	push	{r3, r4, r5, lr}
   19562:	690b      	ldr	r3, [r1, #16]
   19564:	4605      	mov	r5, r0
   19566:	460c      	mov	r4, r1
   19568:	b1db      	cbz	r3, 195a2 <_fflush_r+0x42>
   1956a:	b118      	cbz	r0, 19574 <_fflush_r+0x14>
   1956c:	6983      	ldr	r3, [r0, #24]
   1956e:	b90b      	cbnz	r3, 19574 <_fflush_r+0x14>
   19570:	f000 f874 	bl	1965c <__sinit>
   19574:	4b0c      	ldr	r3, [pc, #48]	; (195a8 <_fflush_r+0x48>)
   19576:	429c      	cmp	r4, r3
   19578:	d101      	bne.n	1957e <_fflush_r+0x1e>
   1957a:	686c      	ldr	r4, [r5, #4]
   1957c:	e008      	b.n	19590 <_fflush_r+0x30>
   1957e:	4b0b      	ldr	r3, [pc, #44]	; (195ac <_fflush_r+0x4c>)
   19580:	429c      	cmp	r4, r3
   19582:	d101      	bne.n	19588 <_fflush_r+0x28>
   19584:	68ac      	ldr	r4, [r5, #8]
   19586:	e003      	b.n	19590 <_fflush_r+0x30>
   19588:	4b09      	ldr	r3, [pc, #36]	; (195b0 <_fflush_r+0x50>)
   1958a:	429c      	cmp	r4, r3
   1958c:	bf08      	it	eq
   1958e:	68ec      	ldreq	r4, [r5, #12]
   19590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19594:	b12b      	cbz	r3, 195a2 <_fflush_r+0x42>
   19596:	4628      	mov	r0, r5
   19598:	4621      	mov	r1, r4
   1959a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1959e:	f7ff bf5b 	b.w	19458 <__sflush_r>
   195a2:	2000      	movs	r0, #0
   195a4:	bd38      	pop	{r3, r4, r5, pc}
   195a6:	bf00      	nop
   195a8:	0001ad6c 	.word	0x0001ad6c
   195ac:	0001ad8c 	.word	0x0001ad8c
   195b0:	0001adac 	.word	0x0001adac

000195b4 <_cleanup_r>:
_cleanup_r():
   195b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195b6:	4607      	mov	r7, r0
   195b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   195bc:	b194      	cbz	r4, 195e4 <_cleanup_r+0x30>
   195be:	68a5      	ldr	r5, [r4, #8]
   195c0:	6866      	ldr	r6, [r4, #4]
   195c2:	3e01      	subs	r6, #1
   195c4:	d40c      	bmi.n	195e0 <_cleanup_r+0x2c>
   195c6:	89ab      	ldrh	r3, [r5, #12]
   195c8:	2b01      	cmp	r3, #1
   195ca:	d907      	bls.n	195dc <_cleanup_r+0x28>
   195cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   195d0:	3301      	adds	r3, #1
   195d2:	d003      	beq.n	195dc <_cleanup_r+0x28>
   195d4:	4638      	mov	r0, r7
   195d6:	4629      	mov	r1, r5
   195d8:	f7ff ffc2 	bl	19560 <_fflush_r>
   195dc:	3568      	adds	r5, #104	; 0x68
   195de:	e7f0      	b.n	195c2 <_cleanup_r+0xe>
   195e0:	6824      	ldr	r4, [r4, #0]
   195e2:	e7eb      	b.n	195bc <_cleanup_r+0x8>
   195e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000195e8 <std.isra.0>:
std.isra.0():
   195e8:	2300      	movs	r3, #0
   195ea:	b510      	push	{r4, lr}
   195ec:	4604      	mov	r4, r0
   195ee:	6003      	str	r3, [r0, #0]
   195f0:	6043      	str	r3, [r0, #4]
   195f2:	6083      	str	r3, [r0, #8]
   195f4:	8181      	strh	r1, [r0, #12]
   195f6:	6643      	str	r3, [r0, #100]	; 0x64
   195f8:	81c2      	strh	r2, [r0, #14]
   195fa:	6103      	str	r3, [r0, #16]
   195fc:	6143      	str	r3, [r0, #20]
   195fe:	6183      	str	r3, [r0, #24]
   19600:	4619      	mov	r1, r3
   19602:	305c      	adds	r0, #92	; 0x5c
   19604:	2208      	movs	r2, #8
   19606:	f7ff f9f9 	bl	189fc <memset>
   1960a:	4b05      	ldr	r3, [pc, #20]	; (19620 <std.isra.0+0x38>)
   1960c:	6263      	str	r3, [r4, #36]	; 0x24
   1960e:	4b05      	ldr	r3, [pc, #20]	; (19624 <std.isra.0+0x3c>)
   19610:	62a3      	str	r3, [r4, #40]	; 0x28
   19612:	4b05      	ldr	r3, [pc, #20]	; (19628 <std.isra.0+0x40>)
   19614:	62e3      	str	r3, [r4, #44]	; 0x2c
   19616:	4b05      	ldr	r3, [pc, #20]	; (1962c <std.isra.0+0x44>)
   19618:	6224      	str	r4, [r4, #32]
   1961a:	6323      	str	r3, [r4, #48]	; 0x30
   1961c:	bd10      	pop	{r4, pc}
   1961e:	bf00      	nop
   19620:	00019819 	.word	0x00019819
   19624:	0001983b 	.word	0x0001983b
   19628:	00019873 	.word	0x00019873
   1962c:	00019897 	.word	0x00019897

00019630 <__sfmoreglue>:
__sfmoreglue():
   19630:	b570      	push	{r4, r5, r6, lr}
   19632:	1e4b      	subs	r3, r1, #1
   19634:	2568      	movs	r5, #104	; 0x68
   19636:	435d      	muls	r5, r3
   19638:	460e      	mov	r6, r1
   1963a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   1963e:	f7ff fa29 	bl	18a94 <_malloc_r>
   19642:	4604      	mov	r4, r0
   19644:	b140      	cbz	r0, 19658 <__sfmoreglue+0x28>
   19646:	2100      	movs	r1, #0
   19648:	e880 0042 	stmia.w	r0, {r1, r6}
   1964c:	300c      	adds	r0, #12
   1964e:	60a0      	str	r0, [r4, #8]
   19650:	f105 0268 	add.w	r2, r5, #104	; 0x68
   19654:	f7ff f9d2 	bl	189fc <memset>
   19658:	4620      	mov	r0, r4
   1965a:	bd70      	pop	{r4, r5, r6, pc}

0001965c <__sinit>:
__sinit():
   1965c:	6983      	ldr	r3, [r0, #24]
   1965e:	b510      	push	{r4, lr}
   19660:	4604      	mov	r4, r0
   19662:	bb33      	cbnz	r3, 196b2 <__sinit+0x56>
   19664:	6483      	str	r3, [r0, #72]	; 0x48
   19666:	64c3      	str	r3, [r0, #76]	; 0x4c
   19668:	6503      	str	r3, [r0, #80]	; 0x50
   1966a:	4b12      	ldr	r3, [pc, #72]	; (196b4 <__sinit+0x58>)
   1966c:	4a12      	ldr	r2, [pc, #72]	; (196b8 <__sinit+0x5c>)
   1966e:	681b      	ldr	r3, [r3, #0]
   19670:	6282      	str	r2, [r0, #40]	; 0x28
   19672:	4298      	cmp	r0, r3
   19674:	bf04      	itt	eq
   19676:	2301      	moveq	r3, #1
   19678:	6183      	streq	r3, [r0, #24]
   1967a:	f000 f81f 	bl	196bc <__sfp>
   1967e:	6060      	str	r0, [r4, #4]
   19680:	4620      	mov	r0, r4
   19682:	f000 f81b 	bl	196bc <__sfp>
   19686:	60a0      	str	r0, [r4, #8]
   19688:	4620      	mov	r0, r4
   1968a:	f000 f817 	bl	196bc <__sfp>
   1968e:	2104      	movs	r1, #4
   19690:	60e0      	str	r0, [r4, #12]
   19692:	2200      	movs	r2, #0
   19694:	6860      	ldr	r0, [r4, #4]
   19696:	f7ff ffa7 	bl	195e8 <std.isra.0>
   1969a:	68a0      	ldr	r0, [r4, #8]
   1969c:	2109      	movs	r1, #9
   1969e:	2201      	movs	r2, #1
   196a0:	f7ff ffa2 	bl	195e8 <std.isra.0>
   196a4:	68e0      	ldr	r0, [r4, #12]
   196a6:	2112      	movs	r1, #18
   196a8:	2202      	movs	r2, #2
   196aa:	f7ff ff9d 	bl	195e8 <std.isra.0>
   196ae:	2301      	movs	r3, #1
   196b0:	61a3      	str	r3, [r4, #24]
   196b2:	bd10      	pop	{r4, pc}
   196b4:	0001ad34 	.word	0x0001ad34
   196b8:	000195b5 	.word	0x000195b5

000196bc <__sfp>:
__sfp():
   196bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196be:	4b1b      	ldr	r3, [pc, #108]	; (1972c <__sfp+0x70>)
   196c0:	681e      	ldr	r6, [r3, #0]
   196c2:	69b3      	ldr	r3, [r6, #24]
   196c4:	4607      	mov	r7, r0
   196c6:	b913      	cbnz	r3, 196ce <__sfp+0x12>
   196c8:	4630      	mov	r0, r6
   196ca:	f7ff ffc7 	bl	1965c <__sinit>
   196ce:	3648      	adds	r6, #72	; 0x48
   196d0:	68b4      	ldr	r4, [r6, #8]
   196d2:	6873      	ldr	r3, [r6, #4]
   196d4:	3b01      	subs	r3, #1
   196d6:	d404      	bmi.n	196e2 <__sfp+0x26>
   196d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   196dc:	b175      	cbz	r5, 196fc <__sfp+0x40>
   196de:	3468      	adds	r4, #104	; 0x68
   196e0:	e7f8      	b.n	196d4 <__sfp+0x18>
   196e2:	6833      	ldr	r3, [r6, #0]
   196e4:	b92b      	cbnz	r3, 196f2 <__sfp+0x36>
   196e6:	4638      	mov	r0, r7
   196e8:	2104      	movs	r1, #4
   196ea:	f7ff ffa1 	bl	19630 <__sfmoreglue>
   196ee:	6030      	str	r0, [r6, #0]
   196f0:	b108      	cbz	r0, 196f6 <__sfp+0x3a>
   196f2:	6836      	ldr	r6, [r6, #0]
   196f4:	e7ec      	b.n	196d0 <__sfp+0x14>
   196f6:	230c      	movs	r3, #12
   196f8:	603b      	str	r3, [r7, #0]
   196fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19700:	81e3      	strh	r3, [r4, #14]
   19702:	2301      	movs	r3, #1
   19704:	81a3      	strh	r3, [r4, #12]
   19706:	6665      	str	r5, [r4, #100]	; 0x64
   19708:	6025      	str	r5, [r4, #0]
   1970a:	60a5      	str	r5, [r4, #8]
   1970c:	6065      	str	r5, [r4, #4]
   1970e:	6125      	str	r5, [r4, #16]
   19710:	6165      	str	r5, [r4, #20]
   19712:	61a5      	str	r5, [r4, #24]
   19714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   19718:	4629      	mov	r1, r5
   1971a:	2208      	movs	r2, #8
   1971c:	f7ff f96e 	bl	189fc <memset>
   19720:	6365      	str	r5, [r4, #52]	; 0x34
   19722:	63a5      	str	r5, [r4, #56]	; 0x38
   19724:	64a5      	str	r5, [r4, #72]	; 0x48
   19726:	64e5      	str	r5, [r4, #76]	; 0x4c
   19728:	4620      	mov	r0, r4
   1972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1972c:	0001ad34 	.word	0x0001ad34

00019730 <__smakebuf_r>:
__smakebuf_r():
   19730:	b5f0      	push	{r4, r5, r6, r7, lr}
   19732:	898b      	ldrh	r3, [r1, #12]
   19734:	079e      	lsls	r6, r3, #30
   19736:	b091      	sub	sp, #68	; 0x44
   19738:	4605      	mov	r5, r0
   1973a:	460c      	mov	r4, r1
   1973c:	d426      	bmi.n	1978c <__smakebuf_r+0x5c>
   1973e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19742:	2900      	cmp	r1, #0
   19744:	da09      	bge.n	1975a <__smakebuf_r+0x2a>
   19746:	89a3      	ldrh	r3, [r4, #12]
   19748:	f013 0f80 	tst.w	r3, #128	; 0x80
   1974c:	f04f 0700 	mov.w	r7, #0
   19750:	bf14      	ite	ne
   19752:	2640      	movne	r6, #64	; 0x40
   19754:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   19758:	e00d      	b.n	19776 <__smakebuf_r+0x46>
   1975a:	aa01      	add	r2, sp, #4
   1975c:	f000 f8b0 	bl	198c0 <_fstat_r>
   19760:	2800      	cmp	r0, #0
   19762:	dbf0      	blt.n	19746 <__smakebuf_r+0x16>
   19764:	9f02      	ldr	r7, [sp, #8]
   19766:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
   1976a:	f5b7 5100 	subs.w	r1, r7, #8192	; 0x2000
   1976e:	424f      	negs	r7, r1
   19770:	414f      	adcs	r7, r1
   19772:	f44f 6680 	mov.w	r6, #1024	; 0x400
   19776:	4628      	mov	r0, r5
   19778:	4631      	mov	r1, r6
   1977a:	f7ff f98b 	bl	18a94 <_malloc_r>
   1977e:	b960      	cbnz	r0, 1979a <__smakebuf_r+0x6a>
   19780:	89a3      	ldrh	r3, [r4, #12]
   19782:	059a      	lsls	r2, r3, #22
   19784:	d41d      	bmi.n	197c2 <__smakebuf_r+0x92>
   19786:	f043 0302 	orr.w	r3, r3, #2
   1978a:	81a3      	strh	r3, [r4, #12]
   1978c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   19790:	6023      	str	r3, [r4, #0]
   19792:	6123      	str	r3, [r4, #16]
   19794:	2301      	movs	r3, #1
   19796:	6163      	str	r3, [r4, #20]
   19798:	e013      	b.n	197c2 <__smakebuf_r+0x92>
   1979a:	4b0b      	ldr	r3, [pc, #44]	; (197c8 <__smakebuf_r+0x98>)
   1979c:	62ab      	str	r3, [r5, #40]	; 0x28
   1979e:	89a3      	ldrh	r3, [r4, #12]
   197a0:	6020      	str	r0, [r4, #0]
   197a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   197a6:	81a3      	strh	r3, [r4, #12]
   197a8:	6120      	str	r0, [r4, #16]
   197aa:	6166      	str	r6, [r4, #20]
   197ac:	b14f      	cbz	r7, 197c2 <__smakebuf_r+0x92>
   197ae:	4628      	mov	r0, r5
   197b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   197b4:	f000 f896 	bl	198e4 <_isatty_r>
   197b8:	b118      	cbz	r0, 197c2 <__smakebuf_r+0x92>
   197ba:	89a3      	ldrh	r3, [r4, #12]
   197bc:	f043 0301 	orr.w	r3, r3, #1
   197c0:	81a3      	strh	r3, [r4, #12]
   197c2:	b011      	add	sp, #68	; 0x44
   197c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   197c6:	bf00      	nop
   197c8:	000195b5 	.word	0x000195b5

000197cc <_realloc_r>:
_realloc_r():
   197cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197ce:	4606      	mov	r6, r0
   197d0:	4614      	mov	r4, r2
   197d2:	460d      	mov	r5, r1
   197d4:	b921      	cbnz	r1, 197e0 <_realloc_r+0x14>
   197d6:	4611      	mov	r1, r2
   197d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   197dc:	f7ff b95a 	b.w	18a94 <_malloc_r>
   197e0:	b91a      	cbnz	r2, 197ea <_realloc_r+0x1e>
   197e2:	f7ff f913 	bl	18a0c <_free_r>
   197e6:	4620      	mov	r0, r4
   197e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197ea:	f000 f89d 	bl	19928 <_malloc_usable_size_r>
   197ee:	42a0      	cmp	r0, r4
   197f0:	d20e      	bcs.n	19810 <_realloc_r+0x44>
   197f2:	4630      	mov	r0, r6
   197f4:	4621      	mov	r1, r4
   197f6:	f7ff f94d 	bl	18a94 <_malloc_r>
   197fa:	4607      	mov	r7, r0
   197fc:	b150      	cbz	r0, 19814 <_realloc_r+0x48>
   197fe:	4629      	mov	r1, r5
   19800:	4622      	mov	r2, r4
   19802:	f7ff f8d7 	bl	189b4 <memcpy>
   19806:	4630      	mov	r0, r6
   19808:	4629      	mov	r1, r5
   1980a:	f7ff f8ff 	bl	18a0c <_free_r>
   1980e:	e001      	b.n	19814 <_realloc_r+0x48>
   19810:	4628      	mov	r0, r5
   19812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19814:	4638      	mov	r0, r7
   19816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019818 <__sread>:
__sread():
   19818:	b510      	push	{r4, lr}
   1981a:	460c      	mov	r4, r1
   1981c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19820:	f000 f88c 	bl	1993c <_read_r>
   19824:	2800      	cmp	r0, #0
   19826:	db03      	blt.n	19830 <__sread+0x18>
   19828:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1982a:	4403      	add	r3, r0
   1982c:	6563      	str	r3, [r4, #84]	; 0x54
   1982e:	bd10      	pop	{r4, pc}
   19830:	89a3      	ldrh	r3, [r4, #12]
   19832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19836:	81a3      	strh	r3, [r4, #12]
   19838:	bd10      	pop	{r4, pc}

0001983a <__swrite>:
__swrite():
   1983a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1983e:	461d      	mov	r5, r3
   19840:	898b      	ldrh	r3, [r1, #12]
   19842:	05db      	lsls	r3, r3, #23
   19844:	4607      	mov	r7, r0
   19846:	460c      	mov	r4, r1
   19848:	4616      	mov	r6, r2
   1984a:	d505      	bpl.n	19858 <__swrite+0x1e>
   1984c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   19850:	2200      	movs	r2, #0
   19852:	2302      	movs	r3, #2
   19854:	f000 f856 	bl	19904 <_lseek_r>
   19858:	89a3      	ldrh	r3, [r4, #12]
   1985a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1985e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19862:	81a3      	strh	r3, [r4, #12]
   19864:	4638      	mov	r0, r7
   19866:	4632      	mov	r2, r6
   19868:	462b      	mov	r3, r5
   1986a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1986e:	f7ff bd73 	b.w	19358 <_write_r>

00019872 <__sseek>:
__sseek():
   19872:	b510      	push	{r4, lr}
   19874:	460c      	mov	r4, r1
   19876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1987a:	f000 f843 	bl	19904 <_lseek_r>
   1987e:	1c43      	adds	r3, r0, #1
   19880:	89a3      	ldrh	r3, [r4, #12]
   19882:	d103      	bne.n	1988c <__sseek+0x1a>
   19884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19888:	81a3      	strh	r3, [r4, #12]
   1988a:	bd10      	pop	{r4, pc}
   1988c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   19890:	81a3      	strh	r3, [r4, #12]
   19892:	6560      	str	r0, [r4, #84]	; 0x54
   19894:	bd10      	pop	{r4, pc}

00019896 <__sclose>:
__sclose():
   19896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1989a:	f000 b801 	b.w	198a0 <_close_r>
	...

000198a0 <_close_r>:
_close_r():
   198a0:	b538      	push	{r3, r4, r5, lr}
   198a2:	4c06      	ldr	r4, [pc, #24]	; (198bc <_close_r+0x1c>)
   198a4:	2300      	movs	r3, #0
   198a6:	4605      	mov	r5, r0
   198a8:	4608      	mov	r0, r1
   198aa:	6023      	str	r3, [r4, #0]
   198ac:	f000 f858 	bl	19960 <_close>
   198b0:	1c43      	adds	r3, r0, #1
   198b2:	d102      	bne.n	198ba <_close_r+0x1a>
   198b4:	6823      	ldr	r3, [r4, #0]
   198b6:	b103      	cbz	r3, 198ba <_close_r+0x1a>
   198b8:	602b      	str	r3, [r5, #0]
   198ba:	bd38      	pop	{r3, r4, r5, pc}
   198bc:	1fff0348 	.word	0x1fff0348

000198c0 <_fstat_r>:
_fstat_r():
   198c0:	b538      	push	{r3, r4, r5, lr}
   198c2:	4c07      	ldr	r4, [pc, #28]	; (198e0 <_fstat_r+0x20>)
   198c4:	2300      	movs	r3, #0
   198c6:	4605      	mov	r5, r0
   198c8:	4608      	mov	r0, r1
   198ca:	4611      	mov	r1, r2
   198cc:	6023      	str	r3, [r4, #0]
   198ce:	f000 f84f 	bl	19970 <_fstat>
   198d2:	1c43      	adds	r3, r0, #1
   198d4:	d102      	bne.n	198dc <_fstat_r+0x1c>
   198d6:	6823      	ldr	r3, [r4, #0]
   198d8:	b103      	cbz	r3, 198dc <_fstat_r+0x1c>
   198da:	602b      	str	r3, [r5, #0]
   198dc:	bd38      	pop	{r3, r4, r5, pc}
   198de:	bf00      	nop
   198e0:	1fff0348 	.word	0x1fff0348

000198e4 <_isatty_r>:
_isatty_r():
   198e4:	b538      	push	{r3, r4, r5, lr}
   198e6:	4c06      	ldr	r4, [pc, #24]	; (19900 <_isatty_r+0x1c>)
   198e8:	2300      	movs	r3, #0
   198ea:	4605      	mov	r5, r0
   198ec:	4608      	mov	r0, r1
   198ee:	6023      	str	r3, [r4, #0]
   198f0:	f000 f84e 	bl	19990 <_isatty>
   198f4:	1c43      	adds	r3, r0, #1
   198f6:	d102      	bne.n	198fe <_isatty_r+0x1a>
   198f8:	6823      	ldr	r3, [r4, #0]
   198fa:	b103      	cbz	r3, 198fe <_isatty_r+0x1a>
   198fc:	602b      	str	r3, [r5, #0]
   198fe:	bd38      	pop	{r3, r4, r5, pc}
   19900:	1fff0348 	.word	0x1fff0348

00019904 <_lseek_r>:
_lseek_r():
   19904:	b538      	push	{r3, r4, r5, lr}
   19906:	4c07      	ldr	r4, [pc, #28]	; (19924 <_lseek_r+0x20>)
   19908:	4605      	mov	r5, r0
   1990a:	2000      	movs	r0, #0
   1990c:	6020      	str	r0, [r4, #0]
   1990e:	4608      	mov	r0, r1
   19910:	4611      	mov	r1, r2
   19912:	461a      	mov	r2, r3
   19914:	f000 f84c 	bl	199b0 <_lseek>
   19918:	1c43      	adds	r3, r0, #1
   1991a:	d102      	bne.n	19922 <_lseek_r+0x1e>
   1991c:	6823      	ldr	r3, [r4, #0]
   1991e:	b103      	cbz	r3, 19922 <_lseek_r+0x1e>
   19920:	602b      	str	r3, [r5, #0]
   19922:	bd38      	pop	{r3, r4, r5, pc}
   19924:	1fff0348 	.word	0x1fff0348

00019928 <_malloc_usable_size_r>:
_malloc_usable_size_r():
   19928:	f851 0c04 	ldr.w	r0, [r1, #-4]
   1992c:	2800      	cmp	r0, #0
   1992e:	da02      	bge.n	19936 <_malloc_usable_size_r+0xe>
   19930:	3904      	subs	r1, #4
   19932:	580b      	ldr	r3, [r1, r0]
   19934:	4418      	add	r0, r3
   19936:	3804      	subs	r0, #4
   19938:	4770      	bx	lr
	...

0001993c <_read_r>:
_read_r():
   1993c:	b538      	push	{r3, r4, r5, lr}
   1993e:	4c07      	ldr	r4, [pc, #28]	; (1995c <_read_r+0x20>)
   19940:	4605      	mov	r5, r0
   19942:	2000      	movs	r0, #0
   19944:	6020      	str	r0, [r4, #0]
   19946:	4608      	mov	r0, r1
   19948:	4611      	mov	r1, r2
   1994a:	461a      	mov	r2, r3
   1994c:	f000 f838 	bl	199c0 <_read>
   19950:	1c43      	adds	r3, r0, #1
   19952:	d102      	bne.n	1995a <_read_r+0x1e>
   19954:	6823      	ldr	r3, [r4, #0]
   19956:	b103      	cbz	r3, 1995a <_read_r+0x1e>
   19958:	602b      	str	r3, [r5, #0]
   1995a:	bd38      	pop	{r3, r4, r5, pc}
   1995c:	1fff0348 	.word	0x1fff0348

00019960 <_close>:
_close():
   19960:	4b02      	ldr	r3, [pc, #8]	; (1996c <_close+0xc>)
   19962:	2258      	movs	r2, #88	; 0x58
   19964:	601a      	str	r2, [r3, #0]
   19966:	f04f 30ff 	mov.w	r0, #4294967295
   1996a:	4770      	bx	lr
   1996c:	1fff0348 	.word	0x1fff0348

00019970 <_fstat>:
_fstat():
   19970:	4b02      	ldr	r3, [pc, #8]	; (1997c <_fstat+0xc>)
   19972:	2258      	movs	r2, #88	; 0x58
   19974:	601a      	str	r2, [r3, #0]
   19976:	f04f 30ff 	mov.w	r0, #4294967295
   1997a:	4770      	bx	lr
   1997c:	1fff0348 	.word	0x1fff0348

00019980 <_getpid>:
_getpid():
   19980:	4b02      	ldr	r3, [pc, #8]	; (1998c <_getpid+0xc>)
   19982:	2258      	movs	r2, #88	; 0x58
   19984:	601a      	str	r2, [r3, #0]
   19986:	f04f 30ff 	mov.w	r0, #4294967295
   1998a:	4770      	bx	lr
   1998c:	1fff0348 	.word	0x1fff0348

00019990 <_isatty>:
_isatty():
   19990:	4b02      	ldr	r3, [pc, #8]	; (1999c <_isatty+0xc>)
   19992:	2258      	movs	r2, #88	; 0x58
   19994:	601a      	str	r2, [r3, #0]
   19996:	2000      	movs	r0, #0
   19998:	4770      	bx	lr
   1999a:	bf00      	nop
   1999c:	1fff0348 	.word	0x1fff0348

000199a0 <_kill>:
_kill():
   199a0:	4b02      	ldr	r3, [pc, #8]	; (199ac <_kill+0xc>)
   199a2:	2258      	movs	r2, #88	; 0x58
   199a4:	601a      	str	r2, [r3, #0]
   199a6:	f04f 30ff 	mov.w	r0, #4294967295
   199aa:	4770      	bx	lr
   199ac:	1fff0348 	.word	0x1fff0348

000199b0 <_lseek>:
_lseek():
   199b0:	4b02      	ldr	r3, [pc, #8]	; (199bc <_lseek+0xc>)
   199b2:	2258      	movs	r2, #88	; 0x58
   199b4:	601a      	str	r2, [r3, #0]
   199b6:	f04f 30ff 	mov.w	r0, #4294967295
   199ba:	4770      	bx	lr
   199bc:	1fff0348 	.word	0x1fff0348

000199c0 <_read>:
_read():
   199c0:	4b02      	ldr	r3, [pc, #8]	; (199cc <_read+0xc>)
   199c2:	2258      	movs	r2, #88	; 0x58
   199c4:	601a      	str	r2, [r3, #0]
   199c6:	f04f 30ff 	mov.w	r0, #4294967295
   199ca:	4770      	bx	lr
   199cc:	1fff0348 	.word	0x1fff0348

000199d0 <_sbrk>:
_sbrk():
   199d0:	4a09      	ldr	r2, [pc, #36]	; (199f8 <_sbrk+0x28>)
   199d2:	6813      	ldr	r3, [r2, #0]
   199d4:	b163      	cbz	r3, 199f0 <_sbrk+0x20>
   199d6:	4418      	add	r0, r3
   199d8:	4669      	mov	r1, sp
   199da:	4288      	cmp	r0, r1
   199dc:	d802      	bhi.n	199e4 <_sbrk+0x14>
   199de:	6010      	str	r0, [r2, #0]
   199e0:	4618      	mov	r0, r3
   199e2:	4770      	bx	lr
   199e4:	4b05      	ldr	r3, [pc, #20]	; (199fc <_sbrk+0x2c>)
   199e6:	220c      	movs	r2, #12
   199e8:	601a      	str	r2, [r3, #0]
   199ea:	f04f 30ff 	mov.w	r0, #4294967295
   199ee:	4770      	bx	lr
   199f0:	4b03      	ldr	r3, [pc, #12]	; (19a00 <_sbrk+0x30>)
   199f2:	6013      	str	r3, [r2, #0]
   199f4:	e7ef      	b.n	199d6 <_sbrk+0x6>
   199f6:	bf00      	nop
   199f8:	1fff0344 	.word	0x1fff0344
   199fc:	1fff0348 	.word	0x1fff0348
   19a00:	1fff0370 	.word	0x1fff0370

00019a04 <_write>:
_write():
   19a04:	4b02      	ldr	r3, [pc, #8]	; (19a10 <_write+0xc>)
   19a06:	2258      	movs	r2, #88	; 0x58
   19a08:	601a      	str	r2, [r3, #0]
   19a0a:	f04f 30ff 	mov.w	r0, #4294967295
   19a0e:	4770      	bx	lr
   19a10:	1fff0348 	.word	0x1fff0348

00019a14 <_exit>:
_exit():
   19a14:	e7fe      	b.n	19a14 <_exit>
   19a16:	bf00      	nop
$d():
   19a18:	00000010 	.word	0x00000010
   19a1c:	00000001 	.word	0x00000001

00019a20 <standard_subs>:
   19a20:	00000074 0001a570 00000003 0001a570     t...p.......p...
   19a30:	00000003 00000000 00000000 00000061     ............a...
   19a40:	0001a85c 0000000e 0001a85c 0000000e     \.......\.......
   19a50:	0001a86c 00000009 00000062 0001a878     l.......b...x...
   19a60:	00000011 0001a878 00000011 0001a88c     ....x...........
   19a70:	0000000c 00000073 0001a89c 0000000b     ....s...........
   19a80:	0001a8a8 00000046 0001a88c 0000000c     ....F...........
   19a90:	00000069 0001a8f0 0000000c 0001a900     i...............
   19aa0:	00000031 0001a934 0000000d 0000006f     1...4.......o...
   19ab0:	0001a944 0000000c 0001a954 00000031     D.......T...1...
   19ac0:	0001a988 0000000d 00000064 0001a998     ........d.......
   19ad0:	0000000d 0001a9a8 00000032 0001a9dc     ........2.......
   19ae0:	0000000e                                ....

00019ae4 <cplus_demangle_builtin_types>:
   19ae4:	0001abd4 0000000b 0001abd4 0000000b     ................
   19af4:	00000000 0001abe0 00000004 0001abe8     ................
   19b04:	00000007 00000007 0001abf0 00000004     ................
   19b14:	0001abf8 00000004 00000000 0001ac00     ................
   19b24:	00000006 0001ac00 00000006 00000008     ................
   19b34:	0001ac08 0000000b 0001ac08 0000000b     ................
   19b44:	00000008 0001ac14 00000005 0001ac14     ................
   19b54:	00000005 00000008 0001ac1c 0000000a     ................
   19b64:	0001ac1c 0000000a 00000008 0001ac28     ............(...
   19b74:	0000000d 0001ac28 0000000d 00000000     ....(...........
   19b84:	0001ac38 00000003 0001ac38 00000003     8.......8.......
   19b94:	00000001 0001ac3c 0000000c 0001ac4c     ....<.......L...
   19ba4:	00000008 00000002 00000000 00000000     ................
	...
   19bc0:	0001ac58 00000004 0001ac58 00000004     X.......X.......
   19bd0:	00000003 0001ac60 0000000d 0001ac60     ....`.......`...
   19be0:	0000000d 00000004 0001ac70 00000008     ........p.......
   19bf0:	0001ac70 00000008 00000000 0001ac7c     p...........|...
   19c00:	00000011 0001ac7c 00000011 00000000     ....|...........
	...
   19c4c:	0001ac90 00000005 0001ac90 00000005     ................
   19c5c:	00000000 0001ac98 0000000e 0001ac98     ................
   19c6c:	0000000e 00000000 00000000 00000000     ................
	...
   19c88:	0001aca8 00000004 0001aca8 00000004     ................
   19c98:	00000009 0001acb0 00000007 0001abf0     ................
   19ca8:	00000004 00000000 0001acb8 00000009     ................
   19cb8:	0001ac58 00000004 00000005 0001acc4     X...............
   19cc8:	00000012 0001acc4 00000012 00000006     ................
   19cd8:	0001a78c 00000003 0001a78c 00000003     ................
   19ce8:	00000000 0001acd8 00000009 0001acd8     ................
   19cf8:	00000009 00000000 0001ace4 00000009     ................
   19d08:	0001ace4 00000009 00000000 0001acf0     ................
   19d18:	0000000a 0001acf0 0000000a 00000000     ................
   19d28:	0001acfc 00000004 0001acfc 00000004     ................
   19d38:	00000008 0001ad04 00000008 0001ad04     ................
   19d48:	00000008 00000000 0001ad10 00000008     ................
   19d58:	0001ad10 00000008 00000000 0001ad1c     ................
   19d68:	00000011 0001ad1c 00000011 00000000     ................

00019d78 <cplus_demangle_operators>:
   19d78:	0001a9ec 0001a9f0 00000002 00000002     ................
   19d88:	0001a9f4 0001a9f8 00000001 00000002     ................
   19d98:	0001a9fc 0001a830 00000002 00000002     ....0...........
   19da8:	0001a73c 0001aa00 00000001 00000001     <...............
   19db8:	0001aa04 0001aa00 00000001 00000002     ................
   19dc8:	0001aa08 0001aa0c 00000008 00000001     ................
   19dd8:	0001aa18 0001aa0c 00000008 00000001     ................
   19de8:	0001aa1c 0001aa20 0000000a 00000002     .... ...........
   19df8:	0001a580 0001aa2c 00000002 00000002     ....,...........
   19e08:	0001aa30 0001aa34 00000001 00000002     0...4...........
   19e18:	0001aa38 0001aa3c 00000001 00000001     8...<...........
   19e28:	0001aa40 0001aa44 00000002 00000002     @...D...........
   19e38:	0001aa48 0001aa4c 00000009 00000001     H...L...........
   19e48:	0001aa58 0001aa5c 0000000c 00000002     X...\...........
   19e58:	0001aa6c 0001aa70 00000001 00000001     l...p...........
   19e68:	0001aa74 0001aa78 00000007 00000001     t...x...........
   19e78:	0001aa80 0001aa84 00000002 00000002     ................
   19e88:	0001a584 0001aa88 00000001 00000002     ................
   19e98:	0001aa8c 0001aa90 00000001 00000002     ................
   19ea8:	0001aa94 0001aa98 00000002 00000002     ................
   19eb8:	0001aa9c 0001aaa0 00000001 00000002     ................
   19ec8:	0001aaa4 0001aaa8 00000002 00000002     ................
   19ed8:	0001aaac 0001aab0 00000002 00000002     ................
   19ee8:	0001a740 0001a598 00000002 00000001     @...............
   19ef8:	0001aab4 0001a930 00000001 00000002     ....0...........
   19f08:	0001a744 0001a5bc 00000002 00000002     D...............
   19f18:	0001aab8 0001aabc 00000003 00000002     ................
   19f28:	0001ac04 0001aac0 00000002 00000002     ................
   19f38:	0001a57c 0001aac4 0000000b 00000001     |...............
   19f48:	0001aad0 0001aad4 00000002 00000002     ................
   19f58:	0001aad8 0001aadc 00000001 00000002     ................
   19f68:	0001aae0 0001aae4 00000002 00000002     ................
   19f78:	0001aae8 0001aaec 00000002 00000002     ................
   19f88:	0001aaf0 0001aaf4 00000001 00000002     ................
   19f98:	0001aaf8 0001aa70 00000001 00000002     ....p...........
   19fa8:	0001aafc 0001ab00 00000002 00000001     ................
   19fb8:	0001ab04 0001ab08 00000005 00000003     ................
   19fc8:	0001ab10 0001ab14 00000002 00000002     ................
   19fd8:	0001acd4 0001aaf4 00000001 00000001     ................
   19fe8:	0001ab18 0001ab1c 00000001 00000001     ................
   19ff8:	0001ab20 0001ab24 00000003 00000003      ...$...........
   1a008:	0001ab28 0001ab2c 00000002 00000002     (...,...........
   1a018:	0001ab30 0001ab34 00000002 00000002     0...4...........
   1a028:	0001a868 0001ab38 00000001 00000002     h...8...........
   1a038:	0001ab3c 0001ab40 00000002 00000002     <...@...........
   1a048:	0001ab44 0001ab48 00000001 00000002     D...H...........
   1a058:	0001ab4c 0001ab50 00000003 00000002     L...P...........
   1a068:	0001ab54 0001ab58 00000002 00000001     T...X...........
   1a078:	0001ab5c 0001ab48 00000001 00000001     \...H...........
   1a088:	0001a588 0001ab60 00000002 00000002     ....`...........
   1a098:	0001a58c 0001ab64 00000001 00000003     ....d...........
   1a0a8:	0001ab68 0001ab6c 00000002 00000002     h...l...........
   1a0b8:	0001ab70 0001ab74 00000003 00000002     p...t...........
   1a0c8:	0001ab78 0001ab7c 00000010 00000002     x...|...........
   1a0d8:	0001ab90 0001ab94 00000001 00000002     ................
   1a0e8:	0001ab98 0001ab9c 00000002 00000002     ................
   1a0f8:	0001aba0 0001aba4 0000000b 00000002     ................
   1a108:	0001aa28 0001abb0 00000007 00000001     (...............
   1a118:	0001abb8 0001abb0 00000007 00000001     ................
   1a128:	0001abbc 0001abc0 00000005 00000000     ................
   1a138:	0001abc8 0001abcc 00000006 00000001     ................
	...

0001a158 <vtable for COculusHubMain>:
	...
   1a160:	00016c49 00016a61 000167dd 0001680d     Il..aj...g...h..
   1a170:	000167e1 000167e5 000167f9 00000000     .g...g...g......
   1a180:	0a0d7325 00000000 4b325b1b 0000000d     %s.......[2K....
   1a190:	4c55434f 53205355 41465255 48204543     OCULUS SURFACE H
   1a1a0:	0a0d4255 00000000 79706f43 68676972     UB......Copyrigh
   1a1b0:	63282074 30322029 42203731 7065756c     t (c) 2017 Bluep
   1a1c0:	746e6972 62755320 2e616573 6c6c4120     rint Subsea. All
   1a1d0:	67697220 20737468 65736572 64657672      rights reserved
   1a1e0:	000a0d2e 20726f46 74727566 20726568     ....For further 
   1a1f0:	6f666e69 74616d72 2c6e6f69 73697620     information, vis
   1a200:	68207469 3a707474 77772f2f 6c622e77     it http://www.bl
   1a210:	72706575 73746e69 65736275 6f632e61     ueprintsubsea.co
   1a220:	000a0d6d 2e752576 252e7525 25282075     m...v%u.%u.%u (%
   1a230:	00002973 2072614d 32203932 00373130     s)..Mar 29 2017.
   1a240:	45445b20 5d475542 00000000 00000a0d      [DEBUG]........

0001a250 <vtable for CDelegate1<void, TFlashProgActionParams*>>:
	...
   1a258:	00016bd1 00016c21 00018619 00000000     .k..!l..........

0001a268 <vtable for CDelegateMethod1<COculusHub, void, TFlashProgActionParams*>>:
	...
   1a270:	00016bdd 00016c35 00016be9 00000000     .k..5l...k......
   1a280:	75206e41 7078656e 65746365 72652064     An unexpected er
   1a290:	20726f72 20736168 7563636f 64657272     ror has occurred
   1a2a0:	6572202c 746f6f62 2e676e69 0a0d2e2e     , rebooting.....
	...

0001a2b8 <vtable for COculusHub>:
	...
   1a2c0:	00016c49 00016a61 00018619 00018619     Il..aj..........
   1a2d0:	00016bcd 00016a55 00016c0d 00000000     .k..Uj...l......

0001a2e0 <vtable for CComUart>:
	...
   1a2e8:	000172b9 00017305 000170a1 000170f9     .r...s...p...p..
   1a2f8:	00017131 00017169 00017439 000178d9     1q..iq..9t...x..
   1a308:	0001769d 00017031 000173f1 00017425     .v..1p...s..%t..

0001a318 <vtable for CFlash>:
	...
   1a320:	000179e9 000179f5                       .y...y..

0001a328 <vtable for CTickTimer>:
	...
   1a330:	000184bd 000184c9 65727570 72697620     ........pure vir
   1a340:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   1a350:	000a6465 656c6564 20646574 74726976     ed..deleted virt
   1a360:	206c6175 6874656d 6320646f 656c6c61     ual method calle
   1a370:	62000a64 63697361 7274735f 3a676e69     d..basic_string:
   1a380:	0074613a 69736162 74735f63 676e6972     :at.basic_string
   1a390:	6f633a3a 62007970 63697361 7274735f     ::copy.basic_str
   1a3a0:	3a676e69 6d6f633a 65726170 73616200     ing::compare.bas
   1a3b0:	735f6369 6e697274 5f3a3a67 72635f53     ic_string::_S_cr
   1a3c0:	65746165 73616200 735f6369 6e697274     eate.basic_strin
   1a3d0:	653a3a67 65736172 73616200 735f6369     g::erase.basic_s
   1a3e0:	6e697274 5f3a3a67 65725f4d 63616c70     tring::_M_replac
   1a3f0:	75615f65 61620078 5f636973 69727473     e_aux.basic_stri
   1a400:	3a3a676e 65736e69 62007472 63697361     ng::insert.basic
   1a410:	7274735f 3a676e69 7065723a 6563616c     _string::replace
   1a420:	73616200 735f6369 6e697274 613a3a67     .basic_string::a
   1a430:	67697373 6162006e 5f636973 69727473     ssign.basic_stri
   1a440:	3a3a676e 65707061 6200646e 63697361     ng::append.basic
   1a450:	7274735f 3a676e69 7365723a 00657a69     _string::resize.
   1a460:	69736162 74735f63 676e6972 535f3a3a     basic_string::_S
   1a470:	6e6f635f 75727473 6e207463 206c6c75     _construct null 
   1a480:	20746f6e 696c6176 61620064 5f636973     not valid.basic_
   1a490:	69727473 3a3a676e 69736162 74735f63     string::basic_st
   1a4a0:	676e6972 73616200 735f6369 6e697274     ring.basic_strin
   1a4b0:	733a3a67 74736275 65740072 6e696d72     g::substr.termin
   1a4c0:	20657461 6c6c6163 72206465 72756365     ate called recur
   1a4d0:	65766973 000a796c 6d726574 74616e69     sively..terminat
   1a4e0:	61632065 64656c6c 74666120 74207265     e called after t
   1a4f0:	776f7268 20676e69 69206e61 6174736e     hrowing an insta
   1a500:	2065636e 2720666f 000a2700 6d726574     nce of '.'..term
   1a510:	74616e69 61632065 64656c6c 74697720     inate called wit
   1a520:	74756f68 206e6120 69746361 65206576     hout an active e
   1a530:	70656378 6e6f6974 0000000a 4f4c475f     xception...._GLO
   1a540:	5f4c4142 00000000 6f6e6128 6f6d796e     BAL_....(anonymo
   1a550:	6e207375 73656d61 65636170 00000029     us namespace)...
   1a560:	69727473 6c20676e 72657469 00006c61     string literal..
   1a570:	00647473 6f747561 00000000 0000696c     std.auto....li..
   1a580:	00006c63 00007464 00007470 00007571     cl..dt..pt..qu..
   1a590:	6962615b 0000003a 00003a3a 6665647b     [abi:...::..{def
   1a5a0:	746c7561 67726120 00000023 00646c25     ault arg#...%ld.
   1a5b0:	003a3a7d 7272414a 00007961 00005d5b     }::.JArray..[]..
   1a5c0:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   1a5d0:	20726f66 00000000 736e6f63 63757274     for ....construc
   1a5e0:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   1a5f0:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   1a600:	6f666e69 726f6620 00000020 65707974     info for ...type
   1a610:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   1a620:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   1a630:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   1a640:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   1a650:	6e616972 65722074 6e727574 75687420     riant return thu
   1a660:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   1a670:	66207373 0020726f 72617567 61762064     ss for .guard va
   1a680:	62616972 6620656c 0020726f 20534c54     riable for .TLS 
   1a690:	74696e69 6e756620 6f697463 6f66206e     init function fo
   1a6a0:	00002072 20534c54 70617277 20726570     r ..TLS wrapper 
   1a6b0:	636e7566 6e6f6974 726f6620 00000020     function for ...
   1a6c0:	65666572 636e6572 65742065 726f706d     reference tempor
   1a6d0:	20797261 00000023 64646968 61206e65     ary #...hidden a
   1a6e0:	7361696c 726f6620 00000020 2d6e6f6e     lias for ...non-
   1a6f0:	6e617274 74636173 206e6f69 6e6f6c63     transaction clon
   1a700:	6f662065 00002072 7461535f 00000020     e for .._Sat ...
   1a710:	6363415f 00006d75 6172465f 00007463     _Accum.._Fract..
   1a720:	0000202c 7265706f 726f7461 00000000     , ..operator....
   1a730:	7265706f 726f7461 00000020 00006461     operator ...ad..
   1a740:	00007367 00007869 00203a20 2077656e     gs..ix.. : .new 
   1a750:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   1a760:	736c6166 00000065 65757274 00000000     false...true....
   1a770:	6176616a 73657220 6372756f 00002065     java resource ..
   1a780:	6c636564 65707974 00002820 002e2e2e     decltype (......
   1a790:	73696874 00000000 7261707b 0000236d     this....{parm#..
   1a7a0:	626f6c67 63206c61 74736e6f 74637572     global construct
   1a7b0:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   1a7c0:	626f6c67 64206c61 72747365 6f746375     global destructo
   1a7d0:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   1a7e0:	6d616c7b 28616462 00000000 00002329     {lambda(....)#..
   1a7f0:	6e6e757b 64656d61 70797420 00002365     {unnamed type#..
   1a800:	6c635b20 20656e6f 00000000 0000283e      [clone ....>(..
   1a810:	73657220 63697274 00000074 6c6f7620      restrict... vol
   1a820:	6c697461 00000065 6e6f6320 00007473     atile... const..
   1a830:	00002626 706d6f63 2078656c 00000000     &&..complex ....
   1a840:	67616d69 72616e69 00002079 002a3a3a     imaginary ..::*.
   1a850:	765f5f20 6f746365 00002872 3a647473      __vector(..std:
   1a860:	6c6c613a 7461636f 0000726f 6f6c6c61     :allocator..allo
   1a870:	6f746163 00000072 3a647473 7361623a     cator...std::bas
   1a880:	735f6369 6e697274 00000067 69736162     ic_string...basi
   1a890:	74735f63 676e6972 00000000 3a647473     c_string....std:
   1a8a0:	7274733a 00676e69 3a647473 7361623a     :string.std::bas
   1a8b0:	735f6369 6e697274 68633c67 202c7261     ic_string<char, 
   1a8c0:	3a647473 6168633a 72745f72 73746961     std::char_traits
   1a8d0:	6168633c 202c3e72 3a647473 6c6c613a     <char>, std::all
   1a8e0:	7461636f 633c726f 3e726168 00003e20     ocator<char> >..
   1a8f0:	3a647473 7473693a 6d616572 00000000     std::istream....
   1a900:	3a647473 7361623a 695f6369 65727473     std::basic_istre
   1a910:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   1a920:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   1a930:	0000003e 69736162 73695f63 61657274     >...basic_istrea
   1a940:	0000006d 3a647473 74736f3a 6d616572     m...std::ostream
   1a950:	00000000 3a647473 7361623a 6f5f6369     ....std::basic_o
   1a960:	65727473 633c6d61 2c726168 64747320     stream<char, std
   1a970:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   1a980:	203e7261 0000003e 69736162 736f5f63     ar> >...basic_os
   1a990:	61657274 0000006d 3a647473 736f693a     tream...std::ios
   1a9a0:	61657274 0000006d 3a647473 7361623a     tream...std::bas
   1a9b0:	695f6369 7274736f 3c6d6165 72616863     ic_iostream<char
   1a9c0:	7473202c 633a3a64 5f726168 69617274     , std::char_trai
   1a9d0:	633c7374 3e726168 00003e20 69736162     ts<char> >..basi
   1a9e0:	6f695f63 65727473 00006d61 00004e61     c_iostream..aN..
   1a9f0:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   1aa00:	00000026 00006e61 00007461 67696c61     &...an..at..alig
   1aa10:	20666f6e 00000000 00007a61 00006363     nof ....az..cc..
   1aa20:	736e6f63 61635f74 00007473 00002928     const_cast..()..
   1aa30:	00006d63 0000002c 00006f63 0000007e     cm..,...co..~...
   1aa40:	00005664 00003d2f 00006164 656c6564     dV../=..da..dele
   1aa50:	5d5b6574 00000020 00006364 616e7964     te[] ...dc..dyna
   1aa60:	5f63696d 74736163 00000000 00006564     mic_cast....de..
   1aa70:	0000002a 00006c64 656c6564 00206574     *...dl..delete .
   1aa80:	00007364 00002a2e 0000002e 00007664     ds...*......dv..
   1aa90:	0000002f 00004f65 00003d5e 00006f65     /...eO..^=..eo..
   1aaa0:	0000005e 00007165 00003d3d 00006567     ^...eq..==..ge..
   1aab0:	00003d3e 00007467 0000536c 003d3c3c     >=..gt..lS..<<=.
   1aac0:	00003d3c 7265706f 726f7461 00202222     <=..operator"" .
   1aad0:	0000736c 00003c3c 0000746c 0000003c     ls..<<..lt..<...
   1aae0:	0000496d 00003d2d 00004c6d 00003d2a     mI..-=..mL..*=..
   1aaf0:	0000696d 0000002d 00006c6d 00006d6d     mi..-...ml..mm..
   1ab00:	00002d2d 0000616e 5b77656e 0000005d     --..na..new[]...
   1ab10:	0000656e 00003d21 0000746e 00000021     ne..!=..nt..!...
   1ab20:	0000776e 0077656e 0000526f 00003d7c     nw..new.oR..|=..
   1ab30:	00006f6f 00007c7c 0000007c 00004c70     oo..||..|...pL..
   1ab40:	00003d2b 00006c70 0000002b 00006d70     +=..pl..+...pm..
   1ab50:	002a3e2d 00007070 00002b2b 00007370     ->*.pp..++..ps..
   1ab60:	00003e2d 0000003f 00004d72 00003d25     ->..?...rM..%=..
   1ab70:	00005372 003d3e3e 00006372 6e696572     rS..>>=.rc..rein
   1ab80:	70726574 5f746572 74736163 00000000     terpret_cast....
   1ab90:	00006d72 00000025 00007372 00003e3e     rm..%...rs..>>..
   1aba0:	00006373 74617473 635f6369 00747361     sc..static_cast.
   1abb0:	657a6973 0020666f 00007a73 00007274     sizeof .sz..tr..
   1abc0:	6f726874 00000077 00007774 6f726874     throw...tw..thro
   1abd0:	00002077 6e676973 63206465 00726168     w ..signed char.
   1abe0:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   1abf0:	72616863 00000000 65747962 00000000     char....byte....
   1ac00:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   1ac10:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   1ac20:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   1ac30:	61686320 00000072 00746e69 69736e75      char...int.unsi
   1ac40:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   1ac50:	64656e67 00000000 676e6f6c 00000000     gned....long....
   1ac60:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   1ac70:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   1ac80:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   1ac90:	726f6873 00000074 69736e75 64656e67     short...unsigned
   1aca0:	6f687320 00007472 64696f76 00000000      short..void....
   1acb0:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   1acc0:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   1acd0:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   1ace0:	00000032 69636564 366c616d 00000034     2...decimal64...
   1acf0:	69636564 316c616d 00003832 666c6168     decimal128..half
   1ad00:	00000000 72616863 745f3631 00000000     ....char16_t....
   1ad10:	72616863 745f3233 00000000 6c636564     char32_t....decl
   1ad20:	65707974 6c756e28 7274706c 00000029     type(nullptr)...
   1ad30:	00000043                                C...

0001ad34 <_global_impure_ptr>:
   1ad34:	1fff003c 2b302d23 6c680020 6665004c     <...#-0+ .hlL.ef
   1ad44:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   1ad54:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   1ad64:	64636261 00006665                       abcdef..

0001ad6c <__sf_fake_stdin>:
	...

0001ad8c <__sf_fake_stdout>:
	...

0001adac <__sf_fake_stderr>:
	...

0001adcc <_init>:
$t():
   1adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adce:	bf00      	nop
   1add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1add2:	bc08      	pop	{r3}
   1add4:	469e      	mov	lr, r3
   1add6:	4770      	bx	lr

0001add8 <_fini>:
   1add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adda:	bf00      	nop
   1addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1adde:	bc08      	pop	{r3}
   1ade0:	469e      	mov	lr, r3
   1ade2:	4770      	bx	lr
